<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aunean&#39;s Blog</title>
  
  <subtitle>The Kite Runner</subtitle>
  <link href="https://www.shiyiri.top/atom.xml" rel="self"/>
  
  <link href="https://www.shiyiri.top/"/>
  <updated>2021-06-06T07:30:48.890Z</updated>
  <id>https://www.shiyiri.top/</id>
  
  <author>
    <name>Aunean</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scrapy存储json格式数据</title>
    <link href="https://www.shiyiri.top/node/103.html"/>
    <id>https://www.shiyiri.top/node/103.html</id>
    <published>2021-06-06T06:55:04.884Z</published>
    <updated>2021-06-06T07:30:48.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-使用终端指令行方式"><a href="#1-使用终端指令行方式" class="headerlink" title="1.使用终端指令行方式"></a>1.使用终端指令行方式</h2><ul><li>指令：scrapy crawl xxx -o filePath.文件类型 -s FEED_EXPORT_ENCODING=utf-8</li><li>-s FEED_EXPORT_ENCODING=utf-8 解决中文乱码</li><li>注意：持久化存储对应的文本文件类型只可以为 ‘json’, ‘jsonlines’, ‘jl’, ‘csv’, ‘xml’, ‘marshal’, ‘pickle’ 类型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210606150550881.png" alt="终端指令方式存储数据格式"></p><h2 id="2-直接创建并写入-json-文件"><a href="#2-直接创建并写入-json-文件" class="headerlink" title="2.直接创建并写入 json 文件"></a>2.直接创建并写入 json 文件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> codecs<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">LiepinproPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法（初始化对象时执行的方法）</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 必须使用 w+ 模式打开文件，以便后续进行 读写操作（w+模式，意味既可读，亦可写）</span>        <span class="token comment" spellcheck="true"># 注意：此处打开文件使用的不是 python 的 open 方法，而是 codecs 中的 open 方法</span>        self<span class="token punctuation">.</span>json_file <span class="token operator">=</span> codecs<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'data2.json'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 爬虫开始时执行的方法</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在爬虫开始时，首先写入一个 '[' 符号，构造一个 json 数组</span>        <span class="token comment" spellcheck="true"># 为使得 Json 文件具有更高的易读性，我们辅助输出了 '\n'（换行符）</span>        self<span class="token punctuation">.</span>json_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'[\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 爬虫 pipeline 接收到 Scrapy 引擎发来的 item 数据时，执行的方法</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将 item 转换为 字典类型，并编码为 json 字符串，写入文件</span>        <span class="token comment" spellcheck="true"># 为使得 Json 文件具有更高的易读性，辅助输出 '\n'（换行符）</span>        item_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>json_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item_json <span class="token operator">+</span> <span class="token string">',\n'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token comment" spellcheck="true"># 爬虫结束时执行的方法</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在结束后，需要对 process_item 最后一次执行输出的 “逗号” 去除</span>        <span class="token comment" spellcheck="true"># 当前文件指针处于文件尾，我们需要首先使用 SEEK 方法，定位文件尾前的两个字符（一个','(逗号), 一个'\n'(换行符)）的位置</span>        self<span class="token punctuation">.</span>json_file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>SEEK_END<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用 truncate() 方法，将后面的数据清空</span>        self<span class="token punctuation">.</span>json_file<span class="token punctuation">.</span>truncate<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 重新输出'\n'，并输入']'，与 open_spider(self, spider) 时输出的 '['，构成一个完整的数组格式</span>        self<span class="token punctuation">.</span>json_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n]'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭文件</span>        self<span class="token punctuation">.</span>json_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210606151457502.png" alt="直接写入方式存储数据格式"></p><h2 id="3-使用-JsonItemExporter-写入-Json-文件"><a href="#3-使用-JsonItemExporter-写入-Json-文件" class="headerlink" title="3.使用 JsonItemExporter 写入 Json 文件"></a>3.使用 JsonItemExporter 写入 Json 文件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>exporters <span class="token keyword">import</span> JsonItemExporter<span class="token keyword">class</span> <span class="token class-name">LiepinproPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法（初始化对象时执行的方法）</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 使用 'wb' （二进制写模式）模式打开文件</span>        self<span class="token punctuation">.</span>json_file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'data3.json'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构建 JsonItemExporter 对象，设定不使用 ASCII 编码，并指定编码格式为 'UTF-8'</span>        self<span class="token punctuation">.</span>json_exporter <span class="token operator">=</span> JsonItemExporter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>json_file<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 声明 exporting 过程 开始，这一句也可以放在 open_spider() 方法中执行。</span>        self<span class="token punctuation">.</span>json_exporter<span class="token punctuation">.</span>start_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 爬虫 pipeline 接收到 Scrapy 引擎发来的 item 数据时，执行的方法</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将 item 存储到内存中</span>        self<span class="token punctuation">.</span>json_exporter<span class="token punctuation">.</span>export_item<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 声明 exporting 过程 结束，结束后，JsonItemExporter 会将收集存放在内存中的所有数据统一写入文件中</span>        self<span class="token punctuation">.</span>json_exporter<span class="token punctuation">.</span>finish_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭文件</span>        self<span class="token punctuation">.</span>json_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210606151925290.png" alt="JsonItemExporter写入方式存储数据格式"></p><h2 id="4-使用-JsonLinesItemExporter-写入-json-文件"><a href="#4-使用-JsonLinesItemExporter-写入-json-文件" class="headerlink" title="4.使用 JsonLinesItemExporter 写入 json 文件"></a>4.使用 JsonLinesItemExporter 写入 json 文件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>exporters <span class="token keyword">import</span> JsonLinesItemExporter<span class="token keyword">class</span> <span class="token class-name">LiepinproPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法（初始化对象时执行的方法）</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 使用 'wb' （二进制写模式）模式打开文件</span>        self<span class="token punctuation">.</span>json_file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'data4.json'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构建 JsonLinesItemExporter 对象，设定不使用 ASCII 编码，并指定编码格式为 'UTF-8'</span>        self<span class="token punctuation">.</span>json_exporter <span class="token operator">=</span> JsonLinesItemExporter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>json_file<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 声明 exporting 过程 开始，这一句也可以放在 open_spider() 方法中执行。</span>        self<span class="token punctuation">.</span>json_exporter<span class="token punctuation">.</span>start_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 爬虫 pipeline 接收到 Scrapy 引擎发来的 item 数据时，执行的方法</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将 item 直接写入文件中</span>        self<span class="token punctuation">.</span>json_exporter<span class="token punctuation">.</span>export_item<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 声明 exporting 过程 结束，结束后，JsonItemExporter 会将收集存放在内存中的所有数据统一写入文件中</span>        self<span class="token punctuation">.</span>json_exporter<span class="token punctuation">.</span>finish_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭文件</span>        self<span class="token punctuation">.</span>json_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210606152350992.png" alt="JsonLinesItemExporter写入方式存储数据格式"></p><h2 id="四种写入方式对比"><a href="#四种写入方式对比" class="headerlink" title="四种写入方式对比"></a>四种写入方式对比</h2><table><thead><tr><th>方式</th><th>内存占用情况</th><th>是否为标准json格式</th><th>易读性</th></tr></thead><tbody><tr><td>终端指令行存储</td><td>低</td><td>是</td><td>较高</td></tr><tr><td>直接创建并写入文件</td><td>低</td><td>是</td><td>高</td></tr><tr><td>JsonItemExporter</td><td>高</td><td>是</td><td>高</td></tr><tr><td>JsonLinesItemExporter</td><td>低</td><td>否</td><td>低</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-使用终端指令行方式&quot;&gt;&lt;a href=&quot;#1-使用终端指令行方式&quot; class=&quot;headerlink&quot; title=&quot;1.使用终端指令行方式&quot;&gt;&lt;/a&gt;1.使用终端指令行方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;指令：scrapy crawl xxx -o fileP</summary>
      
    
    
    
    <category term="python" scheme="https://www.shiyiri.top/categories/python/"/>
    
    
    <category term="数据采集" scheme="https://www.shiyiri.top/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>高性能爬虫</title>
    <link href="https://www.shiyiri.top/node/102.html"/>
    <id>https://www.shiyiri.top/node/102.html</id>
    <published>2021-05-31T03:35:54.808Z</published>
    <updated>2021-05-31T04:09:27.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-单线程爬取视频"><a href="#1-单线程爬取视频" class="headerlink" title="1.单线程爬取视频"></a>1.单线程爬取视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> time<span class="token keyword">from</span> UA<span class="token punctuation">.</span>UAPool <span class="token keyword">import</span> UserAgent<span class="token keyword">import</span> randomheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">downMP4</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_name <span class="token operator">=</span> names<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;strong>"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/strong>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".mp4"</span>    video_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> html    response_video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_url<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> open<span class="token punctuation">(</span>video_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response_video<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>video_name <span class="token operator">+</span> <span class="token string">" 下载完成"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parsePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://ibaotu.com/tupian/gongjiangjingshen/7-0-0-0-0-0-0.html?format_type=0"</span>    <span class="token comment" spellcheck="true"># 第二步：发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步：获取数据</span>    html_content <span class="token operator">=</span> response<span class="token punctuation">.</span>text    sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_content<span class="token punctuation">)</span>    video_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//video[@preload="none"]/@src'</span><span class="token punctuation">)</span>    names <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//ul/li/@pr-data-title"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>video_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        downMP4<span class="token punctuation">(</span>video_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共耗时：{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parsePage<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210531115055998.png" alt="单线程爬取所需时间"></p><h2 id="2-多线程爬取视频"><a href="#2-多线程爬取视频" class="headerlink" title="2.多线程爬取视频"></a>2.多线程爬取视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> time<span class="token keyword">from</span> UA<span class="token punctuation">.</span>UAPool <span class="token keyword">import</span> UserAgent<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutorfolder_name <span class="token operator">=</span> <span class="token string">'video/'</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">downMP4</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_name <span class="token operator">=</span> names<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;strong>"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/strong>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".mp4"</span>    video_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> html    <span class="token comment" spellcheck="true"># 同步下载</span>    response_video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_url<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> open<span class="token punctuation">(</span>folder_name<span class="token operator">+</span>video_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response_video<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>video_name <span class="token operator">+</span> <span class="token string">" 下载完成"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parsePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一步，确定爬虫地址</span>    url <span class="token operator">=</span> <span class="token string">"https://ibaotu.com/tupian/gongjiangjingshen/7-0-0-0-0-0-0.html?format_type=0"</span>    <span class="token comment" spellcheck="true"># 第二步：发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步：获取数据</span>    html_content <span class="token operator">=</span> response<span class="token punctuation">.</span>text    sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_content<span class="token punctuation">)</span>    video_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//video[@preload="none"]/@src'</span><span class="token punctuation">)</span>    names <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//ul/li/@pr-data-title"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 多线程</span>    executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>video_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>downMP4<span class="token punctuation">,</span> video_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    executor<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    finish_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载总耗费时间：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>round<span class="token punctuation">(</span>finish_time<span class="token operator">-</span>start_time<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parsePage<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210531120258131.png" alt="多线程爬取所需时间"></p><h2 id="3-协程-同步爬取视频"><a href="#3-协程-同步爬取视频" class="headerlink" title="3.协程+同步爬取视频"></a>3.协程+同步爬取视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> time<span class="token keyword">from</span> UA<span class="token punctuation">.</span>UAPool <span class="token keyword">import</span> UserAgent<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutorfolder_name <span class="token operator">=</span> <span class="token string">'video/'</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">downMP4</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_name <span class="token operator">=</span> names<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;strong>"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/strong>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".mp4"</span>    video_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> html    <span class="token comment" spellcheck="true"># 同步下载</span>    response_video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_url<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> open<span class="token punctuation">(</span>folder_name<span class="token operator">+</span>video_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response_video<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>video_name <span class="token operator">+</span> <span class="token string">" 下载完成"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parsePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一步，确定爬虫地址</span>    url <span class="token operator">=</span> <span class="token string">"https://ibaotu.com/tupian/gongjiangjingshen/7-0-0-0-0-0-0.html?format_type=0"</span>    <span class="token comment" spellcheck="true"># 第二步：发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步：获取数据</span>    html_content <span class="token operator">=</span> response<span class="token punctuation">.</span>text    sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_content<span class="token punctuation">)</span>    video_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//video[@preload="none"]/@src'</span><span class="token punctuation">)</span>    names <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//ul/li/@pr-data-title"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 协程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    downMP4Task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>video_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        downMP4Proxy <span class="token operator">=</span> downMP4<span class="token punctuation">(</span>video_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        future <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>downMP4Proxy<span class="token punctuation">)</span>        downMP4Task<span class="token punctuation">.</span>append<span class="token punctuation">(</span>future<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>downMP4Task<span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    finish_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载总耗费时间：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>round<span class="token punctuation">(</span>finish_time<span class="token operator">-</span>start_time<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parsePage<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210531120615624.png" alt="协程+同步爬取所需时间"></p><h2 id="4-协程-同步爬取视频"><a href="#4-协程-同步爬取视频" class="headerlink" title="4.协程+同步爬取视频"></a>4.协程+同步爬取视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> time<span class="token keyword">from</span> UA<span class="token punctuation">.</span>UAPool <span class="token keyword">import</span> UserAgent<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutorfolder_name <span class="token operator">=</span> <span class="token string">'video/'</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">downMP4</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_name <span class="token operator">=</span> names<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;strong>"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/strong>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".mp4"</span>    video_url <span class="token operator">=</span> <span class="token string">"https:"</span> <span class="token operator">+</span> html    <span class="token comment" spellcheck="true"># 异步下载</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>video_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span> <span class="token keyword">as</span> video_response<span class="token punctuation">:</span>            video_content <span class="token operator">=</span> <span class="token keyword">await</span> video_response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>folder_name<span class="token operator">+</span>video_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video_content<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>video_name <span class="token operator">+</span> <span class="token string">" 下载完成"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parsePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一步，确定爬虫地址</span>    url <span class="token operator">=</span> <span class="token string">"https://ibaotu.com/tupian/gongjiangjingshen/7-0-0-0-0-0-0.html?format_type=0"</span>    <span class="token comment" spellcheck="true"># 第二步：发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步：获取数据</span>    html_content <span class="token operator">=</span> response<span class="token punctuation">.</span>text    sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_content<span class="token punctuation">)</span>    video_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//video[@preload="none"]/@src'</span><span class="token punctuation">)</span>    names <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//ul/li/@pr-data-title"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 协程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    downMP4Task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>video_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        downMP4Proxy <span class="token operator">=</span> downMP4<span class="token punctuation">(</span>video_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        future <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>downMP4Proxy<span class="token punctuation">)</span>        downMP4Task<span class="token punctuation">.</span>append<span class="token punctuation">(</span>future<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>downMP4Task<span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    finish_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载总耗费时间：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>round<span class="token punctuation">(</span>finish_time<span class="token operator">-</span>start_time<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parsePage<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210531120902934.png" alt="协程+异步爬取所需时间"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-单线程爬取视频&quot;&gt;&lt;a href=&quot;#1-单线程爬取视频&quot; class=&quot;headerlink&quot; title=&quot;1.单线程爬取视频&quot;&gt;&lt;/a&gt;1.单线程爬取视频&lt;/h2&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;la</summary>
      
    
    
    
    <category term="python" scheme="https://www.shiyiri.top/categories/python/"/>
    
    
    <category term="数据采集" scheme="https://www.shiyiri.top/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Spark学习</title>
    <link href="https://www.shiyiri.top/node/10.html"/>
    <id>https://www.shiyiri.top/node/10.html</id>
    <published>2021-05-09T13:51:02.056Z</published>
    <updated>2021-05-09T13:53:13.671Z</updated>
    
    <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell"># 第一种方式bin/spark-submit --master spark://node:7077 --class cn.hnkjxy.WordCount_Online /root/data/spark5.jar# 第二种方式bin/spark-submit --master spark://node:7077 --class cn.hnkjxy.WordCount_Online /root/data/spark5.jar /hdfs路劲# 从本地文件系统加载数据创建RDDval localRDD=sc.textFile("file:///root/words.txt")# 从hdfs加载数据创建RDDval hdfsRDD = sc.textFile("/spark/test/words.txt")# 通过集合创建RDDscala> val arr = Array(1,2,3,4,5)scala> val arrRDD = sc.parallelize(arr)# 通过列表创建RDDval arr1 = List(1, 2, 3, 4, 5, 6, 7)val arr1RDD = sc.parallelize(arr1)</code></pre><h2 id="RDD的分区"><a href="#RDD的分区" class="headerlink" title="RDD的分区"></a>RDD的分区</h2><ul><li>哈希分区（HashPartitioner）</li><li>范围分区（RangePartitioner）</li></ul><h2 id="RDD的依赖关系"><a href="#RDD的依赖关系" class="headerlink" title="RDD的依赖关系"></a>RDD的依赖关系</h2><ul><li><p>窄依赖</p><ul><li>窄依赖是指父RDD的每一个分区最多被一个子RDD的分区使用</li><li>RDD做map、filter和union算子操作时，是属于窄依赖的第一类表现；而RDD做join算子操作（对输入进行协同划分）时，是属于窄依赖表现的第二类。</li></ul></li><li><p>宽依赖</p><ul><li><p>宽依赖是指子RDD的每一个分区都会使用所有父RDD的所有分区或多个分区</p></li><li></li></ul></li></ul><h2 id="RDD的机制"><a href="#RDD的机制" class="headerlink" title="RDD的机制"></a>RDD的机制</h2><h3 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h3><ol><li>使用persist()方法对RDD进行持久化</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 导入StorageLevel对象的包</span>scala<span class="token operator">></span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>StorageLevel<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>StorageLevel<span class="token comment" spellcheck="true">// 定义一个列表list</span>scala<span class="token operator">></span> <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span><span class="token string">"spark"</span><span class="token punctuation">,</span><span class="token string">"hive"</span><span class="token punctuation">)</span>list<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>hadoop<span class="token punctuation">,</span> spark<span class="token punctuation">,</span> hive<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建一个RDD</span>scala<span class="token operator">></span> <span class="token keyword">val</span> listRDD<span class="token operator">=</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span>listRDD<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span><span class="token comment" spellcheck="true">// 添加persist()方法，用于持久化RDD，减少IO操作，提高计算效率</span>scala<span class="token operator">></span> listRDD<span class="token punctuation">.</span>persist<span class="token punctuation">(</span>StorageLevel<span class="token punctuation">.</span>DISK_ONLY<span class="token punctuation">)</span>res0<span class="token operator">:</span> listRDD<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span><span class="token comment" spellcheck="true">// count()行动算子操作，统计元素的个数</span>scala<span class="token operator">></span> println<span class="token punctuation">(</span>listRDD<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3</span>                                                                               scala<span class="token operator">></span> println<span class="token punctuation">(</span>listRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hadoopsparkhivescala<span class="token operator">></span> println<span class="token punctuation">(</span>listRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hadoop<span class="token punctuation">,</span>spark<span class="token punctuation">,</span>hivescala<span class="token operator">></span> listRDD<span class="token punctuation">.</span>unpersist<span class="token punctuation">(</span><span class="token punctuation">)</span>res3<span class="token operator">:</span> listRDD<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span></code></pre><ol start="2"><li>使用chache()方法对RDD进行持久化 </li></ol><pre class=" language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span><span class="token string">"spark"</span><span class="token punctuation">,</span><span class="token string">"hive"</span><span class="token punctuation">)</span>list<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>hadoop<span class="token punctuation">,</span> spark<span class="token punctuation">,</span> hive<span class="token punctuation">)</span>scala<span class="token operator">></span> listRDD<span class="token punctuation">.</span>cache<span class="token punctuation">(</span><span class="token punctuation">)</span>res4<span class="token operator">:</span> listRDD<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span>scala<span class="token operator">></span> println<span class="token punctuation">(</span>listRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hadoop<span class="token punctuation">,</span>spark<span class="token punctuation">,</span>hive</code></pre><h3 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h3><ol><li>血统方式：<ul><li>根据RDD之间的依赖关系</li></ul></li></ol><pre class=" language-a"><code class="language-a">RDD的原理什么是RDD？RDD如何来的？RDD有什么用？RDD是如何进行持久化的？</code></pre><h2 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h2><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// DataFrame的创建</span><span class="token comment" spellcheck="true">// 通过toDF()创建</span><span class="token keyword">val</span> personRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"hdfs://node:9000/spark/test/person.txt"</span><span class="token punctuation">)</span><span class="token keyword">val</span> personDF <span class="token operator">=</span> personRDD<span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> lineRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"/spark/test/person.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">class</span> Person<span class="token punctuation">(</span>id<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token keyword">val</span> personRDD <span class="token operator">=</span> lineRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x<span class="token keyword">=></span>Person<span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt<span class="token punctuation">,</span>x<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> personDF <span class="token operator">=</span> personRDD<span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token punctuation">)</span>personDF<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token comment" spellcheck="true">// 2.直接创建</span><span class="token keyword">val</span> psersonDF2 <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"hdfs://node:9000/spark/test/person.txt"</span><span class="token punctuation">)</span></code></pre><p><img src="C:\Users\14533\AppData\Roaming\Typora\typora-user-images\image-20210507194417398.png" alt="image-20210507194417398"></p><p><img src="C:\Users\14533\AppData\Roaming\Typora\typora-user-images\image-20210507194732688.png" alt="image-20210507194732688"></p><p><img src="C:\Users\14533\AppData\Roaming\Typora\typora-user-images\image-20210507195029036.png" alt="image-20210507195029036"></p><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210507195218684.png" alt="image-20210507195218684"></p><p><img src="C:\Users\14533\AppData\Roaming\Typora\typora-user-images\image-20210507200440435.png" alt="image-20210507200440435"></p><p><img src="C:\Users\14533\AppData\Roaming\Typora\typora-user-images\image-20210507200537271.png" alt="image-20210507200537271"></p><p><img src="C:\Users\14533\AppData\Roaming\Typora\typora-user-images\image-20210507201806664.png" alt="image-20210507201806664"></p><p><img src="C:\Users\14533\AppData\Roaming\Typora\typora-user-images\image-20210507202142525.png" alt="image-20210507202142525"></p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 1.将DataFrame注册成一个临时表</span>personDF<span class="token punctuation">.</span>registerTempTable<span class="token punctuation">(</span><span class="token string">"t_person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.查询年龄最大的前两名人的信息</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select * from t_person order by age desc limit 2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="Spark学习笔记"><a href="#Spark学习笔记" class="headerlink" title="Spark学习笔记"></a>Spark学习笔记</h1><h2 id="第一章-Spark概述"><a href="#第一章-Spark概述" class="headerlink" title="第一章 Spark概述"></a>第一章 Spark概述</h2><h3 id="1-1-Spark是什么"><a href="#1-1-Spark是什么" class="headerlink" title="1.1 Spark是什么"></a>1.1 Spark是什么</h3><blockquote><p>Spark 是一种基于内存的快速、通用、可扩展的大数据分析计算引擎</p></blockquote><h3 id="1-2-Spark-or-Hadoop"><a href="#1-2-Spark-or-Hadoop" class="headerlink" title="1.2 Spark or Hadoop"></a>1.2 Spark or Hadoop</h3><ul><li>Hadoop MapReduce 由于其设计初衷并不是为了满足循环迭代式数据流处理，因此在多并行运行的数据可复用场景（如：机器学习、图挖掘算法、交互式数据挖掘算法）中存在诸多计算效率等问题。所以 Spark 应运而生，Spark 就是在传统的 MapReduce 计算框架的基础上，利用其计算过程的优化，从而大大加快了数据分析、挖掘的运行和读写速度，并将计算单元缩小到更适合并行计算和重复使用的 RDD 计算模型</li><li>机器学习中 ALS、凸优化梯度下降等。这些都需要基于数据集或者数据集的衍生数据反复查询反复操作。MR 这种模式不太合适，即使多 MR 串行处理，性能和时间也是一个问题。数据的共享依赖于磁盘。另外一种是交互式数据挖掘，MR 显然不擅长。而Spark 所基于的 scala 语言恰恰擅长函数的处理</li><li>Spark 是一个分布式数据快速分析项目。它的核心技术是弹性分布式数据集（Resilient Distributed Datasets），提供了比 MapReduce 丰富的模型，可以快速在内存中对数据集进行多次迭代，来支持复杂的数据挖掘算法和图形计算算法</li><li>==Spark 和Hadoop 的根本差异是多个作业之间的数据通信问题 : Spark 多个作业之间数据通信是基于内存，而 Hadoop 是基于磁盘==</li><li>Spark Task 的启动时间快。Spark 采用 fork 线程的方式，而 Hadoop 采用创建新的进程的方式。</li><li>Spark 只有在 shuffle 的时候将数据写入磁盘，而 Hadoop 中多个 MR 作业之间的数据交互都要依赖于磁盘交互</li><li>Spark 的缓存机制比 HDFS 的缓存机制高效</li></ul><h3 id="1-3-Spark核心模块"><a href="#1-3-Spark核心模块" class="headerlink" title="1.3 Spark核心模块"></a>1.3 Spark核心模块</h3><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210504180944067.png" alt="Spark模块"></p><ul><li><p>Spark Core</p><blockquote><p>park Core中提供了Spark最基础与最核心的功能，Spark其他的功能如：Spark SQL。Spark Streaming，GraphX, MLlib都是在Spark Core的基础上进行扩展的</p></blockquote></li><li><p>Spark SQL</p><blockquote><p>Spark SQL是Spark用来操作结构化数据的组件。通过Spark SQL，用户可以使用SQL或者Apache Hive版本的SQL方言（HQL）来查询数据</p></blockquote></li><li><p>Spark Streaming</p><blockquote><p>Spark Streaming是Spark平台上针对实时数据进行流式计算的组件，提供了丰富的处理数据流的API。</p></blockquote></li><li><p>Spark MLlib</p><blockquote><p>MLlib是Spark提供的一个机器学习算法库。MLlib不仅提供了模型评估、数据导入等额外的功能，还提供了一些更底层的机器学习原语。</p></blockquote></li><li><p>Spark GraphX</p><blockquote><p>GraphX是Spark面向图计算提供的框架与算法库。</p></blockquote></li></ul><h2 id="第二章-Spark快速入手"><a href="#第二章-Spark快速入手" class="headerlink" title="第二章 Spark快速入手"></a>第二章 Spark快速入手</h2><p><a href="https://mvnrepository.com/">POM依赖下载地址</a></p><h3 id="2-1-创建Manven项目"><a href="#2-1-创建Manven项目" class="headerlink" title="2.1 创建Manven项目"></a>2.1 创建Manven项目</h3><h4 id="2-1-1-下载Scala插件"><a href="#2-1-1-下载Scala插件" class="headerlink" title="2.1.1 下载Scala插件"></a>2.1.1 下载Scala插件</h4><h4 id="2-1-2-依赖"><a href="#2-1-2-依赖" class="headerlink" title="2.1.2 依赖"></a>2.1.2 依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spark-core--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spark-streaming--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spark-sql --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- scala-libary 2.11.12 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-library<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-streaming-kafka-0-10 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming-kafka-0-10_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spark-streaming-kafka --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming-kafka_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spark-hive_2.11 --></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-hive --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-hive_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-graphx --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-graphx_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-mllib_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;dependency>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;groupId>org.apache.spark&lt;/groupId>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;artifactId>spark-mllib_2.11&lt;/artifactId>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;version>2.4.4&lt;/version>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;scope>runtime&lt;/scope>--></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;/dependency>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--8.0.22--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;dependency>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;groupId>org.json4s&lt;/groupId>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;artifactId>json4s-jackson_2.11&lt;/artifactId>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;version>${json4s.version}&lt;/version>--></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;/dependency>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jfree<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jfreechart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;dependency>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;groupId>org.apache.maven.plugins&lt;/groupId>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;artifactId>maven-shade-plugin&lt;/artifactId>--></span>        <span class="token comment" spellcheck="true">&lt;!--            &lt;version>2.3&lt;/version>--></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;/dependency>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">></span></span>src/main/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testSourceDirectory</span><span class="token punctuation">></span></span>src/test/scala<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testSourceDirectory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.alchim31.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>testCompile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>args</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">></span></span>-dependencyfile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">></span></span>${project.build.directory}/.scala_dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>args</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifact</span><span class="token punctuation">></span></span>*:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifact</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.SF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.DSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.RSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h4 id="2-1-3-WordCount"><a href="#2-1-3-WordCount" class="headerlink" title="2.1.3 WordCount"></a>2.1.3 WordCount</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>wc<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span><span class="token punctuation">{</span>Level<span class="token punctuation">,</span> Logger<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">object</span> Spark03_WordCount <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Application</span>    <span class="token comment" spellcheck="true">// Spark框架</span>    <span class="token comment" spellcheck="true">// TODO 建立和Spark框架的连接</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"WordCount"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO　执行业务操作</span>    <span class="token keyword">val</span> lines<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"datas"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> words <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> wordToOne <span class="token operator">=</span> words<span class="token punctuation">.</span>map<span class="token punctuation">(</span>      word <span class="token keyword">=></span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Spark框架提供了更多的功能，可以将分组和聚合使用一个方法实现</span>    <span class="token comment" spellcheck="true">// reduceByKey()：相同的key的数据，可以对value进行reduce聚合</span>    <span class="token comment" spellcheck="true">// wordToOne.reduceByKey((x, y) => {x + y})</span>    <span class="token keyword">val</span> wordToCount <span class="token operator">=</span> wordToOne<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span>    <span class="token keyword">val</span> array <span class="token operator">=</span> wordToCount<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    array<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 关闭连接</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-4-log4j-properties-配置日志文件"><a href="#2-1-4-log4j-properties-配置日志文件" class="headerlink" title="2.1.4 log4j.properties 配置日志文件"></a>2.1.4 log4j.properties 配置日志文件</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootCategory</span><span class="token punctuation">=</span><span class="token attr-value">ERROR, console</span><span class="token attr-name">log4j.appender.console</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.target</span><span class="token punctuation">=</span><span class="token attr-value">System.err</span><span class="token attr-name">log4j.appender.console.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n</span><span class="token comment" spellcheck="true"># Set the default spark-shell log level to ERROR. When running the spark-shell,the</span><span class="token comment" spellcheck="true"># log level for this class is used to overwrite the root logger's log level, so that</span><span class="token comment" spellcheck="true"># the user can have different defaults for the shell and regular Spark apps.</span><span class="token attr-name">log4j.logger.org.apache.spark.repl.Main</span><span class="token punctuation">=</span><span class="token attr-value">ERROR</span><span class="token comment" spellcheck="true"># Settings to quiet third party logs that are too verbose</span><span class="token attr-name">log4j.logger.org.spark_project.jetty</span><span class="token punctuation">=</span><span class="token attr-value">ERROR</span><span class="token attr-name">log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle</span><span class="token punctuation">=</span><span class="token attr-value">ERROR</span><span class="token attr-name">log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper</span><span class="token punctuation">=</span><span class="token attr-value">ERROR</span><span class="token attr-name">log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter</span><span class="token punctuation">=</span><span class="token attr-value">ERROR</span><span class="token attr-name">log4j.logger.org.apache.parquet</span><span class="token punctuation">=</span><span class="token attr-value">ERROR</span><span class="token attr-name">log4j.logger.parquet</span><span class="token punctuation">=</span><span class="token attr-value">ERROR</span></code></pre><h2 id="第三章-Spark运行环境"><a href="#第三章-Spark运行环境" class="headerlink" title="第三章 Spark运行环境"></a>第三章 Spark运行环境</h2><blockquote><p>Spark 作为一个数据处理框架和计算引擎，被设计在所有常见的集群环境中运行, 在国内工作中主流的环境为 Yarn，不过逐渐容器式环境也慢慢流行起来。接下来，我们就分别看看不同环境下 Spark 的运行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210504190306359.png" alt="运行环境"></p><pre class=" language-scala"><code class="language-scala">bin<span class="token operator">/</span>spark<span class="token operator">-</span>submit <span class="token operator">--</span><span class="token keyword">class</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>SparkPi <span class="token operator">--</span>master spark<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>node<span class="token operator">:</span><span class="token number">7077</span> examples<span class="token operator">/</span>jars<span class="token operator">/</span>spark<span class="token operator">-</span>examples_2<span class="token number">.11</span><span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>jar <span class="token number">10</span>bin<span class="token operator">/</span>spark<span class="token operator">-</span>submit <span class="token operator">--</span><span class="token keyword">class</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>SparkPi <span class="token operator">--</span>master yarn <span class="token operator">--</span>deploy<span class="token operator">-</span>mode cluster examples<span class="token operator">/</span>jars<span class="token operator">/</span>spark<span class="token operator">-</span>examples_2<span class="token number">.11</span><span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>jar <span class="token number">10</span>bin<span class="token operator">/</span>spark<span class="token operator">-</span>submit <span class="token operator">--</span><span class="token keyword">class</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>SparkPi <span class="token operator">--</span>master yarn <span class="token operator">--</span>deploy<span class="token operator">-</span>mode client examples<span class="token operator">/</span>jars<span class="token operator">/</span>spark<span class="token operator">-</span>examples_2<span class="token number">.11</span><span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>jar <span class="token number">10</span></code></pre><h2 id="第四章-Spark运行架构"><a href="#第四章-Spark运行架构" class="headerlink" title="第四章 Spark运行架构"></a>第四章 Spark运行架构</h2><h3 id="4-1-运行架构"><a href="#4-1-运行架构" class="headerlink" title="4.1 运行架构"></a>4.1 运行架构</h3><blockquote><p>Spark 框架的核心是一个计算引擎，整体来说，它采用了标准 master-slave 的结构</p></blockquote><ul><li>图形中的 Driver 表示 master，负责管理整个集群中的作业任务调度。图形中的 Executor 则是 slave，负责实际执行任务</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505115734291.png" alt="运行架构"></p><h3 id="4-2-核心组件"><a href="#4-2-核心组件" class="headerlink" title="4.2 核心组件"></a>4.2 核心组件</h3><h4 id="4-2-1-Driver"><a href="#4-2-1-Driver" class="headerlink" title="4.2.1 Driver"></a>4.2.1 Driver</h4><p>Spark驱动器节点，用于执行Spark任务中的main方法，负责实际代码的执行工作。Driver在Spark作业执行时主要负责：</p><ol><li>将用户程序转化为作业（job）</li><li>在Executor之间调度任务(task)</li><li>跟踪Executor的执行情况</li><li>通过UI展示查询运行情况</li></ol><h4 id="4-2-2-Executor"><a href="#4-2-2-Executor" class="headerlink" title="4.2.2 Executor"></a>4.2.2 Executor</h4><blockquote><p>Spark Executor是集群中工作节点（Worker）中的一个JVM进程，负责在Spark 作业中运行具体任务（Task），任务彼此之间相互独立。Spark 应用启动时，Executor节点被同时启动，并且始终伴随着整个Spark 应用的生命周期而存在。如果有Executor节点发生了故障或崩溃，Spark 应用也可以继续执行，会将出错节点上的任务调度到其他Executor节点上继续运行。</p></blockquote><ul><li>Executor有两个核心功能：<ul><li>负责运行组成Spark应用的任务，并将结果返回给驱动器进程</li><li>它们通过自身的块管理器（Block Manager）为用户程序中要求缓存的RDD 提供内存式存储。RDD 是直接缓存在Executor进程内的，因此任务可以在运行时充分利用缓存数据加速运算。</li></ul></li></ul><h4 id="4-2-3-Master-amp-Worker"><a href="#4-2-3-Master-amp-Worker" class="headerlink" title="4.2.3 Master &amp; Worker"></a>4.2.3 Master &amp; Worker</h4><blockquote><p>Spark集群的独立部署环境中，不需要依赖其他的资源调度框架，自身就实现了资源调度的功能，所以环境中还有其他两个核心组件：Master和Worker，这里的Master是一个进程，主要负责资源的调度和分配，并进行集群的监控等职责，类似于Yarn环境中的RM, 而Worker呢，也是进程，一个Worker运行在集群中的一台服务器上，由Master分配资源对数据进行并行的处理和计算，类似于Yarn环境中NM。</p></blockquote><h4 id="4-2-4-ApplicationMaster"><a href="#4-2-4-ApplicationMaster" class="headerlink" title="4.2.4 ApplicationMaster"></a>4.2.4 ApplicationMaster</h4><blockquote><p>Hadoop用户向YARN集群提交应用程序时,提交程序中应该包含ApplicationMaster，用于向资源调度器申请执行任务的资源容器Container，运行用户自己的程序任务job，监控整个任务的执行，跟踪整个任务的状态，处理任务失败等异常情况</p></blockquote><h3 id="4-3-核心概念"><a href="#4-3-核心概念" class="headerlink" title="4.3 核心概念"></a>4.3 核心概念</h3><h4 id="4-3-1-Executor-与-Core"><a href="#4-3-1-Executor-与-Core" class="headerlink" title="4.3.1 Executor 与 Core"></a>4.3.1 Executor 与 Core</h4><blockquote><p>Spark Executor是集群中运行在工作节点（Worker）中的一个JVM进程，是整个集群中的专门用于计算的节点。在提交应用中，可以提供参数指定计算节点的个数，以及对应的资源。这里的资源一般指的是工作节点Executor的内存大小和使用的虚拟CPU核（Core）数量。</p></blockquote><p>应用程序相关启动参数如下：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>–num-executors</td><td>配置Executor的数量</td></tr><tr><td>–executor-memory</td><td>配置每个Executor的内存大小</td></tr><tr><td>–executor-cores</td><td>配置每个Executor的虚拟CPU core数量</td></tr></tbody></table><h4 id="4-3-2-并行度（Parallelism）"><a href="#4-3-2-并行度（Parallelism）" class="headerlink" title="4.3.2 并行度（Parallelism）"></a>4.3.2 并行度（Parallelism）</h4><blockquote><p>在分布式计算框架中一般都是多个任务同时执行，由于任务分布在不同的计算节点进行计算，所以能够真正地实现多任务并行执行，记住，这里是并行，而不是并发。这里我们将整个集群并行执行任务的数量称之为<code>并行度</code>。那么一个作业到底并行度是多少呢？这个取决于框架的默认配置。应用程序也可以在运行过程中动态修改。</p></blockquote><h4 id="4-3-3-有向无环图（DAG）"><a href="#4-3-3-有向无环图（DAG）" class="headerlink" title="4.3.3 有向无环图（DAG）"></a>4.3.3 有向无环图（DAG）</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505120842451.png" alt="有向无环图"></p><h3 id="4-4-提交流程"><a href="#4-4-提交流程" class="headerlink" title="4.4 提交流程"></a>4.4 提交流程</h3><blockquote><p>提交流程，其实就是我们开发人员根据需求写的应用程序通过Spark客户端提交给Spark运行环境执行计算的流程。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505121201263.png" alt="提交流程图"></p><p>Spark应用程序提交到Yarn环境中执行的时候，一般会有两种部署执行的方式：Client 和Cluster。两种模式主要区别在于：Driver程序的运行节点位置。</p><h4 id="4-2-1-Yarn-Client-模式"><a href="#4-2-1-Yarn-Client-模式" class="headerlink" title="4.2.1 Yarn Client 模式"></a>4.2.1 Yarn Client 模式</h4><blockquote><p>Client模式将用于监控和调度的Driver模块在客户端执行，而不是在Yarn中，所以一般用于测试</p></blockquote><ul><li><p><code>Driver</code>在任务提交的本地机器上运行</p></li><li><p><code>Driver</code>启动后会和<code>ResourceManager</code>通讯申请启动<code>ApplicationMaster</code></p></li><li><p><code>ResourceManager</code>分配<code>container</code>，在合适的<code>NodeManager</code>上启动<code>ApplicationMaster</code>，负责向<code>ResourceManager</code>申请<code>Executor</code>内存</p></li><li><p><code>ResourceManager</code>接到<code>ApplicationMaster</code>的资源申请后会分配<code>container</code>，然后 <code>ApplicationMaster</code>在资源分配指定的<code>NodeManager</code>上启动<code>Executor</code>进程</p></li><li><p><code>Executor</code>进程启动后会向<code>Driver</code>反向注册，<code>Executor</code>全部注册完成后<code>Driver</code>开始执行<code>main</code>函数</p></li><li><p>之后执行到<code>Action</code>算子时，触发一个<code>Job</code>，并根据宽依赖开始划分<code>stage</code>，每个<code>stage</code>生成对应的<code>TaskSet</code>，之后将<code>task</code>分发到各个<code>Executor</code>上执行</p></li></ul><h4 id="4-2-2-Yarn-Cluster-模式"><a href="#4-2-2-Yarn-Cluster-模式" class="headerlink" title="4.2.2 Yarn Cluster 模式"></a>4.2.2 Yarn Cluster 模式</h4><blockquote><p>Cluster模式将用于监控和调度的Driver模块启动在Yarn集群资源中执行。一般应用于实际生产环境。</p></blockquote><ul><li>在<code>YARN Cluster</code>模式下，任务提交后会和<code>ResourceManager</code>通讯申请启动 <code>ApplicationMaster</code></li><li>随后<code>ResourceManager</code>分配<code>container</code>，在合适的<code>NodeManager</code>上启动<code>ApplicationMaster</code>，此时的<code>ApplicationMaster</code>就是<code>Driver</code></li><li><code>Driver</code>启动后向<code>ResourceManager</code>申请<code>Executor</code>内存，<code>ResourceManager</code>接到 <code>ApplicationMaster</code>的资源申请后会分配<code>container</code>，然后在合适的<code>NodeManager</code>上启动 <code>Executor</code>进程</li><li><code>Executor</code>进程启动后会向<code>Driver</code>反向注册，<code>Executor</code>全部注册完成后Driver开始执行<code>main</code>函数</li><li>之后执行到<code>Action</code>算子时，触发一个<code>Job</code>，并根据宽依赖开始划分<code>stage</code>，每个<code>stage</code>生成对应的<code>TaskSet</code>，之后将<code>task</code>分发到各个<code>Executor</code>上执行</li></ul><h2 id="第五章-Saprk核心编程"><a href="#第五章-Saprk核心编程" class="headerlink" title="第五章 Saprk核心编程"></a>第五章 Saprk核心编程</h2><p>Spark计算框架为了能够进行高并发和高吞吐的数据处理，封装了三大数据结构，用于处理不同的应用场景。三大数据结构分别是：</p><ul><li>==RDD==：弹性分布式数据集</li><li>==累加器==：分布式共享只写变量</li><li>==广播变量==：分布式共享只读变量</li></ul><h3 id="5-1-RDD"><a href="#5-1-RDD" class="headerlink" title="5.1 RDD"></a>5.1 RDD</h3><h4 id="5-1-1-什么是RDD"><a href="#5-1-1-什么是RDD" class="headerlink" title="5.1.1 什么是RDD"></a>5.1.1 什么是RDD</h4><blockquote><p>RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是 Spark 中最基本的数据处理模型。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的集合</p></blockquote><ul><li><p>弹性</p><ul><li>存储的弹性：内存与磁盘的自动切换</li><li>容错的弹性：数据丢失可以自动恢复</li><li>计算的弹性：计算出错重试机制</li><li>分片的弹性：可根据需要重新分片</li></ul></li><li><p>分布式：数据存储在大数据集群不同节点上</p></li><li><p>数据集：RDD 封装了计算逻辑，并不保存数据</p></li><li><p>数据抽象：RDD 是一个抽象类，需要子类具体实现</p></li><li><p>不可变：RDD 封装了计算逻辑，是不可以改变的，想要改变，只能产生新的 RDD，在新的 RDD 里面封装计算逻辑</p></li><li><p>可分区、并行计算</p></li></ul><h4 id="5-1-2-核心属性"><a href="#5-1-2-核心属性" class="headerlink" title="5.1.2 核心属性"></a>5.1.2 核心属性</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505215427584.png" alt="核心属性"></p><ul><li>分区列表<ul><li>RDD数据结构中存在分区列表，用于执行任务时并行计算，是实现分布式计算的重要属性</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505215523996.png" alt="分区列表"></p><ul><li>分区计算函数<ul><li>Spark在计算时，是使用分区函数对每一个分区进行计算</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505215616152.png" alt="分区计算函数"></p><ul><li>RDD之间的依赖关系<ul><li>RDD是计算模型的封装，当需求中需要将多个计算模型进行组合时，就需要将多个RDD建立依赖关系</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505215655411.png" alt="依赖关系"></p><ul><li>分区器（可选）<ul><li>当数据为KV类型数据时，可以通过设定分区器自定义数据的分区</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505215728608.png" alt="分区器"></p><ul><li> 首选位置（可选）</li><li>计算数据时，可以根据计算节点的状态选择不同的节点位置进行计算</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210505215811647.png" alt="首选位置"></p><h4 id="5-1-3-执行原理"><a href="#5-1-3-执行原理" class="headerlink" title="5.1.3 执行原理"></a>5.1.3 执行原理</h4><blockquote><p>RDD在整个流程中主要用于将逻辑进行封装，并生成Task发送给Executor节点执行计算</p></blockquote><h3 id="5-2-基础编程"><a href="#5-2-基础编程" class="headerlink" title="5.2 基础编程"></a>5.2 基础编程</h3><h4 id="5-2-1-RDD创建"><a href="#5-2-1-RDD创建" class="headerlink" title="5.2.1 RDD创建"></a>5.2.1 RDD创建</h4><blockquote><p>在Spark中创建RDD的创建方式可以分为四种</p></blockquote><p>1）从集合(内存)中创建RDD</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>builder<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">object</span> Spark01_RDD_Memory <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO 主备环境</span>    <span class="token comment" spellcheck="true">// * 表示当前线程可用的最大核数</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"RDD"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO　创建RDD</span>    <span class="token comment" spellcheck="true">// 从内存中创建RDD，将文件中的数据作为处理的数据源</span>    <span class="token keyword">val</span> seq <span class="token operator">=</span> Seq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// parallelize：并行</span>    <span class="token comment" spellcheck="true">//val rdd: RDD[Int] = sc.parallelize(sep)</span>    <span class="token comment" spellcheck="true">// makeRDD方法在底层实现时其实就是调用了rdd对象的parallelize方法</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    println(rdd)</span>    <span class="token comment" spellcheck="true">// TODO 关闭环境</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2）从外部存储(文件)创建RDD</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>builder<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">object</span> Spark02_RDD_File <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO 主备环境</span>    <span class="token comment" spellcheck="true">// * 表示当前线程可用的最大核数</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"RDD"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO　创建RDD</span>    <span class="token comment" spellcheck="true">/*     从文件中创建RDD，将内存中集合的数据作为处理的数据源     path路径默认以当前环境的根路径为基准，可以写绝对路径或相对路径     path路径可以时文件的具体路径，也可以是目录名称     path路径还可以使用通配符 *     path还可以是分布式存储系统路径：HDFS  sc.textFile("hdfs://node:9000/data")     */</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"datas"</span><span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 关闭环境</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3）从其他RDD创建</p><blockquote><p>主要是通过一个RDD运算完后，再产生新的RDD</p></blockquote><p>4）直接创建RDD（new）</p><blockquote><p>使用new的方式直接构造RDD，一般由Spark框架自身使用</p></blockquote><h4 id="5-2-2-RDD转换算子"><a href="#5-2-2-RDD转换算子" class="headerlink" title="5.2.2 RDD转换算子"></a>5.2.2 RDD转换算子</h4><blockquote><p>RDD 根据数据处理方式的不同将算子整体上分为 Value 类型、双 Value 类型和 Key-Value类型</p></blockquote><p><strong>value 类型</strong></p><h5 id="1-map"><a href="#1-map" class="headerlink" title="1.map"></a>1.map</h5><blockquote><p>将处理的数据逐条进行映射转换，这里的转换可以是类型的转换，也可以是值的转换</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">object</span> Spark01_RDD_Operator_map_Transform <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - map</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1,2,3,4 => 2,4,6,8</span><span class="token comment" spellcheck="true">//    def mapFunction(num: Int): Int = {</span><span class="token comment" spellcheck="true">//      num * 2</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    val mapRdd = rdd.map(mapFunction)</span><span class="token comment" spellcheck="true">//    val mapRdd = rdd.map((num: Int)=>{num*2})</span><span class="token comment" spellcheck="true">//    val mapRdd = rdd.map((num: Int)=>num*2)</span><span class="token comment" spellcheck="true">//    val mapRdd = rdd.map(num=>num*2)</span>    <span class="token keyword">val</span> mapRdd <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    mapRdd<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>        sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*从服务器日志数据 apache.log 中获取用户请求 URL 资源路径 */</span><span class="token keyword">object</span> Spark01_RDD_Operator_map_Transform_Test <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - map</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"datas/apache.log"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 长的字符串转为短的字符串</span><span class="token comment" spellcheck="true">//    val mapRDD = rdd.map(</span><span class="token comment" spellcheck="true">//      line => {</span><span class="token comment" spellcheck="true">//        val datas = line.split(" ")</span><span class="token comment" spellcheck="true">//        datas(6)</span><span class="token comment" spellcheck="true">//      }</span><span class="token comment" spellcheck="true">//    )</span><span class="token comment" spellcheck="true">//    val mapRDD = rdd.map(line=>line.split(" ")(6))</span>    <span class="token keyword">val</span> mapRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mapRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-mapPartitions"><a href="#2-mapPartitions" class="headerlink" title="2.mapPartitions"></a>2.mapPartitions</h5><blockquote><p>将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据。</p></blockquote><ul><li>map 和 mapPartitions 的区别？<ul><li>Map 算子是分区内一个数据一个数据的执行，类似于串行操作。而 mapPartitions 算子是以分区为单位进行批处理操作。</li><li>Map 算子主要目的将数据源中的数据进行转换和改变。但是不会减少或增多数据。MapPartitions 算子需要传递一个迭代器，返回一个迭代器，没有要求的元素的个数保持不变，所以可以增加或减少数据</li><li>Map 算子因为类似于串行操作，所以性能比较低，而是 mapPartitions 算子类似于批处理，所以性能较高。但是 mapPartitions 算子会长时间占用内存，那么这样会导致内存可能不够用，出现内存溢出的错误。所以在内存有限的情况下，不推荐使用。使用 map 操作。</li></ul></li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  取出每个分区的最大值 */</span><span class="token keyword">object</span> Spark02_RDD_Operator_mapPartitions_Transform_Test <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - mapPartitions</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    val mapRDD = rdd.mapPartitions(</span><span class="token comment" spellcheck="true">//      iter => {</span><span class="token comment" spellcheck="true">//        List(iter.max).iterator</span><span class="token comment" spellcheck="true">//      }</span><span class="token comment" spellcheck="true">//    )</span>    <span class="token keyword">val</span> mapRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>mapPartitions<span class="token punctuation">(</span>iter<span class="token keyword">=></span>List<span class="token punctuation">(</span>iter<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">.</span>iterator<span class="token punctuation">)</span>    mapRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-mapPertitionsWithIndex"><a href="#3-mapPertitionsWithIndex" class="headerlink" title="3.mapPertitionsWithIndex"></a>3.mapPertitionsWithIndex</h5><blockquote><p>将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据，在处理时同时可以获取当前分区索引。</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  取出指定分区的数据 */</span><span class="token keyword">object</span> Spark03_RDD_Operator_mapPartitionsWithIndex_Transform <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - mapPartitionsWithIndex</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> mpiRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>mapPartitionsWithIndex<span class="token punctuation">(</span>      <span class="token punctuation">(</span>index<span class="token punctuation">,</span> iter<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          iter        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          Nil<span class="token punctuation">.</span>iterator        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    mpiRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  取出的数据以及对应的分区号 */</span><span class="token keyword">object</span> Spark03_RDD_Operator_mapPartitionsWithIndex_Transform1 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - mapPartitionsWithIndex</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> mpiRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>mapPartitionsWithIndex<span class="token punctuation">(</span>      <span class="token punctuation">(</span>index<span class="token punctuation">,</span> iter<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">{</span>        iter<span class="token punctuation">.</span>map<span class="token punctuation">(</span>          num <span class="token keyword">=></span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span>num<span class="token punctuation">,</span> index<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    mpiRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="4-flatMap"><a href="#4-flatMap" class="headerlink" title="4.flatMap"></a>4.flatMap</h5><blockquote><p>将处理的数据进行扁平化后再进行映射处理，所以算子也称之为扁平映射</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  取出指定分区的数据 */</span><span class="token keyword">object</span> Spark04_RDD_Operator_flatMap_Transform <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - flatMap</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>      List<span class="token punctuation">(</span>        List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    val flatRDD = rdd.flatMap(</span><span class="token comment" spellcheck="true">//      list => {</span><span class="token comment" spellcheck="true">//        list</span><span class="token comment" spellcheck="true">//      }</span><span class="token comment" spellcheck="true">//    )</span>    <span class="token keyword">val</span> flatRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>list<span class="token keyword">=></span>list<span class="token punctuation">)</span>    flatRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  模式匹配 */</span><span class="token keyword">object</span> Spark04_RDD_Operator_flatMap_Transform2 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - flatMap</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>List<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> flatRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>flatMap <span class="token punctuation">{</span>      <span class="token keyword">case</span> list<span class="token operator">:</span> List<span class="token punctuation">[</span>_<span class="token punctuation">]</span> <span class="token keyword">=></span> list      <span class="token keyword">case</span> dat <span class="token keyword">=></span> List<span class="token punctuation">(</span>dat<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    flatRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="5-glom"><a href="#5-glom" class="headerlink" title="5.glom"></a>5.glom</h5><blockquote><p>将同一个分区的数据直接转换为相同类型的内存数组进行处理，分区不变</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  glom  小功能：计算所有分区最大值求和（分区内取最大值，分区间最大值求和） */</span><span class="token keyword">object</span> Spark05_RDD_Operator_glom_Transform_Test <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - glom</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// List => Int</span>    <span class="token comment" spellcheck="true">// Int => Array</span>    <span class="token keyword">val</span> glomRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span>Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> rdd<span class="token punctuation">.</span>glom<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> maxRDD <span class="token operator">=</span> glomRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>max<span class="token punctuation">)</span>    maxRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 分区最大值</span>    println<span class="token punctuation">(</span>maxRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 分区最大值求和</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="6-groupBy"><a href="#6-groupBy" class="headerlink" title="6.groupBy"></a>6.groupBy</h5><blockquote><p>将数据根据指定的规则进行分组, 分区默认不变，但是数据会被打乱重新组合，我们将这样的操作称之为 shuffle。极限情况下，数据可能被分在同一个分区中</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  groupBy分组，按奇偶数划分 */</span><span class="token keyword">object</span> Spark06_RDD_Operator_groupBy_Transform <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - groupBy</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>saveAsTextFile<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> groupFunction<span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      num <span class="token operator">%</span> <span class="token number">2</span>    <span class="token punctuation">}</span>    <span class="token keyword">val</span> groupRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>groupFunction<span class="token punctuation">)</span>    <span class="token keyword">val</span> groupedRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>_<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>    groupedRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  groupBy分组，按字母开头划分 */</span><span class="token keyword">object</span> Spark06_RDD_Operator_groupBy_Transform1 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - groupBy</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Spark"</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">,</span> <span class="token string">"Hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 分组和分区没有必然的关系</span>    <span class="token keyword">val</span> groupRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>charAt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    groupRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token comment" spellcheck="true">/*  groupBy分组，按时间统计数量 */</span><span class="token keyword">object</span> Spark06_RDD_Operator_groupBy_Transform_Test <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 转换算子 - groupBy</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"datas/apache.log"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> timeRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span>      line <span class="token keyword">=></span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> datas <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> time <span class="token operator">=</span> datas<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> SimpleDateFormat<span class="token punctuation">(</span><span class="token string">"dd/MM/yyyy:HH:mm:ss"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>time<span class="token punctuation">)</span>        <span class="token keyword">val</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> SimpleDateFormat<span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> day <span class="token operator">=</span> sdf1<span class="token punctuation">.</span>format<span class="token punctuation">(</span>date<span class="token punctuation">)</span>        <span class="token punctuation">(</span>day<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>    timeRDD<span class="token punctuation">.</span>map<span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>day<span class="token punctuation">,</span> iter<span class="token punctuation">)</span> <span class="token keyword">=></span>        <span class="token punctuation">(</span>day<span class="token punctuation">,</span> iter<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span>collect<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    val timeRDD = rdd.map(_.split(" ")(3))</span><span class="token comment" spellcheck="true">//    val day = timeRDD.map(_.split("/")(0)).map((_,1)).reduceByKey(_+_)</span><span class="token comment" spellcheck="true">//    day.collect().foreach(println)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="7-filter"><a href="#7-filter" class="headerlink" title="7.filter"></a>7.filter</h5><blockquote><p>将数据根据指定的规则进行筛选过滤，符合规则的数据保留，不符合规则的数据丢弃。当数据进行筛选过滤后，分区不变，但是分区内的数据可能不均衡，生产环境下，可能会出现数据倾斜。</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  filter 从服务器日志数据 apache.log 中获取 2015 年 5 月 17 日的请求路径 */</span><span class="token keyword">object</span> Spark07_RDD_Operator_filter_Transform_Test <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 算子 - filter</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"datas/apache.log"</span><span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>      line <span class="token keyword">=></span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> data <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> time <span class="token operator">=</span> data<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>startsWith<span class="token punctuation">(</span><span class="token string">"17/05/2015"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="8-sample"><a href="#8-sample" class="headerlink" title="8.sample"></a>8.sample</h5><blockquote><p>根据指定的规则从数据集中抽取数据</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> dataRDD <span class="token operator">=</span> sparkContext<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 抽取数据不放回（伯努利算法）</span><span class="token comment" spellcheck="true">// 伯努利算法：又叫 0、1 分布。例如扔硬币，要么正面，要么反面。</span><span class="token comment" spellcheck="true">// 具体实现：根据种子和随机算法算出一个数和第二个参数设置几率比较，小于第二个参数要，大于不</span>要<span class="token comment" spellcheck="true">// 第一个参数：抽取的数据是否放回，false：不放回</span><span class="token comment" spellcheck="true">// 第二个参数：抽取的几率，范围在[0,1]之间,0：全不取；1：全取；</span><span class="token comment" spellcheck="true">// 第三个参数：随机数种子</span><span class="token keyword">val</span> dataRDD1 <span class="token operator">=</span> dataRDD<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 抽取数据放回（泊松算法）</span><span class="token comment" spellcheck="true">// 第一个参数：抽取的数据是否放回，true：放回；false：不放回</span><span class="token comment" spellcheck="true">// 第二个参数：重复数据的几率，范围大于等于 0.表示每一个元素被期望抽取到的次数</span><span class="token comment" spellcheck="true">// 第三个参数：随机数种子</span><span class="token keyword">val</span> dataRDD2 <span class="token operator">=</span> dataRDD<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  sample */</span><span class="token keyword">object</span> Spark08_RDD_Operator_sample_Transform <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 算子 - sample</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*      sample算子需要传递三个参数      1.第一个参数表示，抽取数据后是否将数据返回 true（放回），false（丢弃）      2.第二个参数表示，数据源中每条数据被抽取的概率      基准值      3.第三个参数表示，抽取数据时随机算法的种子      如果不传递第三个参数，那么使用的就是当前系统时间     */</span><span class="token comment" spellcheck="true">//    println(rdd.sample(</span><span class="token comment" spellcheck="true">//      false,</span><span class="token comment" spellcheck="true">//      0.5,</span><span class="token comment" spellcheck="true">//      1</span><span class="token comment" spellcheck="true">//    ).collect().mkString(","))</span>    println<span class="token punctuation">(</span>rdd<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>      <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token number">0.5</span><span class="token punctuation">,</span>      <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="9-distinct"><a href="#9-distinct" class="headerlink" title="9.distinct"></a>9.distinct</h5><blockquote><p>将数据集中重复的数据去重</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  distinct 去重 */</span><span class="token keyword">object</span> Spark09_RDD_Operator_distinct_Transform <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 算子 - distinct</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> rdd1 <span class="token operator">=</span> rdd<span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span>    rdd1<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="10-coalesce"><a href="#10-coalesce" class="headerlink" title="10.coalesce"></a>10.coalesce</h5><blockquote><p>根据数据量缩减分区，用于大数据集过滤后，提高小数据集的执行效率。当 spark 程序中，存在过多的小任务的时候，可以通过 coalesce 方法，收缩合并分区，减少分区的个数，减小任务调度成本</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  coalesce 重新定义分区数，一般用来缩减分区 */</span><span class="token keyword">object</span> Spark10_RDD_Operator_coalesce_Transform <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 算子 - coalesce</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// coalesce 默认情况下不会将分区的数据打乱重新组合</span>    <span class="token comment" spellcheck="true">// 这种情况下的缩减分区可能会导致数据不均衡，出现数据倾斜</span>    <span class="token comment" spellcheck="true">// 如果想要让数据均衡，可以进行shuffle处理</span>    <span class="token comment" spellcheck="true">// coalesce 算子可以扩大分区，但必须进行shuffle操作，否则不起作用</span><span class="token comment" spellcheck="true">//    val rdd1 = rdd.coalesce(2)</span>    <span class="token keyword">val</span> rdd1 <span class="token operator">=</span> rdd<span class="token punctuation">.</span>coalesce<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    rdd1<span class="token punctuation">.</span>saveAsTextFile<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="11-repartition"><a href="#11-repartition" class="headerlink" title="11.repartition"></a>11.repartition</h5><blockquote><p>该操作内部其实执行的是 coalesce 操作，参数 shuffle 的默认值为 true。无论是将分区数多的RDD 转换为分区数少的 RDD，还是将分区数少的 RDD 转换为分区数多的 RDD，repartition操作都可以完成，因为无论如何都会经 shuffle 过程。</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  repartition 重新定义分区数，实际底层调用 coalesce */</span><span class="token keyword">object</span> Spark11_RDD_Operator_repartition_Transform <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 算子 - repartition</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> rdd1 <span class="token operator">=</span> rdd<span class="token punctuation">.</span>repartition<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    rdd1<span class="token punctuation">.</span>saveAsTextFile<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="12-sortBy"><a href="#12-sortBy" class="headerlink" title="12.sortBy"></a>12.sortBy</h5><blockquote><p>该操作用于排序数据。在排序之前，可以将数据通过 f 函数进行处理，之后按照 f 函数处理的结果进行排序，默认为升序排列。排序后新产生的 RDD 的分区数与原 RDD 的分区数一致。中间存在 shuffle 的过程</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>operator<span class="token punctuation">.</span>transform<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  sortBy */</span><span class="token keyword">object</span> Spark12_RDD_Operator_sortBy_Transform1 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Operator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TODO 算子 - sortBy</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// sortBy方法可以根据指定的规则对数据源中的数据进行排序，默认为升序，第二个参数可以改变排序的方式</span>    <span class="token keyword">val</span> newRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>x<span class="token keyword">=></span>x<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    newRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot; language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;# 第一种方式
bin/spark-submit --master spark://node:7077 --class cn.hnkjxy.WordCount_On</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.shiyiri.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Spark" scheme="https://www.shiyiri.top/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习</title>
    <link href="https://www.shiyiri.top/node/8.html"/>
    <id>https://www.shiyiri.top/node/8.html</id>
    <published>2021-05-04T10:03:08.535Z</published>
    <updated>2021-05-04T10:01:59.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scala学习笔记"><a href="#Scala学习笔记" class="headerlink" title="Scala学习笔记"></a>Scala学习笔记</h1><h2 id="第一章-Scala的概述"><a href="#第一章-Scala的概述" class="headerlink" title="第一章  Scala的概述"></a>第一章  Scala的概述</h2><ul><li><p>Scala 是一门多范式（multi-paradigm）的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。</p></li><li><p>Scala 运行在 Java 虚拟机上，并兼容现有的 Java 程序。</p></li><li><p>Scala 源代码被编译成 Java 字节码，所以它可以运行于 JVM 之上，并可以调用现有的 Java 类库。</p></li></ul><h3 id="1-1-Scala-和-Java-以及-JVM的关系分析图"><a href="#1-1-Scala-和-Java-以及-JVM的关系分析图" class="headerlink" title="1.1 Scala 和 Java 以及 JVM的关系分析图"></a>1.1 Scala 和 Java 以及 JVM的关系分析图</h3><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/PIcb6EWZSiMXgCy.png" alt="关系图"></p><h3 id="1-2-Scala语言的特点"><a href="#1-2-Scala语言的特点" class="headerlink" title="1.2 Scala语言的特点"></a>1.2 Scala语言的特点</h3><h4 id="1-2-1-面向对象特性"><a href="#1-2-1-面向对象特性" class="headerlink" title="1.2.1 面向对象特性"></a>1.2.1 面向对象特性</h4><p>Scala是一种纯面向对象的语言，每个值都是对象。对象的数据类型以及行为由类和特质描述。</p><p>类抽象机制的扩展有两种途径：一种途径是子类继承，另一种途径是灵活的混入机制。这两种途径能避免多重继承的种种问题。</p><h4 id="1-2-2-函数式编程"><a href="#1-2-2-函数式编程" class="headerlink" title="1.2.2 函数式编程"></a>1.2.2 函数式编程</h4><p>Scala也是一种函数式语言，其函数也能当成值来使用。Scala提供了轻量级的语法用以定义匿名函数，支持高阶函数，允许嵌套多层函数，并支持柯里化。Scala的case class及其内置的模式匹配相当于函数式编程语言中常用的代数类型。</p><p>更进一步，程序员可以利用Scala的模式匹配，编写类似正则表达式的代码处理XML数据。</p><h4 id="1-2-3-静态类型"><a href="#1-2-3-静态类型" class="headerlink" title="1.2.3 静态类型"></a>1.2.3 静态类型</h4><p>Scala具备类型系统，通过编译时检查，保证代码的安全性和一致性。类型系统具体支持以下特性：</p><ul><li>泛型类</li><li>协变和逆变</li><li>标注</li><li>类型参数的上下限约束</li><li>把类别和抽象类型作为对象成员</li><li>复合类型</li><li>引用自己时显式指定类型</li><li>视图</li><li>多态方法</li></ul><h4 id="1-2-4-扩展性"><a href="#1-2-4-扩展性" class="headerlink" title="1.2.4 扩展性"></a>1.2.4 扩展性</h4><p>Scala的设计秉承一项事实，即在实践中，某个领域特定的应用程序开发往往需要特定于该领域的语言扩展。Scala提供了许多独特的语言机制，可以以库的形式轻易无缝添加新的语言结构：</p><ul><li>任何方法可用作前缀或后缀操作符</li><li>可以根据预期类型自动构造闭包。</li></ul><h4 id="1-2-5-并发性"><a href="#1-2-5-并发性" class="headerlink" title="1.2.5 并发性"></a>1.2.5 并发性</h4><p>Scala使用Actor作为其并发模型，Actor是类似线程的实体，通过邮箱发收消息。Actor可以复用线程，因此可以在程序中可以使用数百万个Actor,而线程只能创建数千个。在2.10之后的版本中，使用Akka作为其默认Actor实现。</p><h3 id="1-3-Scala程序开发注意事项"><a href="#1-3-Scala程序开发注意事项" class="headerlink" title="1.3 Scala程序开发注意事项"></a>1.3 Scala程序开发注意事项</h3><ol><li>Scala源文件以 .scala 为扩展名</li><li>Scala程序的执行入口是 main() 函数</li><li>Scala语言严格区分大小写</li><li>Scala方法由一条条语句构成,每个语句后不需要分号</li><li>如果在同一行有多条语句,除了最后一条语句不需要分号,其他语句需要分号</li></ol><h3 id="1-4-Scala语言转义字符"><a href="#1-4-Scala语言转义字符" class="headerlink" title="1.4 Scala语言转义字符"></a>1.4 Scala语言转义字符</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>\t</td><td>制表符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\</td><td>一个 \</td></tr><tr><td>"</td><td>一个 “</td></tr><tr><td>\r</td><td>一个回车</td></tr></tbody></table><h3 id="1-5-Scala三种输出方式"><a href="#1-5-Scala三种输出方式" class="headerlink" title="1.5 Scala三种输出方式"></a>1.5 Scala三种输出方式</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter01<span class="token keyword">object</span> printDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> str1<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">val</span> str2 <span class="token operator">=</span> <span class="token string">" world!"</span>    println<span class="token punctuation">(</span>str1 <span class="token operator">+</span> str2<span class="token punctuation">)</span>    <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"Tom"</span>    <span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">val</span> sal<span class="token operator">:</span> <span class="token builtin">Float</span> <span class="token operator">=</span> <span class="token number">10.56f</span>    <span class="token keyword">val</span> height<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">180.15</span>    <span class="token comment" spellcheck="true">// 格式化输出</span>    printf<span class="token punctuation">(</span><span class="token string">"名字是=%s 年龄是%d 薪水是%.2f 身高是%.3f"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// scala支持使用$输出内容，编译器回去解析$对应的变量</span>    println<span class="token punctuation">(</span>s<span class="token string">"\n个人信息如下：\n名字$name \n年龄$age \n薪水$sal"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 如果在字符串中出现类似${age + 10}则表示{}是一个表达式</span>    println<span class="token punctuation">(</span>s<span class="token string">"\n个人信息如下2：\n名字${name} \n年龄${age+10} \n薪水${sal*10}"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第二章-变量"><a href="#第二章-变量" class="headerlink" title="第二章 变量"></a>第二章 变量</h2><h3 id="2-1-变量的介绍"><a href="#2-1-变量的介绍" class="headerlink" title="2.1 变量的介绍"></a>2.1 变量的介绍</h3><h4 id="2-1-1-概念"><a href="#2-1-1-概念" class="headerlink" title="2.1.1 概念"></a>2.1.1 概念</h4><blockquote><p>变量相当于内存中一个数据存储空间的表示,可以把变量看作是一个房间门牌号,通过门派号我们可以找到房间,而通过变量名可以访问到变量值</p></blockquote><h4 id="2-1-2-变量使用的基本步骤"><a href="#2-1-2-变量使用的基本步骤" class="headerlink" title="2.1.2 变量使用的基本步骤"></a>2.1.2 变量使用的基本步骤</h4><ol><li>声明/定义变量(Scala 要求变量声明时初始化)</li><li>使用</li></ol><h3 id="2-2-Scala变量的基本使用"><a href="#2-2-Scala变量的基本使用" class="headerlink" title="2.2 Scala变量的基本使用"></a>2.2 Scala变量的基本使用</h3><h4 id="2-2-1-快速入门"><a href="#2-2-1-快速入门" class="headerlink" title="2.2.1 快速入门"></a>2.2.1 快速入门</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> VarDemo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> sal<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">10.9</span>    <span class="token keyword">var</span> isPass<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 在Scala中，小数默认为Double，整数默认为Int</span>    <span class="token keyword">var</span> score<span class="token operator">:</span> <span class="token builtin">Float</span> <span class="token operator">=</span> <span class="token number">70.9f</span>    println<span class="token punctuation">(</span>age<span class="token punctuation">,</span> sal<span class="token punctuation">)</span>    print<span class="token punctuation">(</span>s<span class="token string">"$age, $sal"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><h3 id="2-3-Scala变量使用说明"><a href="#2-3-Scala变量使用说明" class="headerlink" title="2.3 Scala变量使用说明"></a>2.3 Scala变量使用说明</h3><h4 id="2-3-1-变量声明基本语法"><a href="#2-3-1-变量声明基本语法" class="headerlink" title="2.3.1 变量声明基本语法"></a>2.3.1 变量声明基本语法</h4><blockquote><p>val | var 变量名 [: 变量类型] = 变量值</p></blockquote><h4 id="2-3-2-注意事项"><a href="#2-3-2-注意事项" class="headerlink" title="2.3.2 注意事项"></a>2.3.2 注意事项</h4><ol><li>声明变量时,类型可以省略(编译器自动推导,即类型推导)</li><li>类型确定后,就不能修改,说明Scala是强语言类型语言</li><li>在声明/定义一个变量时，可以使用 var 或者 val 来修饰，var 修饰的变量可以改变，val 修饰的变量不可以改</li><li>val修饰的变量在编译后,等同于加上final</li><li>声明变量时,需要初始值</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter01<span class="token punctuation">.</span>vars<span class="token keyword">object</span> VarDemo02 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 类型推导</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true">// 方式一：可以利用idea的提示来证明</span>    <span class="token comment" spellcheck="true">// 方式二：使用isInstanceOf[Int]判断</span>    println<span class="token punctuation">(</span>num<span class="token punctuation">.</span>isInstanceOf<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 类型确定后，就不能修改，说明Scala是强类型语言</span>    <span class="token comment" spellcheck="true">// num = 2.3</span>    <span class="token comment" spellcheck="true">// 在声明/定义一个变量时，可以使用 var 或者 val 来修饰，</span>    <span class="token comment" spellcheck="true">// var 修饰的变量可以改变，val 修饰的变量不可以改</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span>    age <span class="token operator">=</span> <span class="token number">30</span>    <span class="token comment" spellcheck="true">// val 修饰的变量在编译后，等同于加上了 final</span>    <span class="token keyword">val</span> num2 <span class="token operator">=</span> <span class="token number">30</span>    <span class="token comment" spellcheck="true">// num2 = 23 //val 修饰的变量不可以改</span>    println<span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*      Scala设计者为什么设计 var 和 val？      1.在实际编程中，我们更多的需求是获取/创建一个对象后，读取该对象的属性，      或者是修改对象的属性值，很少去改变这个对象本身，这时，我们就可以使用 val。      2.val 没有线程安全问题，因此效率高，Scala的设计者推荐使用 val。      3.如果对象需要改变，则使用 var     */</span>    <span class="token keyword">val</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> Dog    <span class="token comment" spellcheck="true">// dog = new Dog // Reassignment to val</span>    dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">90</span>    dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小黑"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Dog <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明一个age</span>  <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 声明名字</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-数据类型"><a href="#2-4-数据类型" class="headerlink" title="2.4 数据类型"></a>2.4 数据类型</h3><ul><li>Scala与Java有着相同的数据类型，在Scala中数据类型都是对象，Scala没有Java中的原生类型</li><li>Scala数据类型分为两大类 AnyVal（值类型）和AnyRef（引用类型）</li></ul><h4 id="2-4-1-Scala数据类型体系一览图"><a href="#2-4-1-Scala数据类型体系一览图" class="headerlink" title="2.4.1 Scala数据类型体系一览图"></a>2.4.1 Scala数据类型体系一览图</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210417155646602.png" alt="体系图"></p><ul><li>在Scala中有一个根类型Any，它是所有类的父类</li><li>Scala中一切皆对象，分为两大类 AnyVal（值类型）和AnyRef（引用类型），都是Any子类</li><li>Null类型是Scala的特别类型，它只有一个值 null，它是 bottom class，是所有 AnyRef 类型的子类</li><li>Nothing 类型也是bottom class，它是所有类的子类，在开发中通常可以将 Nothing 类型的值返回给任意变量或者函数，这里抛出异常使用很多</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210417160333556.png" alt="image-20210417160333556"></p><ul><li>在Scala中仍然遵守低精度的值像高精度的值自动转换（implicit conversion 隐式转换）</li></ul><h4 id="2-4-2-Scala数据类型列表"><a href="#2-4-2-Scala数据类型列表" class="headerlink" title="2.4.2 Scala数据类型列表"></a>2.4.2 Scala数据类型列表</h4><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>Byte</td><td>8位有符号补码整数。数值区间为 -128~127</td></tr><tr><td>Short</td><td>16位有符号补码整数。数值区间为 -32768~32767</td></tr><tr><td>Int</td><td>32位有符号补码整数。数值区间为 -2147483648 到 2147483647</td></tr><tr><td>Long</td><td>64位有符号补码整数。数值区间为 -9223372036854775808 到 9223372036854775807</td></tr><tr><td>Float</td><td>32 位, IEEE 754标准的单精度浮点数</td></tr><tr><td>Double</td><td>64 位 IEEE 754标准的双精度浮点数</td></tr><tr><td>Char</td><td>16位无符号Unicode字符, 区间值为 U+0000 到 U+FFFF</td></tr><tr><td>String</td><td>字符序列</td></tr><tr><td>Boolean</td><td>true或false</td></tr><tr><td>Unit</td><td>表示无值，和其他语言中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()</td></tr><tr><td>Null</td><td>null</td></tr><tr><td>Nothing</td><td>Nothing类型在Scala的类层级的最低端；它是任何其他类型的子类型</td></tr><tr><td>Any</td><td>Any是所有其他类的超类</td></tr><tr><td>AnyRef</td><td>AnyRef类是Scala里所有引用类(reference class)的基类</td></tr></tbody></table><h3 id="2-5-Unit类型、Null类型和Nothing类型"><a href="#2-5-Unit类型、Null类型和Nothing类型" class="headerlink" title="2.5 Unit类型、Null类型和Nothing类型"></a>2.5 Unit类型、Null类型和Nothing类型</h3><h4 id="2-5-1-使用细节"><a href="#2-5-1-使用细节" class="headerlink" title="2.5.1 使用细节"></a>2.5.1 使用细节</h4><ol><li>Null类只有一个实例对象，null，类似与Java中null引用。null可以赋值给任意引用类型(AnyRef)，但是不能赋值给值类型(AnyVal: 比如 Int,Float, Char, Boolean, Long, Double, Byte, Short)</li><li>Unit等价于Java的void，只有一个实例值()</li><li>Nothing可以作为没有正常返回值的方法的返回类型，非常直观的告诉你这个方法不会正常返回，而且由于Nothing是其他任意类型的子类，它还能跟要求返回值的方法兼容</li></ol><h3 id="2-6-标识符的命名规范"><a href="#2-6-标识符的命名规范" class="headerlink" title="2.6 标识符的命名规范"></a>2.6 标识符的命名规范</h3><h4 id="2-6-1-标识符概念"><a href="#2-6-1-标识符概念" class="headerlink" title="2.6.1 标识符概念"></a>2.6.1 标识符概念</h4><ul><li>Scala对各种变量、方法、函数等命名时使用的字符序列称为标识符</li><li>凡是自己可以命名的地方都叫标识符</li></ul><h4 id="2-6-2-标识符的命名规则"><a href="#2-6-2-标识符的命名规则" class="headerlink" title="2.6.2 标识符的命名规则"></a>2.6.2 标识符的命名规则</h4><ul><li>首字符为字母，后续字符任意字母和数字，美元符号，可后接下划线</li><li>数字不可以开头</li><li>首字符为操作符（比如 + - * ）后续字符也需跟操作符，至少一个</li><li>操作符（比如 + - * /）不能在标识符中间和最后</li><li>用反引号``包括任意字符串，即使是关键字(39个)也可以</li></ul><h4 id="2-6-3-标识符的命名规范"><a href="#2-6-3-标识符的命名规范" class="headerlink" title="2.6.3 标识符的命名规范"></a>2.6.3 标识符的命名规范</h4><ul><li>包名：尽量采取有意义的包名，简短，有意义</li><li>变量名、函数名、方法名采用驼峰法。</li></ul><h3 id="2-7-Scala的关键字"><a href="#2-7-Scala的关键字" class="headerlink" title="2.7 Scala的关键字"></a>2.7 Scala的关键字</h3><blockquote><p>package    import    class    object    trait    extends    with    type</p><p>forSome    private    protected    abstract    sealed    final    implicit</p><p>override    try    catch    finally    throw    if    else    match    case    do</p><p>while    for    return    yield    def    val    var    this    super    new</p><p>true    false    null</p></blockquote><h2 id="第三章-运算符"><a href="#第三章-运算符" class="headerlink" title="第三章 运算符"></a>第三章 运算符</h2><h3 id="3-1-运算符"><a href="#3-1-运算符" class="headerlink" title="3.1 运算符"></a>3.1 运算符</h3><h4 id="3-1-1-算术运算符"><a href="#3-1-1-算术运算符" class="headerlink" title="3.1.1 算术运算符"></a>3.1.1 算术运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210420165214493.png" alt="算术运算符"></p><h4 id="3-1-2-关系运算符"><a href="#3-1-2-关系运算符" class="headerlink" title="3.1.2 关系运算符"></a>3.1.2 关系运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210420165321295.png" alt="关系运算符"></p><h4 id="3-1-3-逻辑运算符"><a href="#3-1-3-逻辑运算符" class="headerlink" title="3.1.3 逻辑运算符"></a>3.1.3 逻辑运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210420165427731.png" alt="逻辑运算符"></p><h4 id="3-1-4-赋值运算符"><a href="#3-1-4-赋值运算符" class="headerlink" title="3.1.4 赋值运算符"></a>3.1.4 赋值运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210420165510744.png" alt="赋值运算符"></p><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210420165544522.png" alt="赋值运算符"></p><h4 id="3-1-5-位运算符"><a href="#3-1-5-位运算符" class="headerlink" title="3.1.5 位运算符"></a>3.1.5 位运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210420165654402.png" alt="位运算符"></p><h3 id="3-2-键盘输入语句"><a href="#3-2-键盘输入语句" class="headerlink" title="3.2 键盘输入语句"></a>3.2 键盘输入语句</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter03<span class="token punctuation">.</span>inputcon<span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StdIn<span class="token keyword">object</span> Demo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    要求：可以从控制台接收用户信息，【姓名，年龄，薪水】     */</span>    println<span class="token punctuation">(</span><span class="token string">"请输入姓名"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> name <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readLine<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"请输入年龄"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> age <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"请输入工资"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> salary <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readDouble<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>s<span class="token string">"用户的信息位 name=$name age=$age salary=${salary.formatted("</span><span class="token operator">%</span><span class="token punctuation">.</span><span class="token number">2f</span><span class="token string">")}"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第四章-程序流程控制"><a href="#第四章-程序流程控制" class="headerlink" title="第四章 程序流程控制"></a>第四章 程序流程控制</h2><h3 id="4-1-分支控制-if-else"><a href="#4-1-分支控制-if-else" class="headerlink" title="4.1 分支控制 if-else"></a>4.1 分支控制 if-else</h3><h4 id="4-1-1-分支-if-else-介绍"><a href="#4-1-1-分支-if-else-介绍" class="headerlink" title="4.1.1 分支 if-else 介绍"></a>4.1.1 分支 if-else 介绍</h4><ul><li>分支控制有三种：<ul><li>单分支</li><li>双分支</li><li>多分支</li></ul></li></ul><h4 id="4-1-2-单分支案例"><a href="#4-1-2-单分支案例" class="headerlink" title="4.1.2 单分支案例"></a>4.1.2 单分支案例</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>ifesle<span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StdIn<span class="token keyword">object</span> Demo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> age <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"age >= 18"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-3-双分支案例"><a href="#4-1-3-双分支案例" class="headerlink" title="4.1.3 双分支案例"></a>4.1.3 双分支案例</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>ifesle<span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StdIn<span class="token keyword">object</span> Demo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> age <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"age >= 18"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"age &lt; 18"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-4-多分支案例"><a href="#4-1-4-多分支案例" class="headerlink" title="4.1.4 多分支案例"></a>4.1.4 多分支案例</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>ifesle<span class="token keyword">import</span> breeze<span class="token punctuation">.</span>numerics<span class="token punctuation">.</span>sqrt<span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StdIn<span class="token keyword">object</span> Demo02 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    成绩为100分时，奖励一辆BMW    成绩为(80, 99]时，奖励一台笔记本电脑    成绩为[60, 80]时，奖励一个 iPad    成绩从控制台输入     */</span>    print<span class="token punctuation">(</span><span class="token string">"请输入成绩："</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> score <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readDouble<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span>s<span class="token string">"成绩为${score}分，奖励一辆BMW"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span>s<span class="token string">"成绩为${score}分，奖励一台笔记本电脑"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span>s<span class="token string">"成绩为${score}分，奖励一个 iPad"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"再接再厉"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    求 ax^2 + bx + c = 0 方程的根，a，b，c分别为函数的参数，    如果：b^2 - 4ac > 0，则有两个解    b^2 - 4ac = 0，则有一个解    b^2 - 4ac &lt; 0，无解    a=3  b=100  c=6     */</span>    <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token number">6</span>    <span class="token keyword">var</span> x1 <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">var</span> x2 <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">val</span> res <span class="token operator">=</span> math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      x1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> sqrt<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a      println<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      x1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> sqrt<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a      x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> sqrt<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a      println<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>      println<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"无解"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-嵌套分支"><a href="#4-2-嵌套分支" class="headerlink" title="4.2 嵌套分支"></a>4.2 嵌套分支</h3><h4 id="4-2-1-基本介绍"><a href="#4-2-1-基本介绍" class="headerlink" title="4.2.1 基本介绍"></a>4.2.1 基本介绍</h4><blockquote><p>一个分支结构中有完整的嵌套了另一个完整的分支结构</p></blockquote><h4 id="4-2-2-应用案例"><a href="#4-2-2-应用案例" class="headerlink" title="4.2.2 应用案例"></a>4.2.2 应用案例</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>ifesle<span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StdIn<span class="token comment" spellcheck="true">/*嵌套分支：在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层        分支，外面的分支结构称为外层分支。嵌套分支不要超过三层。 */</span><span class="token keyword">object</span> Exercise02 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    参加百米运动会，如果用时八秒以内进入决赛，否则提示淘汰。并且根据性别提示进入男子组    或女子组，输入成绩和性别，进行判断     */</span>    print<span class="token punctuation">(</span><span class="token string">"请输入运动员的成绩："</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> speed <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readDouble<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>speed <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      print<span class="token punctuation">(</span><span class="token string">"请输入性别："</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> sex <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readChar<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span><span class="token string">"进入男子组"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span><span class="token string">"进入女子组"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"你被淘汰"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    出票系统：根据淡旺季的月份和年龄，打印票价    4-10旺季：成人（18-60）：60             儿童（&lt;18）：半价             老人（>60）：1/3        淡季：成人：40             其他：20     */</span>    print<span class="token punctuation">(</span><span class="token string">"请输入月份："</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> month <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> age <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> price <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;=</span> month <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">30</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">60</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">20</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">&lt;=</span> age <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">40</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">20</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    println<span class="token punctuation">(</span>s<span class="token string">"你的票价为${price}"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-for循环控制"><a href="#4-3-for循环控制" class="headerlink" title="4.3 for循环控制"></a>4.3 for循环控制</h3><h4 id="4-3-1-范围数据循环方式-to"><a href="#4-3-1-范围数据循环方式-to" class="headerlink" title="4.3.1 范围数据循环方式 to"></a>4.3.1 范围数据循环方式 to</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>for1<span class="token keyword">object</span> ForDemo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输入十句 Hello,World</span>    <span class="token keyword">val</span> start <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">val</span> end <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> start to end<span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"Hello,World"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// for这种推导式，可以直接对集合进行遍历</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">&lt;-</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-2-范围数据循环方式-until"><a href="#4-3-2-范围数据循环方式-until" class="headerlink" title="4.3.2 范围数据循环方式 until"></a>4.3.2 范围数据循环方式 until</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>for1<span class="token keyword">object</span> ForUntilDemo02 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输入十句 Hello,World</span>    <span class="token keyword">val</span> start <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">val</span> end <span class="token operator">=</span> <span class="token number">11</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> start until end<span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"Hello,World"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-3-循环守卫"><a href="#4-3-3-循环守卫" class="headerlink" title="4.3.3 循环守卫"></a>4.3.3 循环守卫</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>for1<span class="token comment" spellcheck="true">/*  循环守卫，即循环保护式。保护式为true则进入循环体  内部，否则跳过，类似continue */</span><span class="token keyword">object</span> ForGuard <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span> <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      print<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    println<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        print<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-4-引入变量"><a href="#4-3-4-引入变量" class="headerlink" title="4.3.4 引入变量"></a>4.3.4 引入变量</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>for1<span class="token keyword">object</span> ForVar <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">=</span><span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      print<span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    println<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 等价</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> j <span class="token operator">=</span><span class="token number">4</span> <span class="token operator">-</span> i      print<span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-5-嵌套循环"><a href="#4-3-5-嵌套循环" class="headerlink" title="4.3.5 嵌套循环"></a>4.3.5 嵌套循环</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>for1<span class="token comment" spellcheck="true">/*  for循环的嵌套 */</span><span class="token keyword">object</span> MultiFor <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" j = "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    println<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" j = "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-6-循环返回值"><a href="#4-3-6-循环返回值" class="headerlink" title="4.3.6 循环返回值"></a>4.3.6 循环返回值</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>for1<span class="token comment" spellcheck="true">/*  yield */</span><span class="token keyword">object</span> YieldFor <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*      对1 to 10 进行遍历      yield i 将每次循环得到 i 放入到集合vector中，并返回给res      i 这里可以是一个代码块，这就意味我们可以对 i 进行处理      下面这个处理方式，体现了Scala一个重要的语法特点，就是将一个集合中各个数据进行        处理，并返回给新的集合     */</span>    <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> i <span class="token operator">*</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true">//println(res) // Vector(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)</span>    <span class="token keyword">val</span> res2 <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token string">"不是偶数"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    println<span class="token punctuation">(</span>res2<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-while循环控制"><a href="#4-4-while循环控制" class="headerlink" title="4.4 while循环控制"></a>4.4 while循环控制</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>mywhile<span class="token comment" spellcheck="true">/*  while的基本使用 */</span><span class="token keyword">object</span> WhileDemo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输出十句Hello,World</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"Hello,World"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>      i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-5-do…while循环控制"><a href="#4-5-do…while循环控制" class="headerlink" title="4.5 do…while循环控制"></a>4.5 do…while循环控制</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>mydowhile<span class="token comment" spellcheck="true">/*  do...while */</span><span class="token keyword">object</span> Demo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"Hello,World"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>      i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-6-应用案例"><a href="#4-6-应用案例" class="headerlink" title="4.6 应用案例"></a>4.6 应用案例</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>mutifor<span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StdIn<span class="token keyword">object</span> Exercise <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*      1.统计三个班成绩情况，每个班有5名同学，求出各个班的平均分和所有班级的平均分【学生成绩从键盘输入】      分析思路      （1）classNum 表示班级个数，stuNum 表示学生个数      （2）classScore 表示各个班级总分 totalScore 表示所有班级总分      （3）score 表示各个学生成绩      （4）使用循环的方式输入成绩      2.统计三个班及格人数，每个班有五个同学      3.打印出九九乘法表     */</span>    print<span class="token punctuation">(</span><span class="token string">"班级个数："</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> classNum <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"学生个数："</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> stuNum <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">var</span> classScore <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">var</span> totalScore <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 及格人数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to classNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>      classScore <span class="token operator">=</span> <span class="token number">0.0</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">&lt;-</span> <span class="token number">1</span> to stuNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        printf<span class="token punctuation">(</span><span class="token string">"请输入第%d班的第%d个学生的成绩\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        score <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readDouble<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        classScore <span class="token operator">+=</span> score      <span class="token punctuation">}</span>      totalScore <span class="token operator">+=</span> classScore      printf<span class="token punctuation">(</span><span class="token string">"%d班的平均分为%.2f\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> classScore <span class="token operator">/</span> stuNum<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    printf<span class="token punctuation">(</span><span class="token string">"所有班级的平均分为%.2f\n"</span><span class="token punctuation">,</span> classScore <span class="token operator">/</span> <span class="token punctuation">(</span>stuNum <span class="token operator">*</span> classNum<span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"及格人数："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 九九乘法表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">9</span> <span class="token keyword">if</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        printf<span class="token punctuation">(</span><span class="token string">"%d * %d = %d\t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      println<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-7-while循环的中断"><a href="#4-7-while循环的中断" class="headerlink" title="4.7 while循环的中断"></a>4.7 while循环的中断</h3><h4 id="4-7-1-基本说明"><a href="#4-7-1-基本说明" class="headerlink" title="4.7.1 基本说明"></a>4.7.1 基本说明</h4><blockquote><p>Scala内置结构特点去掉了 break 和 continue，为了更好的适应函数化编程。</p><p>推荐使用函数式的风格解决 break 和 continue 的功能。</p></blockquote><h4 id="4-7-2-break的使用"><a href="#4-7-2-break的使用" class="headerlink" title="4.7.2 break的使用"></a>4.7.2 break的使用</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>mybreak<span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Breaks<span class="token punctuation">.</span><span class="token punctuation">{</span>break<span class="token punctuation">,</span> breakable<span class="token punctuation">}</span><span class="token keyword">object</span> WhileBreak <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// breakable()函数</span>    <span class="token comment" spellcheck="true">// 1.breakable是一个函数：可以接收函数的函数就是高阶函数</span>    <span class="token comment" spellcheck="true">/* 2.        def breakable(op: => Unit) {          try {            op          } catch {            case ex: BreakControl =>              if (ex ne breakException) throw ex          }        }     */</span>    <span class="token comment" spellcheck="true">// 3.breakable 对 break()抛出的异常做了处理，代码就可以继续执行</span>    <span class="token comment" spellcheck="true">// 4.当breakable传入的是代码块时，将()改为{}</span>    breakable <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">+=</span> <span class="token number">1</span>        print<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 1.在Scala中使用函数式的break函数中断循环</span>          <span class="token comment" spellcheck="true">// 2.def break(): Nothing = { throw breakException }</span>          break        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    println<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"ok~~"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-7-3-continue效果的实现"><a href="#4-7-3-continue效果的实现" class="headerlink" title="4.7.3 continue效果的实现"></a>4.7.3 continue效果的实现</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>mycontinue<span class="token comment" spellcheck="true">/*  实现continue的效果 */</span><span class="token keyword">object</span> ContinueDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">10</span> <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      print<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-7-4-小案例"><a href="#4-7-4-小案例" class="headerlink" title="4.7.4 小案例"></a>4.7.4 小案例</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter04<span class="token punctuation">.</span>homework<span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Breaks<span class="token punctuation">.</span><span class="token punctuation">{</span>break<span class="token punctuation">,</span> breakable<span class="token punctuation">}</span><span class="token keyword">object</span> HomeWork01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*      100以内的数求和，求出当和第一次大于20的当前数     */</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    breakable<span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          print<span class="token punctuation">(</span><span class="token string">"当和第一次大于20的当前数："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>          break        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    println<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> loop <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">var</span> sum2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">100</span> <span class="token keyword">if</span> loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sum2 <span class="token operator">+=</span> i      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum2 <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        loop <span class="token operator">=</span> <span class="token boolean">false</span>        print<span class="token punctuation">(</span><span class="token string">"循环守卫实现中断 当和第一次大于20的当前数："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第五章-函数式编程基础"><a href="#第五章-函数式编程基础" class="headerlink" title="第五章 函数式编程基础"></a>第五章 函数式编程基础</h2><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><ul><li>函数式编程是一种编程范式（programming paradigm）</li><li>它属于结构化编程的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用</li><li>函数式编程中，将函数也当做数据类型，因此可以接收函数当做输入（参数）和输出（返回值）</li><li>函数式编程中，最重要的就是函数（function)</li></ul><h4 id="5-1-1-函数和方法的关系"><a href="#5-1-1-函数和方法的关系" class="headerlink" title="5.1.1 函数和方法的关系"></a>5.1.1 函数和方法的关系</h4><ul><li>在Scala中，方法和函数几乎可以等同（比如它们的定义、使用、运行机制都一样），只是函数的使用方式更加的灵活多样</li><li>函数式编程是从编程方式（范式）的角度来谈的，可以理解为函数式编程把函数当做一等公民，充分利用函数、支持函数的多种使用方式</li><li>面向对象编程是以对象为基础的编程方式</li><li>在Scala中函数式编程和面向对象编程融合在一起</li></ul><blockquote><p>函数式编程的好处：可以重复调用，减少相同功能的代码量，有利与后期的维护</p></blockquote><h3 id="5-2-函数的定义"><a href="#5-2-函数的定义" class="headerlink" title="5.2 函数的定义"></a>5.2 函数的定义</h3><h4 id="5-2-1-基本语法"><a href="#5-2-1-基本语法" class="headerlink" title="5.2.1 基本语法"></a>5.2.1 基本语法</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> 函数名 <span class="token punctuation">(</span><span class="token punctuation">[</span>参数名<span class="token operator">:</span> 参数类型<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">:</span> 返回值类型<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    语句<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> 返回值<span class="token punctuation">}</span></code></pre><ol><li>函数声明关键字为def（definition）</li><li>[参数名: 参数类型], … 表示函数的输入（参数列表），可以没有。如果有多个参数使用逗号间隔</li><li>函数中的语句：表示为了实现某一功能代码块</li><li>函数可以有返回值，也可以没有</li><li>返回值形式1：: 返回值类型 =</li><li>返回值形式2：= 表示返回值类型不确定，使用类型推导式完成</li><li>返回值形式3：表示没有返回值，return 不生效</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>fun<span class="token keyword">object</span> FunDemo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> n1 <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">val</span> n2 <span class="token operator">=</span> <span class="token number">20</span>    println<span class="token punctuation">(</span>getResult<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>getResult<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义函数/方法</span>  <span class="token keyword">def</span> getResult<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> oper<span class="token operator">:</span> <span class="token builtin">Char</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      n1 <span class="token operator">+</span> n2    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      n1 <span class="token operator">-</span> n2    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 返回null</span>      <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-函数-调用机制"><a href="#5-3-函数-调用机制" class="headerlink" title="5.3 函数-调用机制"></a>5.3 函数-调用机制</h3><h4 id="5-3-1-函数-调用过程"><a href="#5-3-1-函数-调用过程" class="headerlink" title="5.3.1 函数-调用过程"></a>5.3.1 函数-调用过程</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210425180311919.png" alt="示意图"></p><h4 id="5-3-2-小结"><a href="#5-3-2-小结" class="headerlink" title="5.3.2 小结"></a>5.3.2 小结</h4><ol><li>程序执行一个函数时，就创建一个新的受保护的独立空间（新函数栈）</li><li>函数的局部变量是独立的，不会相互影响</li><li>递归必须向退出递归的条件逼近，否则就是无限递归</li><li>当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁</li></ol><h3 id="5-4-函数的注意事项和细节讨论"><a href="#5-4-函数的注意事项和细节讨论" class="headerlink" title="5.4 函数的注意事项和细节讨论"></a>5.4 函数的注意事项和细节讨论</h3><ol><li>函数的形参列表可以是多个，如果函数没有形参，调用时，可以不带()</li><li>形参列表和返回值列表的数据类型可以是值类型和引用类型</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>fundetails<span class="token keyword">object</span> Details01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 形参列表和返回值列表的数据类型可以是值类型和引用类型</span>    <span class="token keyword">val</span> tiger <span class="token operator">=</span> <span class="token keyword">new</span> Tiger    <span class="token keyword">val</span> tiger2 <span class="token operator">=</span> test01<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> tiger<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>tiger2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>tiger<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>tiger<span class="token punctuation">.</span>hashCode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> tiger2<span class="token punctuation">.</span>hashCode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">def</span> test01<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>tiger<span class="token operator">:</span> Tiger<span class="token punctuation">)</span><span class="token operator">:</span> Tiger <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span>    tiger<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"jack"</span>    tiger  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Tiger <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 一个名字属性</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>Scala中的函数可以根据函数体最后一行代码自行推断函数返回值类型，这种情况下，return关键字可以省略</li><li>Scala可以自行推断，所以在省略return关键字的场合，返回值类型也可以省略</li><li>如果函数明确使用return关键字，那么函数返回就不能使用自行推断了，如果什么都不写，则会return ()</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>fundetails<span class="token keyword">object</span> Details02 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>getSum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>getSum2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果写了return，返回值类型就不能省略</span>  <span class="token keyword">def</span> getSum<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果返回值这里什么都没有写（声明Unit），即表示该函数没有返回值，这时return无效</span>  <span class="token keyword">def</span> getSum2<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>如果函数明确声明无返回值（声明 Unit），那么函数体中即使使用return关键字也不会有返回值</li><li>如果明确函数无返回值或不确定返回值类型，那么返回值类型可以省略（或声明为 Any）</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> f3<span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">+</span> <span class="token string">"123"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">def</span> f3<span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">+</span> <span class="token string">"123"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="8"><li>Scala语法中任何的语法结构都可以嵌套其他语法结构（灵活），即：函数中可以再声明/定义函数，类中可以再声明类，方法中可以再声明/定义方法</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>fundetails<span class="token keyword">object</span> Details03 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// private final</span>      println<span class="token punctuation">(</span><span class="token string">"f1"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    sayHello<span class="token punctuation">(</span><span class="token punctuation">)</span>    f1<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"0k~~~"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> sayHello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// private final sayHello$1</span>      println<span class="token punctuation">(</span><span class="token string">"main sayHello"</span><span class="token punctuation">)</span>      sayHello<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> sayHello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// private final sayHello$1</span>        println<span class="token punctuation">(</span><span class="token string">"sayHello sayHello"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">def</span> sayHello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 成员</span>    println<span class="token punctuation">(</span><span class="token string">"main sayHello1"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="9"><li>Scala函数的形参，在声明参数时，直接赋初始值（默认值），这时调用函数时，如果没有指定实参，则会使用默认值。如果指定了实参，则实参会覆盖默认值</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>fundetails<span class="token keyword">object</span> Details04 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>sayOk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>sayOk<span class="token punctuation">(</span><span class="token string">"mary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// name 形参的默认值Jack</span>  <span class="token keyword">def</span> sayOk<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">" ok"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="10"><li>如果函数存在多个参数，每一个参数都可以设定默认值，那么这个时候，传递的参数到底是覆盖默认值，还是赋值给没有默认值的参数，就不确定了（默认按照声明顺序【从左到右】）这种情况下，可以使用带名参数</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>fundetails<span class="token keyword">object</span> DetailsParameter05 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    mysqlCon<span class="token punctuation">(</span><span class="token punctuation">)</span>    mysqlCon<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从左到右覆盖</span>    <span class="token comment" spellcheck="true">// 如果希望指定覆盖某个值，则使用带名参数即可</span>    mysqlCon<span class="token punctuation">(</span>pwd <span class="token operator">=</span> <span class="token string">"passwd"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    f6("v2")</span>    f6<span class="token punctuation">(</span>p2 <span class="token operator">=</span> <span class="token string">"v2"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">def</span> mysqlCon<span class="token punctuation">(</span>add<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">,</span>               user<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">,</span> pwd<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span><span class="token string">"add="</span> <span class="token operator">+</span> add<span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"port="</span> <span class="token operator">+</span> port<span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"user="</span> <span class="token operator">+</span> user<span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"pwd="</span> <span class="token operator">+</span> pwd<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">def</span> f6<span class="token punctuation">(</span>p1<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"v1"</span><span class="token punctuation">,</span> p2<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>p1 <span class="token operator">+</span> p2<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="11"><li>递归函数未执行之前是无法推断出来结果类型，在使用时必须有明确的返回值类型</li><li>Scala函数支持可变函数（可变参数需要写在形参列表的最后）</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>fundetails<span class="token keyword">object</span> VarParameters <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 编写一个函数sum，可以求出 1 到多个int的和</span>    println<span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 可变参数需要放在最后</span>  <span class="token keyword">def</span> sum<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> args <span class="token operator">:</span> <span class="token builtin">Int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span><span class="token string">"args.length="</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 遍历</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> n1    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">&lt;-</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sum <span class="token operator">+=</span> item    <span class="token punctuation">}</span>    sum  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-5-过程"><a href="#5-5-过程" class="headerlink" title="5.5 过程"></a>5.5 过程</h3><blockquote><p>将函数的返回类型为 Unit 的函数称之为过程，如果明确函数没有返回值，那么等号可以省略</p></blockquote><p>注意事项：</p><ul><li>如果函数声明时没有返回值类型，但是有 = 号，可以进行类型推断最后一行代码。这时函数实际是有返回值的，该函数并不是过程。</li><li>开发工具的自动代码补全功能，虽然会自动加上Unit，但是考虑到Scala语言的简单，灵活，最好不加。</li></ul><h3 id="5-6-惰性函数"><a href="#5-6-惰性函数" class="headerlink" title="5.6 惰性函数"></a>5.6 惰性函数</h3><blockquote><p>当函数返回值被声明为 lazy 时，函数的执行将被推迟，直到我们首次对此取值，该函数才会执行</p></blockquote><h4 id="5-6-1-注意事项"><a href="#5-6-1-注意事项" class="headerlink" title="5.6.1 注意事项"></a>5.6.1 注意事项</h4><ul><li>lazy 不能修饰 var 类型的变量</li><li>不但是在调用函数时，加了lazy会导致函数的执行被推迟，我们在声明一个变量时，如果声明了lazy，那么变量值的分配也会推迟</li></ul><h4 id="5-6-2-应用场景"><a href="#5-6-2-应用场景" class="headerlink" title="5.6.2 应用场景"></a>5.6.2 应用场景</h4><p><code>惰性计算</code>（尽可能延迟表达式求值）是许多函数式编程语言的特性。惰性集合在需要时提供其元素，无需预先计算它们，这带来了一些好处。首先，可以将耗时的计算推迟到绝对需要的时候。其次，可以创造无限个集合，只要它们继续收到请求，就会继续提供元素。函数的惰性使用能过得到更高效的代码。</p><h3 id="5-7-异常"><a href="#5-7-异常" class="headerlink" title="5.7 异常"></a>5.7 异常</h3><blockquote><p>Scala提供try和catch块来处理异常。try块用于包含可能出错的代码 。catch块用于处理try块中发生的异常。可以根据需要在程序中使用任意数量的try…catch块。</p></blockquote><h4 id="5-7-1-Scala异常处理举例"><a href="#5-7-1-Scala异常处理举例" class="headerlink" title="5.7.1 Scala异常处理举例"></a>5.7.1 Scala异常处理举例</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>myexception<span class="token keyword">object</span> ScalaExceptionDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*        1.在Scala中只有一个catch        2.在catch中有多个case，每个case可以匹配一种异常       */</span>      <span class="token keyword">case</span> ex<span class="token operator">:</span> ArithmeticException <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"捕获除数为零的算数异常"</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> exception<span class="token operator">:</span> Exception <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"捕获了异常"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 最终要执行的代码</span>      println<span class="token punctuation">(</span><span class="token string">"Scala finally..."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-7-2-Scala异常处理小结"><a href="#5-7-2-Scala异常处理小结" class="headerlink" title="5.7.2 Scala异常处理小结"></a>5.7.2 Scala异常处理小结</h4><ol><li>我们将可疑代码封装在try块中。 在try块之后使用了一个catch处理程序来捕获异 常。如果发生任何异常，catch处理程序将处理它，程序将不会异常终止。</li><li>Scala的异常的工作机制和Java一样，但是Scala没有“checked(编译时)”异常，即 Scala没有编译异常这个概念，异常<em>都是在运行的时候捕获</em>处理。</li><li>用throw关键字，抛出一个异常对象。所有异常都是Throwable的子类型。throw 表达式是有类型的，就是Nothing，因为Nothing是所有类型的子类型，所以 throw表达式可以用在需要类型的地方 </li><li>在Scala里，借用了模式匹配的思想来做异常的匹配，因此，在catch的代码里，是 一系列case子句来匹配异常，当匹 配上后 =&gt; 有多条语句可以换行写，类似 java 的 switch case x: 代码块..</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>myexception<span class="token keyword">object</span> ThrowDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    val res = test()</span><span class="token comment" spellcheck="true">//    println(res.toString)</span>    <span class="token comment" spellcheck="true">// 如果我们希望在test()抛出异常后，代码可以继续执行，则我们需要处理</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      test<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> exception<span class="token operator">:</span> Exception <span class="token keyword">=></span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span><span class="token string">"捕获到异常"</span> <span class="token operator">+</span> exception<span class="token punctuation">.</span>getMessage<span class="token punctuation">)</span>        println<span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    println<span class="token punctuation">(</span><span class="token string">"ok~~~"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">def</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Nothing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> Exception<span class="token punctuation">(</span><span class="token string">"异常出现~"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li><p>异常捕捉的机制与其他语言中一样，如果有异常发生，catch子句是按次序捕捉的。 因此，在catch子句中，越具体的异常越要靠前，越普遍的异常越靠后，如果把越 普遍的异常写在前，把具体的异常写在后，在scala中也不会报错，但这样是非常 不好的编程风格</p></li><li><p>finally子句用于执行不管是正常处理还是有异常发生时都需要执行的步骤，一般 用于对象的清理工作，这点和Java一样</p></li><li><p>Scala提供了throws关键字来声明异常。可以使用方法定义声明异常。 它向调用者函数提供了此方法可能引发此异常的信息。 它有助于调用函数处理并将该代码包 含在try-catch块中，<strong>以避免程序异常终止</strong>。在scala中，可以使用throws注释声明异常</p></li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter05<span class="token punctuation">.</span>myexception<span class="token keyword">object</span> ThrowsComment <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    f11<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@throws</span><span class="token punctuation">(</span>classOf<span class="token punctuation">[</span>NumberFormatException<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> f11<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"abc"</span><span class="token punctuation">.</span>toInt  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第六章-面向对象编程"><a href="#第六章-面向对象编程" class="headerlink" title="第六章 面向对象编程"></a>第六章 面向对象编程</h2><h3 id="6-1-类与对象"><a href="#6-1-类与对象" class="headerlink" title="6.1 类与对象"></a>6.1 类与对象</h3><h4 id="6-1-1-初使用"><a href="#6-1-1-初使用" class="headerlink" title="6.1.1 初使用"></a>6.1.1 初使用</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>oop<span class="token keyword">object</span> CatDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一只猫</span>    <span class="token keyword">val</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> Cat    <span class="token comment" spellcheck="true">// 给猫的属性赋值</span>    cat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小白"</span>    cat<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">5</span>    cat<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"白色"</span>    println<span class="token punctuation">(</span>s<span class="token string">"这只${cat.color}的猫的名字叫${cat.name}，今年${cat.age}岁"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个Cat类</span><span class="token comment" spellcheck="true">// 一个class Cat 对应的字节码文件只有一个 Cat.class，默认是 public</span><span class="token keyword">class</span> Cat <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义/声明三个属性</span>  <span class="token comment" spellcheck="true">/*    1.当我们声明了 var name: String 时，在底层对应 private name    2.同时会生成两个public方法 name()类似 getter;  public name_$eq() 类似 setter   */</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> _ <span class="token comment" spellcheck="true">// _ 表示给age一个默认值</span>  <span class="token keyword">var</span> color<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> _ <span class="token comment" spellcheck="true">// 表示给color一个默认值</span><span class="token punctuation">}</span></code></pre><h4 id="6-1-2-类和对象的区别和联系"><a href="#6-1-2-类和对象的区别和联系" class="headerlink" title="6.1.2 类和对象的区别和联系"></a>6.1.2 类和对象的区别和联系</h4><ul><li><p>类是抽象的，概念的，代表一类事物，比如人类，猫类</p></li><li><p>对象是具体的，实际的，代表一个具体事物</p></li><li><p>类是对象的模板，对象是类的一个个体，对应一个实例</p></li><li><p><strong>类是对象的模板，对象是类的实例。类只有通过对象才可以使用，而在开发之中应该先产生类，之后再产生对象。类不能直接使用，对象是可以直接使用的。</strong></p></li></ul><table><thead><tr><th></th><th>类</th><th>对象</th></tr></thead><tbody><tr><td>定义</td><td>将数据以及这些数据上的操作封装在一起</td><td>具有类类型的变量</td></tr><tr><td>范畴</td><td>抽象概念</td><td>类的一个具体</td></tr><tr><td>状态</td><td>静态，不携带任何数据，本身不存在内存</td><td>动态，拥有自己的属性和行为，属性可随行为发生改变</td></tr></tbody></table><h4 id="6-1-3-类的定义"><a href="#6-1-3-类的定义" class="headerlink" title="6.1.3 类的定义"></a>6.1.3 类的定义</h4><pre class=" language-scala"><code class="language-scala"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>    类体<span class="token punctuation">}</span></code></pre><ul><li>定义类的注意事项<ul><li>Scala语法中，类并不声明为public，所有这些类都具有公共性(即默认为public)</li><li>一个Scala源文件可以包含多个类，而且默认都是public</li></ul></li></ul><h4 id="6-1-4-属性-成员变量"><a href="#6-1-4-属性-成员变量" class="headerlink" title="6.1.4 属性/成员变量"></a>6.1.4 属性/成员变量</h4><ol><li>属性的定义语法同变量，例：[访问修饰符] var 属性名称 [: 类型] = 属性值</li><li>属性的定义可以为任意类型，包含值类型或引用类型</li><li>Scala中声明一个属性，必须显示将其初始化，然后根据初始化数据的类型自动推断，属性类型可以省略</li><li>如果赋值为null，则一定要加类型，如果不加，则该属性的类型就是Null类型</li><li>如果在定义属性时，暂时不赋值，也可以使用符号_（下划线）让系统分配默认值</li></ol><pre class=" language-scala"><code class="language-scala"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token keyword">var</span> var1<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> _  <span class="token comment" spellcheck="true">// null</span>    <span class="token keyword">var</span> var2<span class="token operator">:</span> <span class="token builtin">Byte</span> <span class="token operator">=</span> _  <span class="token comment" spellcheck="true">// 0</span>    <span class="token keyword">var</span> var3<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> _  <span class="token comment" spellcheck="true">// 0.0</span>    <span class="token keyword">var</span> var4<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> _  <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">}</span></code></pre><h4 id="6-1-5-创建对象"><a href="#6-1-5-创建对象" class="headerlink" title="6.1.5 创建对象"></a>6.1.5 创建对象</h4><blockquote><p>基本语法：</p><p>val | var 对象名 [: 类型] = new 类型()</p></blockquote><ul><li>如果不希望改变对象的引用（内存地址）应该声明为 val 性质，否则为 var</li><li>Scala在声明对象变量时，可以根据创建对象的类型自动推断，所以类型声明可以省略，<strong>但当类型和后面 new 对象类型有继承关系即多态时，就必须写</strong></li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>oop<span class="token keyword">object</span> CreateObj <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> Emp  <span class="token comment" spellcheck="true">// emp 类型就是Emp</span>    <span class="token comment" spellcheck="true">// 如果我们希望将子类对象，交给父类的引用，这时就需要写上类型</span>    <span class="token keyword">val</span> emp2<span class="token operator">:</span> Person2 <span class="token operator">=</span> <span class="token keyword">new</span> Emp  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Person2 <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> Emp <span class="token keyword">extends</span> Person2 <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="6-2-方法"><a href="#6-2-方法" class="headerlink" title="6.2 方法"></a>6.2 方法</h3><h4 id="6-2-1-基本说明"><a href="#6-2-1-基本说明" class="headerlink" title="6.2.1 基本说明"></a>6.2.1 基本说明</h4><blockquote><p>Scala中的方法其实就是函数</p></blockquote><h4 id="6-2-2-基本语法"><a href="#6-2-2-基本语法" class="headerlink" title="6.2.2 基本语法"></a>6.2.2 基本语法</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">:</span> 返回值类型<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    方法体<span class="token punctuation">}</span></code></pre><h4 id="6-2-3-方法案例演示"><a href="#6-2-3-方法案例演示" class="headerlink" title="6.2.3 方法案例演示"></a>6.2.3 方法案例演示</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>method<span class="token keyword">object</span> MethodDemo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用</span>    <span class="token keyword">val</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> Dog    println<span class="token punctuation">(</span>dog<span class="token punctuation">.</span>cal<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Dog <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">var</span> sal<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> _  <span class="token keyword">var</span> food<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> _  <span class="token comment" spellcheck="true">// 方法</span>  <span class="token keyword">def</span> cal<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    n1 <span class="token operator">+</span> n2  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>method<span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StdIn<span class="token comment" spellcheck="true">/*  编写方法：判断一个数是奇数还是偶数 */</span><span class="token keyword">object</span> Exercise03 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> n <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> o <span class="token operator">=</span> <span class="token keyword">new</span> Odd    o<span class="token punctuation">.</span>num<span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Odd <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义num方法</span>  <span class="token keyword">def</span> num<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span>s<span class="token string">"$n 是偶数"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span>s<span class="token string">"$n 是奇数"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-3-类和对象应用实例"><a href="#6-3-类和对象应用实例" class="headerlink" title="6.3 类和对象应用实例"></a>6.3 类和对象应用实例</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>dogcase<span class="token comment" spellcheck="true">/*  编写一个DogTest类，包含name(String)、age(Int)、weight(Double)属性  类中声明一个say方法，返回String类型，方法返回信息中包含所有属性值。  在另一个DogCaseTest类中的main方法中，创建Dog对象，并访问say方法和所有属性，  将调用结果打印输出。 */</span><span class="token keyword">object</span> DogCaseTest <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> DogTest    dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"TomCat"</span>    dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">4</span>    dog<span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">12.34</span>    println<span class="token punctuation">(</span>dog<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> DogTest <span class="token punctuation">{</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> _  <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> _  <span class="token keyword">var</span> weight<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> _  <span class="token keyword">def</span> say<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    s<span class="token string">"小狗的信息入下：name=${name}，age=${this.age}，"</span> <span class="token operator">+</span>      s<span class="token string">"weight=${this.weight}"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>ticketcase<span class="token comment" spellcheck="true">/*  一个景区根据游人的年龄收取不同价 格的门票。  2) 请编写游人类，根据年龄段决定能够 购买的门票价格并输出  3) 规则：年龄>18 , 门票为20元，其它情 况免费。  4) 可以循环从控制台输入名字和年龄， 打印门票收费情况,  如果名字输入 n , 则退出程序。 */</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StdIn<span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Breaks<span class="token punctuation">.</span><span class="token punctuation">{</span>break<span class="token punctuation">,</span> breakable<span class="token punctuation">}</span><span class="token keyword">object</span> TicketCaseTest <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> v <span class="token operator">=</span> <span class="token keyword">new</span> Visitor    v  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Visitor <span class="token punctuation">{</span>  <span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token boolean">true</span>  breakable <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>      print<span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readLine<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">"n"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        break      <span class="token punctuation">}</span>      print<span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readInt<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> ticketPrice <span class="token operator">=</span> <span class="token number">20</span>        println<span class="token punctuation">(</span>s<span class="token string">"${name}的年龄为：${age}，门票价格为：$ticketPrice"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span>s<span class="token string">"${name}的年龄为：${age}，门票免费"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  println<span class="token punctuation">(</span><span class="token string">"退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="6-4-构造器"><a href="#6-4-构造器" class="headerlink" title="6.4 构造器"></a>6.4 构造器</h3><h4 id="6-4-1-简单介绍"><a href="#6-4-1-简单介绍" class="headerlink" title="6.4.1 简单介绍"></a>6.4.1 简单介绍</h4><blockquote><p>构造器(constructor)又叫构造方法，是类的一种特殊的方法，它的主要作用是完成新对象的初始化</p><p>Scala构造对象也需要调用构造方法，并且可以有任意多个构造方法（支持重载）</p><p>Scala类的构造器包括：主构造器和辅助构造器</p></blockquote><h4 id="6-4-2-构造器的基本语法"><a href="#6-4-2-构造器的基本语法" class="headerlink" title="6.4.2 构造器的基本语法"></a>6.4.2 构造器的基本语法</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">class</span> 类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 主构造器</span>    <span class="token comment" spellcheck="true">// 类体</span>    <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 辅助构造器</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 辅助构造器可以有多个，通过不同的参数来区分</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-4-3-Scala构造器的快速入门"><a href="#6-4-3-Scala构造器的快速入门" class="headerlink" title="6.4.3 Scala构造器的快速入门"></a>6.4.3 Scala构造器的快速入门</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>constructor<span class="token keyword">object</span> ConDemo01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    val p1 = new Person("jack", 30)</span><span class="token comment" spellcheck="true">//    println(p1)</span>    <span class="token comment" spellcheck="true">// 下面这就话就会调用 def this(name: String)</span>    <span class="token keyword">val</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> Person<span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 构造器快速入门</span><span class="token keyword">class</span> Person<span class="token punctuation">(</span>inName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> inAge<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> inName  <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> inAge  <span class="token comment" spellcheck="true">// 重写toString，便于输出对象的信息</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> toString<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" age="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age  <span class="token punctuation">}</span>  println<span class="token punctuation">(</span><span class="token string">"age="</span> <span class="token operator">+</span> age<span class="token punctuation">)</span>  println<span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 辅助构造器必须在第一行显式调用主构造器（直接或间接）</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-5-属性高级"><a href="#6-5-属性高级" class="headerlink" title="6.5 属性高级"></a>6.5 属性高级</h3><h4 id="6-5-1-构造器参数"><a href="#6-5-1-构造器参数" class="headerlink" title="6.5.1 构造器参数"></a>6.5.1 构造器参数</h4><ul><li><p>Scala类的主构造器的形参未用任何修饰符修饰，那么这个参数是局部变量</p></li><li><p>如果参数使用val关键字声明，那么Scala会将参数作为类的私有的只读属性</p></li><li><p>如果参数使用var关键字声明，那么那么Scala会将参数作为类的<strong>成员属性</strong>使 </p><p>用,并会提供属性对应的xxx()[类似getter]/xxx_$eq()[类似setter]方法，即这时 </p><p>的<strong>成员属性是私有的，但是可读写</strong></p></li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>constructor<span class="token keyword">object</span> ConDemo04 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> Worker<span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">)</span>    worker<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"cik"</span>    println<span class="token punctuation">(</span>worker<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 不能访问inName</span>    <span class="token keyword">val</span> worker2 <span class="token operator">=</span> <span class="token keyword">new</span> Worker2<span class="token punctuation">(</span><span class="token string">"smith2"</span><span class="token punctuation">)</span>    worker2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"sdf"</span><span class="token comment" spellcheck="true">//    worker2.inName = "Tom" 不能写</span>    println<span class="token punctuation">(</span>worker2<span class="token punctuation">.</span>inName<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>worker2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">val</span> worker3 <span class="token operator">=</span> <span class="token keyword">new</span> Worker3<span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span>    worker3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"sdf"</span>    worker3<span class="token punctuation">.</span>inName <span class="token operator">=</span> <span class="token string">"sdh"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1.如果主构造器是Worker(inName: String)，那么 inName就是一个局部变量</span><span class="token keyword">class</span> Worker<span class="token punctuation">(</span>inName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> inName<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1.如果主构造器是Worker(val inName: String)，那么 inName就是Worker2的一个private的只读属性</span><span class="token keyword">class</span> Worker2<span class="token punctuation">(</span><span class="token keyword">val</span> inName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> inName<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1.如果主构造器是Worker(var inName: String)，那么 inName就是Worker2的一个private的可读写属性</span><span class="token keyword">class</span> Worker3<span class="token punctuation">(</span><span class="token keyword">var</span> inName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> inName<span class="token punctuation">}</span></code></pre><h4 id="6-5-2-Bean-属性"><a href="#6-5-2-Bean-属性" class="headerlink" title="6.5.2 Bean 属性"></a>6.5.2 Bean 属性</h4><blockquote><p>JavaBeans规范定义了Java的属性是像getXxx（）和setXxx（）的方法。许多 Java工具（框架）都依赖这个命名习惯。为了Java的互操作性。将Scala字段 加@BeanProperty时，这样会自动生成<strong>规范的</strong> <strong>setXxx/getXxx</strong> <strong>方法</strong>。这时可 以使用 对象.setXxx() 和 对象.getXxx() 来调用属性</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>chapter06<span class="token punctuation">.</span>constructor<span class="token keyword">import</span> scala<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeanProperty<span class="token keyword">object</span> BeanPropertyDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> car <span class="token operator">=</span> <span class="token keyword">new</span> Car    car<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"BaoMa"</span>    println<span class="token punctuation">(</span>car<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    car<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">"奔驰"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>car<span class="token punctuation">.</span>getName<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Car <span class="token punctuation">{</span>  <span class="token annotation punctuation">@BeanProperty</span> <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><h3 id="6-6-Scala对象创建的流程分析"><a href="#6-6-Scala对象创建的流程分析" class="headerlink" title="6.6 Scala对象创建的流程分析"></a>6.6 Scala对象创建的流程分析</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Short</span> <span class="token operator">=</span> <span class="token number">90</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> _    <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> a    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> Person<span class="token punctuation">(</span><span class="token string">"小倩"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*流程分析1.加载类的信息（属性信息，方法信息）2.在内存中(堆)开辟空间3.使用父类的构造器(主和辅助)进行初始4.使用主构造器对属性进行初始化【age: 90, name: null】5.使用辅助构造器对属性进行初始化【age: 20, name: 小倩】6.将开辟的对象地址赋给p引用*/</span></code></pre><p>79</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Scala学习笔记&quot;&gt;&lt;a href=&quot;#Scala学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Scala学习笔记&quot;&gt;&lt;/a&gt;Scala学习笔记&lt;/h1&gt;&lt;h2 id=&quot;第一章-Scala的概述&quot;&gt;&lt;a href=&quot;#第一章-Scala的概述&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.shiyiri.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Scala" scheme="https://www.shiyiri.top/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="https://www.shiyiri.top/node/101.html"/>
    <id>https://www.shiyiri.top/node/101.html</id>
    <published>2021-04-28T03:37:54.906Z</published>
    <updated>2021-04-28T03:49:00.791Z</updated>
    
    <content type="html"><![CDATA[<pre class=" language-w"><code class="language-w">查看 npm 安装 hexo 插件的情况npm ls --depth 0# 插件安装npm install acorn --save# 主题下载和配置git clone https://github.com/theme-next/hexo-theme-next themes/nexthexo server #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。hexo server -s #以静态模式启动hexo server -p 5000 #更改访问端口 (默认端口为4000，'ctrl + c’关闭server)hexo server -i IP地址 #自定义 IPhexo clean #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹hexo g #生成静态网页 (执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将"/blog/source/" 下面的.md后缀的文件编译为.html后缀的文件,存放在"/blog/public/ " 路径下)hexo d #自动生成网站静态文件，并将本地数据部署到设定的仓库(如github)hexo init 文件夹名称 #初始化XX文件夹名称npm update hexo -g#升级npm install hexo -g #安装node-v #查看node.js版本号npm -v #查看npm版本号git --version #查看git版本号hexo -v #查看hexo版本号简写指令hexo n "我的第一篇文章" 等价于 hexo new "我的第一篇文章" 还等价于 hexo new post "我的第一篇文章"hexo p 等价于 hexo publishhexo g 等价于 hexo generatehexo s等价于 hexo serverhexo d 等价于 hexo deployhexo g -d等价于hexo generate --deploy</code></pre><p><a href="https://yafine-blog.cn/posts/eb3a.html">图片上传教程</a></p><p><a href="https://blog.csdn.net/jspnetcn/article/details/104111651">https://blog.csdn.net/jspnetcn/article/details/104111651</a></p><p><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-15">速度调优</a></p><p><a href="https://yafine-blog.cn/posts/4ab2.html">详细教程</a></p><p><a href="https://fontawesome.com/icons?d=gallery&amp;p=2">获取图标</a></p><p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p><p><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-">hexo优化</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot; language-w&quot;&gt;&lt;code class=&quot;language-w&quot;&gt;查看 npm 安装 hexo 插件的情况
npm ls --depth 0

# 插件安装
npm install acorn --save

# 主题下载和配置
git clon</summary>
      
    
    
    
    <category term="基于hexo搭建" scheme="https://www.shiyiri.top/categories/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="教程" scheme="https://www.shiyiri.top/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>重大机密</title>
    <link href="https://www.shiyiri.top/node/99.html"/>
    <id>https://www.shiyiri.top/node/99.html</id>
    <published>2021-04-22T11:36:47.894Z</published>
    <updated>2021-04-23T03:39:42.084Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://tool.oschina.net/encrypt?type=2">开源中国在线工具</a></p><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/QQ%E5%9B%BE%E7%89%8720210423112837.png" alt="Front-matter"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://tool.oschina.net/encrypt?type=2&quot;&gt;开源中国在线工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/QQ%E5%9B%BE</summary>
      
    
    
    
    <category term="私有" scheme="https://www.shiyiri.top/categories/%E7%A7%81%E6%9C%89/"/>
    
    
    <category term="㊙" scheme="https://www.shiyiri.top/tags/%E3%8A%99/"/>
    
    <category term="看不到吧，气死你" scheme="https://www.shiyiri.top/tags/%E7%9C%8B%E4%B8%8D%E5%88%B0%E5%90%A7%EF%BC%8C%E6%B0%94%E6%AD%BB%E4%BD%A0/"/>
    
  </entry>
  
  <entry>
    <title>猫眼字体处理</title>
    <link href="https://www.shiyiri.top/node/100.html"/>
    <id>https://www.shiyiri.top/node/100.html</id>
    <published>2021-04-21T14:45:26.910Z</published>
    <updated>2021-04-22T14:34:16.839Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本次爬取<a href="https://maoyan.com/board/1">猫眼的票房榜数据</a>，打开检查工具可以看到，票房的数据都进行了加密</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210421224933334.png"></p><h4 id="1-首先查看网页的源代码，Ctrl-f-输入-woff"><a href="#1-首先查看网页的源代码，Ctrl-f-输入-woff" class="headerlink" title="1.首先查看网页的源代码，Ctrl+f 输入 woff"></a>1.首先查看网页的源代码，Ctrl+f 输入 woff</h4><blockquote><p>//vfile.meituan.net/colorstone/f0a30a4dda64b4f8f344858115f54fc92296.woff</p><p>可以选中这段复制到搜索框中回车，发现可以另存为一个文件，我们需要的就是这个，下载完直接打开发现是乱码，对此还需要处理。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210421225924696.png" alt="image-20210421225924696"></p><h4 id="2-使用re下载woff文件，并用TTFont库进行处理"><a href="#2-使用re下载woff文件，并用TTFont库进行处理" class="headerlink" title="2. 使用re下载woff文件，并用TTFont库进行处理"></a>2. 使用re下载woff文件，并用TTFont库进行处理</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fontTools<span class="token punctuation">.</span>ttLib <span class="token keyword">import</span> TTFont <span class="token comment" spellcheck="true"># 导入TTFont库，处理woff文件</span><span class="token keyword">import</span> re<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://maoyan.com/board/1'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token comment" spellcheck="true"># 匹配到 //vfile.meituan.net/colorstone/f0a30a4dda64b4f8f344858115f54fc92296.woff</span>file_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"src:.*?,.*?url\('(.*?)'\) format\('woff'\);"</span><span class="token punctuation">,</span> response<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>file_url<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_base1.woff'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http:'</span> <span class="token operator">+</span> file_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>font <span class="token operator">=</span> TTFont<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_base1.woff'</span><span class="token punctuation">)</span>font<span class="token punctuation">.</span>saveXML<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_base1.xml'</span><span class="token punctuation">)</span></code></pre><p><strong>打开下载的文件进行查看</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210421231151211.png" alt="image-20210421231151211"></p><blockquote><p>据说这里可以看出数字的规律，但我没看出来（小声bb），所以我接下来借助一个网站对其进行解析</p></blockquote><h4 id="3-使用一个FontStore对其进行解析"><a href="#3-使用一个FontStore对其进行解析" class="headerlink" title="3.使用一个FontStore对其进行解析"></a>3.使用一个<a href="https://font.qqe2.com/#">FontStore</a>对其进行解析</h4><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210421231527573.png" alt="image-20210421231527573"></p><p>**将之前我们下载好的文件打开 （maoyan_base1.woff），然后会出现如下的数字，记住它的排序，接下来我们需使用 **</p><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210421231639609.png" alt="image-20210421231639609"></p><h4 id="4-构建代码"><a href="#4-构建代码" class="headerlink" title="4.构建代码"></a>4.构建代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> fontTools<span class="token punctuation">.</span>ttLib <span class="token keyword">import</span> TTFont<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdurl <span class="token operator">=</span> <span class="token string">'https://maoyan.com/board/1'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>all_content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_woff_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    file_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"src:.*?,.*?url\('(.*?)'\) format\('woff'\);"</span><span class="token punctuation">,</span> response<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(file_url)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_base1.woff'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http:'</span> <span class="token operator">+</span> file_url<span class="token punctuation">)</span><span class="token punctuation">.</span>content        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_new1.woff'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http:'</span> <span class="token operator">+</span> file_url<span class="token punctuation">)</span><span class="token punctuation">.</span>content        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    font <span class="token operator">=</span> TTFont<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_base1.woff'</span><span class="token punctuation">)</span>    font<span class="token punctuation">.</span>saveXML<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_base1.xml'</span><span class="token punctuation">)</span>    font_base_order <span class="token operator">=</span> font<span class="token punctuation">.</span>getGlyphOrder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(font_base_order)</span>    <span class="token comment" spellcheck="true"># 根据第一次下载的文件写出对应</span>    map_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">]</span>    font_new <span class="token operator">=</span> TTFont<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_new1.woff'</span><span class="token punctuation">)</span>    font_new<span class="token punctuation">.</span>saveXML<span class="token punctuation">(</span><span class="token string">'D:/temp/maoyan_new1.xml'</span><span class="token punctuation">)</span>    font_new_order <span class="token operator">=</span> font_new<span class="token punctuation">.</span>getGlyphOrder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(font_new_order)</span>    base_flag_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    new_flag_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 得到两个二维列表，对里面没个一维列表进行内容的比对，得到对应的字体</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> zip<span class="token punctuation">(</span>font_base_order<span class="token punctuation">,</span> font_new_order<span class="token punctuation">)</span><span class="token punctuation">:</span>        flag_base <span class="token operator">=</span> font<span class="token punctuation">[</span><span class="token string">'glyf'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>flags        flag_new <span class="token operator">=</span> font_new<span class="token punctuation">[</span><span class="token string">'glyf'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>flags        base_flag_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>flag_base<span class="token punctuation">)</span><span class="token punctuation">)</span>        new_flag_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>flag_new<span class="token punctuation">)</span><span class="token punctuation">)</span>    memory_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> index1<span class="token punctuation">,</span> x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>base_flag_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> index2<span class="token punctuation">,</span> y <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>new_flag_list<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> common<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>                key <span class="token operator">=</span> font_new_order<span class="token punctuation">[</span>index2<span class="token punctuation">]</span>                key <span class="token operator">=</span> <span class="token string">'&amp;#x'</span> <span class="token operator">+</span> key<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'uni'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span>                memory_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> map_list<span class="token punctuation">[</span>index1<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(memory_dict)</span>    <span class="token triple-quoted-string string">'''    {'&amp;#xf4ef;': '6', '&amp;#xf848;': '3', '&amp;#xf88a;': '7', '&amp;#xe7a1;': '9', '&amp;#xe343;': '1', '&amp;#xe137;': '8',     '&amp;#xf489;': '0', '&amp;#xe5e2;': '4', '&amp;#xf19b;': '2', '&amp;#xe8cd;': '5'}    '''</span>    <span class="token keyword">return</span> memory_dict<span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>memory_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取每一个dd标签中的数据</span>    pattern <span class="token operator">=</span> r<span class="token string">'&lt;dd>.*?&lt;i class="board-index board-index(.*?)&lt;/dd>'</span>    all_data <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> response<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> all_data<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 电影名</span>        title <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'title="(.*?)"'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(title)</span>        <span class="token comment" spellcheck="true"># 主演</span>        actor <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;p class="star">主演：(.*?)&lt;/p>'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(actor)</span>        <span class="token comment" spellcheck="true"># 上映时间</span>        time <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;p class="releasetime">上映时间：(.*?)&lt;/p>'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(time)</span>        <span class="token comment" spellcheck="true"># 实时票房</span>        realtimeBO <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;p class="realtime">实时票房:.*?class="stonefont">(.*?)&lt;/span>&lt;/span>(.*?)&lt;/p>'</span><span class="token punctuation">,</span>                                data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        realtimeBoxOffice <span class="token operator">=</span> realtimeBO<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> memory_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 将 realtimeBoxOffice 加密数字 &amp;#xf4ef;&amp;#xf4ef;&amp;#xe137;.&amp;#xf848; 和 memory_dict 中的 key 进行匹配，解析出数据</span>            realtimeBoxOffice <span class="token operator">=</span> realtimeBoxOffice<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        realtimeBoxOffice <span class="token operator">=</span> realtimeBoxOffice <span class="token operator">+</span> realtimeBO<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(realtimeBoxOffice)</span>        <span class="token comment" spellcheck="true"># 总票房</span>        totalBO <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;p class="total-boxoffice">总票房:.*?class="stonefont">(.*?)&lt;/span>&lt;/span>(.*?)&lt;/p>'</span><span class="token punctuation">,</span>                             data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        totalBoxOffice <span class="token operator">=</span> totalBO<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> memory_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            totalBoxOffice <span class="token operator">=</span> totalBoxOffice<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        totalBoxOffice <span class="token operator">=</span> totalBoxOffice <span class="token operator">+</span> totalBO<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(totalBoxOffice)</span>        content <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'title'</span><span class="token punctuation">:</span> title<span class="token punctuation">,</span>            <span class="token string">'actor'</span><span class="token punctuation">:</span> actor<span class="token punctuation">,</span>            <span class="token string">'time'</span><span class="token punctuation">:</span> time<span class="token punctuation">,</span>            <span class="token string">'realtimeBoxOffice'</span><span class="token punctuation">:</span> realtimeBoxOffice<span class="token punctuation">,</span>            <span class="token string">'totalBoxOffice'</span><span class="token punctuation">:</span> totalBoxOffice        <span class="token punctuation">}</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>        all_content<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 存储数据</span><span class="token keyword">def</span> <span class="token function">save_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>all_content<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'actor'</span><span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'realtimeBoxOffice'</span><span class="token punctuation">,</span> <span class="token string">'totalBoxOffice'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"maonyan.csv"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行数据对比以及保证数据的顺序</span><span class="token keyword">def</span> <span class="token function">common</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">:</span>    len1 <span class="token operator">=</span> len<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    len2 <span class="token operator">=</span> len<span class="token punctuation">(</span>list2<span class="token punctuation">)</span>    <span class="token keyword">if</span> len1 <span class="token operator">!=</span> len2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_woff_file<span class="token punctuation">(</span><span class="token punctuation">)</span>    memory_dict <span class="token operator">=</span> parse_font<span class="token punctuation">(</span><span class="token punctuation">)</span>    get_data<span class="token punctuation">(</span>memory_dict<span class="token punctuation">)</span>    save_data<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210421232557991.png" alt="最终保存的票房数据"><img src="https://cdn.jsdelivr.net/gh/Aunean-ls/pic/img/image-20210421224806981.png" alt="image-20210421224806981"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;本次爬取&lt;a href=&quot;https://maoyan.com/board/1&quot;&gt;猫眼的票房榜数据&lt;/a&gt;，打开检查工具可以看到，票房的数据都进行了加密&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/g</summary>
      
    
    
    
    <category term="python" scheme="https://www.shiyiri.top/categories/python/"/>
    
    
    <category term="数据采集" scheme="https://www.shiyiri.top/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy框架</title>
    <link href="https://www.shiyiri.top/node/9.html"/>
    <id>https://www.shiyiri.top/node/9.html</id>
    <published>2021-04-19T14:46:48.342Z</published>
    <updated>2021-04-19T14:55:15.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h2><h5 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h5><p> **Scrapy Engine(引擎)**：负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等</p><p> **Scheduler(调度器)**：负责接收engine发送过来的Request请求并按照一定的方式进行整理排列，入队，当engine需要时，交还给engine</p><p> <strong>Downloader（下载器</strong>）：负责下载engine 发送的所有Requests请求，并将其获取到的Responses交还给Engine，由Engine交给Spider处理</p><p> <strong>Spider（爬虫）</strong>：负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给engine，将URL提交给engine，再次进入Scheduler</p><p> **Item Pipeline(管道)**：负责处理Spider中获取的Item，并经行后期处理（详细分析、过滤、存储等）的地方</p><p> **Downloader Middlewares(下载中间件)**：自定义扩展下载功能组件，可以进行服务器代理等设置</p><p> **Spider Middlewares(Spider中间件)**：可以自定义扩展和操作engine和Spider中间 通信的功能组件(比如进入Spider 的Responses，和从Spider出去的Requests)</p><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p><img src="file:///D:/qq/qq%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE/1936405-124e3af5233e7c56.webp" alt="img"></p><ol><li>引擎从Spiders中获取到的最初的要爬取的Requests。</li><li>引擎安排Requests到调度器中，并向调度器请求下一个要爬取的Requests。</li><li>调度器返回下一个要爬取的Request给请求。</li><li>引擎从上步中得到的Requests通过Downloader Middlewares发送给Downloader,这个过程中Downloader Middlewares中的<code>process_request()</code>函数就会被调用。</li><li>一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过Downloader Middlewares中的<code>process_response()</code>函数，最后返回给引擎</li><li>引擎从下载器中得到Response并通过Spider Middlewares发送给Spider处理，这个过程中Spider Middlewares中的<code>process_spider_input()</code>函数会被调用到。<ol><li>Spider处理Response并通过Spider Middlewares返回爬取到的Item及(跟进的)新的Request给引擎，这个过程中Spider Middlewares的 ()`函数会被调用到。</li></ol></li><li>引擎将上步中Spider处理的及其爬取到的Item给ItemPiplline,将Spider处理的Requests发送给调度器，并向调度器请求可能存在的下一个要爬取的Requests)</li><li>(从第二步)重复直到调度器中没有更多的Requests。</li></ol><h5 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h5><p>创建scrapy项目</p><pre><code>scrapy startproject xxx</code></pre><p>进入项目文件夹，在项目中创建文件</p><pre><code>scrapy genspider pytest cn.bing.com</code></pre><pre><code>`scrapy genspider [爬虫名] [url]</code></pre><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201209113609652.png" alt="image-20201209113609652"></p><h6 id="spiders"><a href="#spiders" class="headerlink" title="spiders"></a>spiders</h6><p>创建的爬虫</p><p>初始内容及意义：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">Lagou1Spider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 标识</span>    name <span class="token operator">=</span> <span class="token string">'lagou1'</span>    <span class="token comment" spellcheck="true"># 爬虫的范围限制, 不会爬到别的网址</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lagou.com'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 初始链接列表</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.lagou.com/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 默认的请求返回方法，未设置callback时默认调用该方法</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p>爬虫启动时调用的方法，迭代请求start_urls中所有链接，callback为默认的parse。可在scrapy中重写</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cls <span class="token operator">=</span> self<span class="token punctuation">.</span>__class__        <span class="token keyword">if</span> method_is_overridden<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> Spider<span class="token punctuation">,</span> <span class="token string">'make_requests_from_url'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span>                <span class="token string">"Spider.make_requests_from_url method is deprecated; it "</span>                <span class="token string">"won't be called in future Scrapy releases. Please "</span>                <span class="token string">"override Spider.start_requests method instead (see %s.%s)."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                    cls<span class="token punctuation">.</span>__module__<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>__name__                <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span>                <span class="token keyword">yield</span> self<span class="token punctuation">.</span>make_requests_from_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span>                <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>一个示例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">import</span> re<span class="token keyword">from</span> dbBook<span class="token punctuation">.</span>items <span class="token keyword">import</span> DbbookItem<span class="token keyword">class</span> <span class="token class-name">Dbbook1Spider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'dbBook1'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['book.douban.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://book.douban.com/tag/?view=type&amp;icn=index-sorttags-all'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 默认回调函数,response为start_urls中链接的响应</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        urls <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//table[@class='tagCol']/tbody/tr/td/a/@href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        url_head <span class="token operator">=</span> <span class="token string">"https://book.douban.com"</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>            i <span class="token operator">=</span> <span class="token number">0</span>            chose <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                url1 <span class="token operator">=</span> url_head <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">"?start={}&amp;type=T"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">20</span>                <span class="token comment" spellcheck="true"># 迭代发起请求,设置回调函数为parse_page.链接的响应会在parse_page中处理</span>                <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url1<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">,</span> <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_urls <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='info']/h2/a/@href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> book_url <span class="token keyword">in</span> book_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>book_url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>parse_book<span class="token punctuation">)</span></code></pre><h6 id="items"><a href="#items" class="headerlink" title="items"></a>items</h6><p>自定义的类型,实质是一个集合，使用前要在spider中导入这个类</p><p>初始</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">LagouItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    <span class="token keyword">pass</span></code></pre><p>示例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DbbookItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    mark <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    public_date <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    press <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    price <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在spider中使用。迭代的item会自动进入pipeline</p><pre class=" language-python"><code class="language-python">        item <span class="token operator">=</span> DbbookItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> book_name        item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> author        item<span class="token punctuation">[</span><span class="token string">"mark"</span><span class="token punctuation">]</span> <span class="token operator">=</span> mark        item<span class="token punctuation">[</span><span class="token string">"press"</span><span class="token punctuation">]</span> <span class="token operator">=</span> press        item<span class="token punctuation">[</span><span class="token string">"public_date"</span><span class="token punctuation">]</span> <span class="token operator">=</span> public_date        item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span> <span class="token operator">=</span> price        <span class="token keyword">yield</span> item</code></pre><h6 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h6><p>用于文件的保存</p><p>爬虫开始运行时调用<code>open_spider(self,spider)</code></p><p>返回item调用<code>process_item(self,time,spider)</code></p><p>结束时调用<code>colse_spider(self,spider)</code></p><p>json文件写入示例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">JsonWriterPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'../items.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>        self<span class="token punctuation">.</span>file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h6 id="middlewares"><a href="#middlewares" class="headerlink" title="middlewares"></a>middlewares</h6><p>包括<code>DownloaderMiddleware</code>和<code>SpiderMiddleware</code></p><p>自定义各种，不改也行</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define here the models for your spider middleware</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token comment" spellcheck="true"># 蜘蛛中间件和下载中间件都需要在ssettings中启用才能使用</span><span class="token comment" spellcheck="true"># 蜘蛛中间件 </span><span class="token keyword">class</span> <span class="token class-name">LagouSpiderMiddleware</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建爬虫，看不懂，不用动</span>        s <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>s<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span>        <span class="token keyword">return</span> s    <span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        response从Engine发送到spider时该方法被调用，返回None或该方法引发异常        返回None则继续处理该响应        引发异常：如果有则调用 request.errback()，没有则启动process_spider_exception()，errback()处理完后调用process_spider_output()        :param response: 正在处理的响应        :param spider: 应用该响应的spider        :return: None        """</span>        <span class="token keyword">return</span> None    <span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        处理spider返回的内容        :param response:生成result的response        :param result:spider处理的返回结果        :param spider:当前spider        :return:返回可迭代请求，字典或item对象，返回内容发送到引擎        """</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">yield</span> i    <span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        异常处理，处理spider和process_spider_output()产生的异常        :param request:生成异常的请求        :param exception:引发的异常        :param spider:当前spider        :return:返回None或可迭代的Request，字典或 Item对象        """</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">process_start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_requests<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        不知道干啥的        :param start_requests:spider中的start_requests        :param spider:        :return:返回可迭代对象        """</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> start_requests<span class="token punctuation">:</span>            <span class="token keyword">yield</span> r    <span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        spider<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Spider opened: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 下载中间件</span><span class="token keyword">class</span> <span class="token class-name">LagouDownloaderMiddleware</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建爬虫，看不懂，不用动</span>        <span class="token comment" spellcheck="true"># settings和signals的入口函数</span>        s <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>s<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span>        <span class="token keyword">return</span> s    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        spider每发出一个请求都会调用这个方法        可以在这里设置随机请求头和代理        :param request:正在处理的请求        :param spider: 应用该响应的spider        :return:返回None，则Scrapy将继续处理请求(最常用)                返回request,则会立刻向调度器申请重新发送请求                返回response,直接到process_response                抛出IgnoreRequest，将会调用process_exception() ,如果没有process_exception则调用请求的errback方法(Request.errback),若未处理则忽略        """</span>        <span class="token keyword">return</span> None    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        下载器将response发送给引擎时调用，每个响应都会调用该方法        :param request:发起响应的请求        :param response:正在处理的响应        :param spider:应用该响应的spider        :return:返回response,则继续处理                返回request,再次发送该请求到process_request处理        """</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        处理下载异常        :param request:生成异常的请求        :param exception:引发的异常        :param spider:        :return:返回None,继续执行所有有process_exception()的中间件                返回Response,进入process_response()                返回request,重新安排下载        """</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        spider<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Spider opened: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h6 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h6><p>setting默认内容与注释</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Scrapy settings for lagou project</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For simplicity, this file contains only settings considered important or</span><span class="token comment" spellcheck="true"># commonly used. You can find more settings consulting the documentation:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     https://docs.scrapy.org/en/latest/topics/settings.html</span><span class="token comment" spellcheck="true">#     https://docs.scrapy.org/en/latest/topics/downloader-middleware.html</span><span class="token comment" spellcheck="true">#     https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span><span class="token comment" spellcheck="true">#</span>BOT_NAME <span class="token operator">=</span> <span class="token string">'lagou'</span><span class="token comment" spellcheck="true"># Scrapy将在其中寻找蜘蛛的模块列表</span>SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lagou.spiders'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用genspider命令创建的新蜘蛛位置</span>NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'lagou.spiders'</span><span class="token comment" spellcheck="true"># *请求头</span><span class="token comment" spellcheck="true"># USER_AGENT = 'lagou (+http://www.yourdomain.com)'</span><span class="token comment" spellcheck="true"># *是否遵守机器人协议</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 并发请求数，默认16</span><span class="token comment" spellcheck="true"># CONCURRENT_REQUESTS = 32</span><span class="token comment" spellcheck="true"># 从同一网站下载连续，下载程序的等待时间，单位秒，可为小数，默认0</span><span class="token comment" spellcheck="true"># DOWNLOAD_DELAY = 3</span><span class="token comment" spellcheck="true"># CONCURRENT_REQUESTS_PER_DOMAIN和CONCURRENT_REQUESTS_PER_IP同时启用时只有CONCURRENT_REQUESTS_PER_IP有效</span><span class="token comment" spellcheck="true"># 同一域名最高并发请求数，默认0</span><span class="token comment" spellcheck="true"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><span class="token comment" spellcheck="true"># 对单个ip的最高并发请求数，默认0</span><span class="token comment" spellcheck="true"># CONCURRENT_REQUESTS_PER_IP = 16</span><span class="token comment" spellcheck="true"># 启用cookies，默认关闭</span><span class="token comment" spellcheck="true"># COOKIES_ENABLED = False</span><span class="token comment" spellcheck="true"># 是否使用控制台，默认关闭</span><span class="token comment" spellcheck="true"># TELNETCONSOLE_ENABLED = False</span><span class="token comment" spellcheck="true"># 默认请求头</span><span class="token comment" spellcheck="true"># DEFAULT_REQUEST_HEADERS = {</span><span class="token comment" spellcheck="true">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span><span class="token comment" spellcheck="true">#   'Accept-Language': 'en',</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># 设置要启用的蜘蛛中间件，数字为调用顺序，越小优先级越高</span><span class="token comment" spellcheck="true"># See https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span><span class="token comment" spellcheck="true"># SPIDER_MIDDLEWARES = {</span><span class="token comment" spellcheck="true">#    'lagou.middlewares.LagouSpiderMiddleware': 543,</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># 要启用的下载中间件</span><span class="token comment" spellcheck="true"># See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html</span><span class="token comment" spellcheck="true"># DOWNLOADER_MIDDLEWARES = {</span><span class="token comment" spellcheck="true">#    'lagou.middlewares.LagouDownloaderMiddleware': 543,</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># 启用的扩展功能</span><span class="token comment" spellcheck="true"># See https://docs.scrapy.org/en/latest/topics/extensions.html</span><span class="token comment" spellcheck="true"># EXTENSIONS = {</span><span class="token comment" spellcheck="true">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># 启用的管道（pipelines），记得写，不写没得保存文件</span><span class="token comment" spellcheck="true"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># ITEM_PIPELINES = {</span><span class="token comment" spellcheck="true">#    'lagou.pipelines.LagouPipeline': 300,</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># 不想写了</span><span class="token comment" spellcheck="true"># Enable and configure the AutoThrottle extension (disabled by default)</span><span class="token comment" spellcheck="true"># See https://docs.scrapy.org/en/latest/topics/autothrottle.html</span><span class="token comment" spellcheck="true"># AUTOTHROTTLE_ENABLED = True</span><span class="token comment" spellcheck="true"># The initial download delay</span><span class="token comment" spellcheck="true"># AUTOTHROTTLE_START_DELAY = 5</span><span class="token comment" spellcheck="true"># The maximum download delay to be set in case of high latencies</span><span class="token comment" spellcheck="true"># AUTOTHROTTLE_MAX_DELAY = 60</span><span class="token comment" spellcheck="true"># The average number of requests Scrapy should be sending in parallel to</span><span class="token comment" spellcheck="true"># each remote server</span><span class="token comment" spellcheck="true"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><span class="token comment" spellcheck="true"># Enable showing throttling stats for every response received:</span><span class="token comment" spellcheck="true"># AUTOTHROTTLE_DEBUG = False</span><span class="token comment" spellcheck="true"># Enable and configure HTTP caching (disabled by default)</span><span class="token comment" spellcheck="true"># See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><span class="token comment" spellcheck="true"># HTTPCACHE_ENABLED = True</span><span class="token comment" spellcheck="true"># HTTPCACHE_EXPIRATION_SECS = 0</span><span class="token comment" spellcheck="true"># HTTPCACHE_DIR = 'httpcache'</span><span class="token comment" spellcheck="true"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><span class="token comment" spellcheck="true"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span></code></pre><h5 id="设置随机请求头、代理ip、cookies示例"><a href="#设置随机请求头、代理ip、cookies示例" class="headerlink" title="设置随机请求头、代理ip、cookies示例"></a>设置随机请求头、代理ip、cookies示例</h5><p>在下载中间件中设置</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DbbookDownloaderMiddleware</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  USER_AGENTS <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"Mozilla/5.0 (Windows; U; Windows NT 5.2) Gecko/2008070208 Firefox/3.0.1"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows; U; Windows NT 5.1) Gecko/20070309 Firefox/2.0.0.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows; U; Windows NT 5.1) Gecko/20070803 Firefox/1.5.0.12 "</span>    <span class="token punctuation">]</span>    PROXY <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"http://193.112.213.227:84"</span><span class="token punctuation">,</span>        <span class="token string">"http://112.35.68.130:8888"</span><span class="token punctuation">,</span>        <span class="token string">"http://39.108.59.34:8118"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        proxy <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>PROXY<span class="token punctuation">)</span>        head <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>USER_AGENTS<span class="token punctuation">)</span>        cookies<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"test1"</span><span class="token punctuation">:</span><span class="token string">"1232424"</span>        <span class="token punctuation">}</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span> <span class="token operator">=</span> head        request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span>  proxy        request<span class="token punctuation">.</span>cookies<span class="token operator">=</span>cookies        </code></pre><p>参考链接</p><p><a href="https://blog.csdn.net/Raymond_YP/article/details/105935802">https://blog.csdn.net/Raymond_YP/article/details/105935802</a><br><a href="https://developer.aliyun.com/article/629849">https://developer.aliyun.com/article/629849</a><br><a href="https://www.jianshu.com/p/4d8862522fa7">https://www.jianshu.com/p/4d8862522fa7</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;scrapy&quot;&gt;&lt;a href=&quot;#scrapy&quot; class=&quot;headerlink&quot; title=&quot;scrapy&quot;&gt;&lt;/a&gt;scrapy&lt;/h2&gt;&lt;h5 id=&quot;框架结构&quot;&gt;&lt;a href=&quot;#框架结构&quot; class=&quot;headerlink&quot; title=&quot;框</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Pandas学习</title>
    <link href="https://www.shiyiri.top/node/7.html"/>
    <id>https://www.shiyiri.top/node/7.html</id>
    <published>2021-04-19T14:46:27.018Z</published>
    <updated>2021-04-19T14:55:19.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缩写和包导入"><a href="#缩写和包导入" class="headerlink" title="缩写和包导入"></a>缩写和包导入</h2><p>在这个速查手册中，我们使用如下缩写：</p><blockquote><p>df：任意的Pandas DataFrame对象<br>s：任意的Pandas Series对象</p></blockquote><p>同时我们需要做如下的引入：</p><blockquote><p>import pandas as pd<br>import numpy as np</p></blockquote><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li><p>df.reindex(index,method,fill_value,limit)</p><p>​    index:用作索引的新序列</p><p>​    method:插值填充方式</p><p>​    fill_value:引入缺失值时使用的替代值</p><p>​    limit:前向或后向填充是的最大填充量</p></li><li><p>pandas.MultiIndex.from_product(iterables,names)</p><p>​    iterables=[a,b]左边做外层索引,右边做内层索引,是一个笛卡尔集</p><p>​    names=[contry,city]为2层索引命名</p><p>​    </p></li></ul><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><ul><li>pd.read_csv(filename)：从CSV文件导入数据</li><li>pd.read_table(filename)：从限定分隔符的文本文件导入数据</li><li>pd.read_excel(filename)：从Excel文件导入数据</li><li>pd.read_sql(query, connection_object)：从SQL表/库导入数据</li><li>pd.read_json(json_string)：从JSON格式的字符串导入数据</li><li>pd.read_html(url)：解析URL、字符串或者HTML文件，抽取其中的tables表格</li><li>pd.read_clipboard()：从你的粘贴板获取内容，并传给read_table()</li><li>pd.DataFrame(dict)：从字典对象导入数据，Key是列名，Value是数据</li></ul><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><ul><li>df.to_csv(filename)：导出数据到CSV文件</li><li>df.to_excel(filename)：导出数据到Excel文件</li><li>df.to_sql(table_name, connection_object)：导出数据到SQL表</li><li>df.to_json(filename)：以Json格式导出数据到文本文件</li></ul><h2 id="创建测试对象"><a href="#创建测试对象" class="headerlink" title="创建测试对象"></a>创建测试对象</h2><ul><li>pd.DataFrame(np.random.rand(20,5))：创建20行5列的随机数组成的DataFrame对象</li><li>pd.Series(my_list)：从可迭代对象my_list创建一个Series对象</li><li>df.index = pd.date_range(‘1900/1/30’, periods=df.shape[0])：增加一个日期索引</li></ul><h2 id="查看、检查数据"><a href="#查看、检查数据" class="headerlink" title="查看、检查数据"></a>查看、检查数据</h2><ul><li>df.head(n)：查看DataFrame对象的前n行</li><li>df.tail(n)：查看DataFrame对象的最后n行</li><li>df.shape：查看行数和列数</li><li>df.info()：查看索引、数据类型和内存信息</li><li>df.describe()：查看数值型列的汇总统计</li><li>s.value_counts(dropna=False)：查看Series对象的唯一值和计数</li><li>df.apply(pd.Series.value_counts)：查看DataFrame对象中每一列的唯一值和计数</li></ul><h2 id="数据选取"><a href="#数据选取" class="headerlink" title="数据选取"></a>数据选取</h2><ul><li>df[col]：根据列名，并以Series的形式返回列</li><li>df[[col1, col2]]：以DataFrame形式返回多列</li><li>s.iloc[0]：按位置选取数据</li><li>s.loc[‘index_one’]：按索引选取数据</li><li>df.iloc[0,:]：返回第一行</li><li>df.iloc[0,0]：返回第一列的第一个元素</li><li>df.values[:,:-1]:返回除了最后一列的其他列的所以数据</li><li>df.query(‘[1, 2] not in c’): 返回c列中不包含1，2的其他数据集</li></ul><h2 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h2><ul><li>df.columns = [‘a’,’b’,’c’]：重命名列名</li><li>pd.isnull()：检查DataFrame对象中的空值，并返回一个Boolean数组</li><li>pd.notnull()：检查DataFrame对象中的非空值，并返回一个Boolean数组</li><li>df.dropna()：删除所有包含空值的行</li><li>df.dropna(axis=1)：删除所有包含空值的列</li><li>df.dropna(axis=1,thresh=n)：删除所有小于n个非空值的行</li><li>df.fillna(x)：用x替换DataFrame对象中所有的空值</li><li>s.astype(float)：将Series中的数据类型更改为float类型</li><li>s.replace(1,’one’)：用‘one’代替所有等于1的值</li><li>s.replace([1,3],[‘one’,’three’])：用’one’代替1，用’three’代替3</li><li>df.rename(columns=lambda x: x + 1)：批量更改列名</li><li>df.rename(columns={‘old_name’: ‘new_ name’})：选择性更改列名</li><li>df.set_index(‘column_one’)：更改索引列</li><li>df.rename(index=lambda x: x + 1)：批量重命名索引</li></ul><h2 id="数据处理：Filter、Sort和GroupBy"><a href="#数据处理：Filter、Sort和GroupBy" class="headerlink" title="数据处理：Filter、Sort和GroupBy"></a>数据处理：Filter、Sort和GroupBy</h2><ul><li>df[df[col] &gt; 0.5]：选择col列的值大于0.5的行</li><li>df.sort_values(col1)：按照列col1排序数据，默认升序排列</li><li>df.sort_values(col2, ascending=False)：按照列col1降序排列数据</li><li>df.sort_values([col1,col2], ascending=[True,False])：先按列col1升序排列，后按col2降序排列数据</li><li>df.groupby(col)：返回一个按列col进行分组的Groupby对象</li><li>df.groupby([col1,col2])：返回一个按多列进行分组的Groupby对象</li><li>df.groupby(col1)[col2]：返回按列col1进行分组后，列col2的均值</li><li>df.pivot_table(index=col1, values=[col2,col3], aggfunc=max)：创建一个按列col1进行分组，并计算col2和col3的最大值的数据透视表</li><li>df.groupby(col1).agg(np.mean)：返回按列col1分组的所有列的均值</li><li>data.apply(np.mean)：对DataFrame中的每一列应用函数np.mean</li><li>data.apply(np.max,axis=1)：对DataFrame中的每一行应用函数np.max</li></ul><h2 id="数据合并"><a href="#数据合并" class="headerlink" title="数据合并"></a>数据合并</h2><ul><li>df1.append(df2)：将df2中的行添加到df1的尾部</li><li>df.concat([df1, df2],axis=1)：将df2中的列添加到df1的尾部</li><li>df1.join(df2,on=col1,how=’inner’)：对df1的列和df2的列执行SQL形式的join</li></ul><h2 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h2><ul><li>df.describe()：查看数据值列的汇总统计</li><li>df.mean()：返回所有列的均值</li><li>df.corr()：返回列与列之间的相关系数</li><li>df.count()：返回每一列中的非空值的个数</li><li>df.max()：返回每一列的最大值</li><li>df.min()：返回每一列的最小值</li><li>df.median()：返回每一列的中位数</li><li>df.std()：返回每一列的标准差</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;缩写和包导入&quot;&gt;&lt;a href=&quot;#缩写和包导入&quot; class=&quot;headerlink&quot; title=&quot;缩写和包导入&quot;&gt;&lt;/a&gt;缩写和包导入&lt;/h2&gt;&lt;p&gt;在这个速查手册中，我们使用如下缩写：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;df：任意的Pandas Da</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Numpy学习</title>
    <link href="https://www.shiyiri.top/node/6.html"/>
    <id>https://www.shiyiri.top/node/6.html</id>
    <published>2021-04-19T14:46:17.724Z</published>
    <updated>2021-04-19T14:55:32.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nump数组基础"><a href="#Nump数组基础" class="headerlink" title="Nump数组基础"></a>Nump数组基础</h3><h4 id="从头创建数组"><a href="#从头创建数组" class="headerlink" title="从头创建数组"></a>从头创建数组</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建一个长度为10的数组,数组的值都是0</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个3×5的浮点型数组，数组的值都是1</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个3×5的浮点型数组，数组的值都是3.14</span>np<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个3×5的浮点型数组，数组的值是一个线性序列</span><span class="token comment" spellcheck="true"># 从0开始，到20结束，步长为2</span><span class="token comment" spellcheck="true"># （它和内置的range()函数类似）</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个5个元素的数组，这5个数均匀地分配到0~1</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个3×3的、在0~1均匀分布的随机数组成的数组</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建一个3×3的、均值为0、方差为1的</span><span class="token comment" spellcheck="true"># 正态分布的随机数数组</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个3×3的、[0, 10)区间的随机整型数组</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个3×3的单位矩阵</span>np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个由3个整型数组成的未初始化的数组</span><span class="token comment" spellcheck="true"># 数组的值是内存空间中的任意值</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><h4 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h4><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ndarray.ndim</td><td align="left">秩，即轴的数量或维度的数量</td></tr><tr><td align="left">ndarray.shape</td><td align="left">数组的维度，对于矩阵，n 行 m 列</td></tr><tr><td align="left">ndarray.size</td><td align="left">数组元素的总个数，相当于 .shape 中 n*m 的值</td></tr><tr><td align="left">ndarray.dtype</td><td align="left">ndarray 对象的元素类型</td></tr><tr><td align="left">ndarray.itemsize</td><td align="left">ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td align="left">ndarray.flags</td><td align="left">ndarray 对象的内存信息</td></tr><tr><td align="left">ndarray.real</td><td align="left">ndarray元素的实部</td></tr><tr><td align="left">ndarray.imag</td><td align="left">ndarray 元素的虚部</td></tr><tr><td align="left">ndarray.data</td><td align="left">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td></tr></tbody></table><h4 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#如果你熟悉 Python 的标准列表索引，那么你对 NumPy 的索引方式也不会陌生。和 Python 列表一样，在一维数组中，你也可以通过中括号指定索引获取第 i 个值（从 0 开始计数）：</span>x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>x1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#为了获取数组的末尾索引，可以用负值索引：</span>x1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#倒数第一个值</span>x1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#倒数第二个值</span><span class="token comment" spellcheck="true">#在多维数组中，可以用逗号分隔的索引元组获取元素</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#第一行第一列</span>x2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#第三行第一列</span>x2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#第三行倒数第一列</span><span class="token comment" spellcheck="true">#也可以用以上索引方式修改元素值：</span>x2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment" spellcheck="true">#将第一个值赋12</span></code></pre><p>==请注意，和 Python 列表不同，NumPy 数组是固定类型的。这意味着当你试图将一个浮点值插入一个整型数组时，浮点值会被截短成整型。并且这种截短是自动完成的，不会给你提示或警告，所以需要特别注意这一点！==</p><h4 id="数组的切分"><a href="#数组的切分" class="headerlink" title="数组的切分"></a>数组的切分</h4><p>正如此前用中括号获取单个数组元素，我们也可以用切片（slice）符号获取子数组，切片符号用冒号（:）表示。NumPy 切片语法和 Python 列表的标准切片语法相同。为了获取数组 x 的一个切片，可以用以下方式：</p><p>一维子数组</p><pre class=" language-python"><code class="language-python">​```用下面这种格式x<span class="token punctuation">[</span>start<span class="token punctuation">:</span>stop<span class="token punctuation">:</span>step<span class="token punctuation">]</span>​```x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>xOut<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 前五个元素</span>Out<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 索引五之后的元素</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 中间的子数组</span>Out<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 每隔一个元素</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 每隔一个元素，从索引1开始</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 所有元素，逆序的</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 从索引5开始每隔一个元素逆序</span>Out<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>==这里可以使用类似于range()的迭代–arr[1:10:2]–表示从索引1开始,到9(不包括10)的跨度为 2,所以会得到–1,3,5,7,9–也可以进行逆操作==</p><p><code>多维子数组</code><br>多维切片也采用同样的方式处理，用冒号分隔。例如：</p><pre class=" language-python"><code class="language-python">x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 两行，三列</span>Out<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 所有行，每隔一列</span>Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>注意:如果将切片的数组或原数组赋值给其他变量,在修改那个变量时原数组也会被修改,所以需要进行copy(),这样修改就不会把原数据也修改了</strong></p><h4 id="数组的变形"><a href="#数组的变形" class="headerlink" title="数组的变形"></a>数组的变形</h4><p>另一个有用的操作类型是数组的变形。数组变形最灵活的实现方式是通<br>过 reshape() 函数来实现。例如，如果你希望将数字 1~9 放入一个<br>3×3 的矩阵中，可以采用如下方法：</p><pre class=" language-python"><code class="language-python">grid <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#通过变形获得的行向量</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通过newaxis获得的行向量</span>x<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通过变形获得的列向量</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通过newaxis获得的列向量</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>请注意，如果希望该方法可行，那么原始数组的大小必须和变形后数组<br>的大小一致。如果满足这个条件，reshape 方法将会用到原始数组的一<br>个非副本视图。但实际情况是，在非连续的数据缓存的情况下，返回非<br>副本视图往往不可能实现。<br>另外一个常见的变形模式是将一个一维数组转变为二维的行或列的矩<br>阵。你也可以通过 reshape 方法来实现，或者更简单地在一个切片操<br>作中利用 newaxis 关键字：<br><code>In[39]: x = np.array([1, 2, 3])</code></p><p>在本书的其余部分中，你将看到很多这种变形。</p><h4 id="数组的拼接和分裂"><a href="#数组的拼接和分裂" class="headerlink" title="数组的拼接和分裂"></a>数组的拼接和分裂</h4><ol><li><p>数组的拼接</p><p> 拼接或连接 NumPy 中的两个数组主要由np.concatenate、np.vstack 和 np.hstack 例程实<br> 现。np.concatenate 将数组元组或数组列表作为第一个参数，如下所示：</p><pre><code>In[43]: x = np.array([1, 2, 3])y = np.array([3, 2, 1])np.concatenate([x, y])Out[43]: array([1, 2, 3, 3, 2, 1])</code></pre><ol start="2"><li><p>数组的分裂<br> 与拼接相反的过程是分裂。分裂可以通过 np.split、np.hsplit<br> 和 np.vsplit 函数来实现。可以向以上函数传递一个索引列表作<br> 为参数，索引列表记录的是分裂点位置：</p><pre class=" language-python"><code class="language-python">x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3 <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">99</span> <span class="token number">99</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span>In<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre></li></ol></li></ol><h3 id="NumPy数组的计算-通用函数"><a href="#NumPy数组的计算-通用函数" class="headerlink" title="NumPy数组的计算:通用函数"></a>NumPy数组的计算:通用函数</h3><h4 id="探索NumPy的通用函数"><a href="#探索NumPy的通用函数" class="headerlink" title="探索NumPy的通用函数"></a>探索NumPy的通用函数</h4><p>运算符 对应的通用函数 描述</p><p>+  np.add     加法运算（即 1 + 1 = 2）</p><p>-    np.subtract     减法运算（即 3 - 2 = 1）</p><p>-      np.negative    负数运算（ 即 -2）</p><p>-       np.multiply     乘法运算（即 2 * 3 = 6）<br>/     np.divide      除法运算（即 3 / 2 = 1.5）<br>//    np.floor_divide     地板除法运算（floor division，即 3 // 2 = 1）<br>**      np.power     指数运算（即 2 ** 3 = 8）<br>%       np.mod           模 / 余数（ 即 9 % 4 = 1）</p><p>绝对值<br>正如 NumPy 能理解 Python 内置的运算操作，NumPy 也可以理解<br>Python 内置的绝对值函数：<br>In[11]: x = np.array([-2, -1, 0, 1, 2])<br>abs(x)<br>Out[11]: array([2, 1, 0, 1, 2])<br>对应的 NumPy 通用函数是 np.absolute，该函数也可以用别名<br>np.abs 来访问：</p><pre class=" language-python"><code class="language-python">Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>这个通用函数也可以处理复数。当处理复数时，绝对值返回的是该<br>复数的幅度：<br>In[14]: x = np.array([3 - 4j, 4 - 3j, 2 + 0j, 0 + 1j])<br>np.abs(x)<br>Out[14]: array([ 5., 5., 2., 1.])</p><h4 id="高级的通用函数特性"><a href="#高级的通用函数特性" class="headerlink" title="高级的通用函数特性"></a>高级的通用函数特性</h4><p>指定输出<br>在进行大量运算时，有时候指定一个用于存放运算结果的数组是非<br>常有用的。不同于创建临时数组，你可以用这个特性将计算结果直<br>接写入到你期望的存储位置。所有的通用函数都可以通过 out 参数<br>来指定计算结果的存放位置：<br><code>In[24]: x = np.arange(5) y = np.empty(5) np.multiply(x, 10, out=y) print(y) [ 0. 10. 20. 30. 40.]</code><br>这个特性也可以被用作数组视图，例如可以将计算结果写入指定数<br>组的每隔一个元素的位置：<br><code>In[25]: y = np.zeros(10) np.power(2, x, out=y[::2]) print(y) [ 1. 0. 2. 0. 4. 0. 8. 0. 16. 0.]</code><br>如果这里写的是 y[::2] = 2 ** x，那么结果将是创建一个临时<br>数组，该数组存放的是 2 ** x 的结果，并且接下来会将这些值复<br>制到 y 数组中。对于上述例子中比较小的计算量来说，这两种方式<br>的差别并不大。但是对于较大的数组，通过慎重使用 out 参数将能<br>够有效节约内存。</p><h3 id="聚合-最小值-最大值和其他值"><a href="#聚合-最小值-最大值和其他值" class="headerlink" title="聚合:最小值,最大值和其他值"></a>聚合:最小值,最大值和其他值</h3><h4 id="数组值求和"><a href="#数组值求和" class="headerlink" title="数组值求和"></a>数组值求和</h4><p>先来看一个小例子，设想计算一个数组中所有元素的和。Python 本身可<br>用内置的 sum 函数来实现：</p><p>``</p><p>In[1]: import numpy as np<br>In[2]: L = np.random.random(100)<br>sum(L)<br>Out[2]: 55.61209116604941</p><p>``</p><p>它的语法和 NumPy 的 sum 函数非常相似，并且在这个简单的例子中的<br>结果也是一样的：</p><p>``</p><p>In[3]: np.sum(L)<br>Out[3]: 55.612091166049424</p><p>``</p><p>但是，因为 NumPy 的 sum 函数在编译码中执行操作，所以 NumPy 的<br>操作计算得更快一些：</p><p>``</p><p>In[4]: big_array = np.random.rand(1000000)<br>%timeit sum(big_array)<br>%timeit np.sum(big_array)<br>10 loops, best of 3: 104 ms per loop<br>1000 loops, best of 3: 442 μs per loop</p><p>``</p><p>但是需要注意，sum 函数和 np.sum 函数并不等同，这有时会导致混<br>淆。尤其是它们各自的可选参数都有不同的含义，np.sum 函数是知道<br>数组的维度的，这一点将在接下来的部分讲解。</p><h4 id="最小值和最大值"><a href="#最小值和最大值" class="headerlink" title="最小值和最大值"></a>最小值和最大值</h4><p>多维度聚合<br>一种常用的聚合操作是沿着一行或一列聚合。例如，假设你有一些<br>数据存储在二维数组中：</p><pre class=" language-python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> M <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.8967576</span> <span class="token number">0.03783739</span> <span class="token number">0.75952519</span> <span class="token number">0.06682827</span><span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0.8354065</span> <span class="token number">0.99196818</span> <span class="token number">0.19544769</span> <span class="token number">0.43447084</span><span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0.66859307</span> <span class="token number">0.15038721</span> <span class="token number">0.37911423</span> <span class="token number">0.6687194</span><span class="token punctuation">]</span><span class="token punctuation">]</span>​```默认情况下，每一个 NumPy 聚合函数将会返回对整个数组的聚合结果：​```In<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> M<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">6.0850555667307118</span>    ​```聚合函数还有一个参数，用于指定沿着哪个轴的方向进行聚合。例如，可以通过指定 axis<span class="token operator">=</span><span class="token number">0</span> 找到每一列的最小值：​```In<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> M<span class="token punctuation">.</span>min<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0.66859307</span><span class="token punctuation">,</span> <span class="token number">0.03783739</span><span class="token punctuation">,</span> <span class="token number">0.19544769</span><span class="token punctuation">,</span> <span class="token number">0.06682827</span><span class="token punctuation">]</span><span class="token punctuation">)</span>​```这个函数返回四个值，对应四列数字的计算值。同样，也可以找到每一行的最大值：​```In<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> M<span class="token punctuation">.</span>max<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0.8967576</span> <span class="token punctuation">,</span> <span class="token number">0.99196818</span><span class="token punctuation">,</span> <span class="token number">0.6687194</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="C:\Users\Scott\AppData\Roaming\Typora\typora-user-images\1571573416744.png" alt="1571573416744"></p><h4 id="示例-美国总统的身高是多少"><a href="#示例-美国总统的身高是多少" class="headerlink" title="示例:美国总统的身高是多少"></a>示例:美国总统的身高是多少</h4><p>用 NumPy 的聚合功能来概括一组数据非常有用。这里举一个简单的例<br>子——计算所有美国总统的身高。这个数据在 president_heights.csv 文件<br>中，是一个简单的用逗号分隔的标签和值的列表：<br>In[13]: !head -4 data/president_heights.csv<br>order,name,height(cm)<br>1,George Washington,189<br>2,John Adams,170<br>3,Thomas Jefferson,189<br>我们将用 Pandas 包来读文件并抽取身高信息。（请注意，身高的计量<br>单位是厘米。）第 3 章将更全面地介绍 Pandas：<br>In[14]: import pandas as pd<br>data = pd.read_csv(‘data/president_heights.csv’)<br>heights = np.array(data[‘height(cm)’])<br>print(heights)<br>[189 170 189 163 183 171 185 168 173 183 173 173 175 178 183 193 178 173<br>174 183 183 168 170 178 182 180 183 178 182 188 175 179 183 193 182 183<br>177 185 188 188 182 185]<br>有了这个数据数组后，就可以计算很多概括统计值了：<br>In[15]: print(“Mean height: “, heights.mean())<br>print(“Standard deviation:”, heights.std())<br>print(“Minimum height: “, heights.min())<br>print(“Maximum height: “, heights.max())<br>Mean height: 179.738095238<br>Standard deviation: 6.93184344275<br>Minimum height: 163<br>Maximum height: 193<br>请注意，在这个例子中，聚合操作将整个数组缩减到单个概括值，这个<br>概括值给出了这些数值的分布信息。我们也可以计算分位数：<br>In[16]: print(“25th percentile: “, np.percentile(heights, 25))<br>print(“Median: “, np.median(heights))<br>print(“75th percentile: “, np.percentile(heights, 75))<br>25th percentile: 174.25<br>Median: 182.0<br>75th percentile: 183.0<br>可以看到，美国总统的身高中位数是 182cm，或者说不到 6 英尺。<br>当然，有些时候将数据可视化更有用。这时可以先进行一个快速的可视<br>化，通过 Matplotlib（第 4 章将详细讨论该工具）用以下代码创建图 2-<br>3：<br>In[17]: %matplotlib inline<br>import matplotlib.pyplot as plt<br>import seaborn; seaborn.set() # 设置绘图风格<br>In[18]: plt.hist(heights)<br>plt.title(‘Height Distribution of US Presidents’)<br>plt.xlabel(‘height (cm)’)<br>plt.ylabel(‘number’);<br>图 2-3：总统身高的直方图<br>这些聚合是探索数据分析的一些最基本片段，本书后续的章节将进行更<br>深入的介绍。</p><h3 id="数组的计算-广播"><a href="#数组的计算-广播" class="headerlink" title="数组的计算:广播"></a>数组的计算:广播</h3><h4 id="广播的介绍"><a href="#广播的介绍" class="headerlink" title="广播的介绍"></a>广播的介绍</h4><p>前面曾提到，对于同样大小的数组，二进制操作是对相应元素逐个计<br>算：3</p><pre class=" language-python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> npIn<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a <span class="token operator">+</span> bOut<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ​```广播允许这些二进制操作可以用于不同大小的数组。例如，可以简单地将一个标量（可以认为是一个零维的数组）和一个数组相加：​```In<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">+</span> <span class="token number">5</span>Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>​```我们可以认为这个操作是将数值 <span class="token number">5</span> 扩展或重复至数组 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>，然后执行加法。NumPy 广播功能的好处是，这种对值的重复实际上并没有发生，但是这是一种很好用的理解广播的模型。我们同样也可以将这个原理扩展到更高维度的数组。观察以下将一个一维数组和一个二维数组相加的结果：​``` In<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> M <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>MOut<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> M <span class="token operator">+</span> aOut<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ​```这里这个一维数组就被扩展或者广播了。它沿着第二个维度扩展，扩展到匹配 M 数组的形状。以上的这些例子理解起来都相对容易，更复杂的情况会涉及对两个数组的同时广播，例如以下示例：​```In<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>In<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">+</span> bOut<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="C:\Users\Scott\AppData\Roaming\Typora\typora-user-images\1571573777264.png" alt="1571573777264"></p><h3 id="比较-掩码和布尔逻辑"><a href="#比较-掩码和布尔逻辑" class="headerlink" title="比较,掩码和布尔逻辑"></a>比较,掩码和布尔逻辑</h3><h4 id="和通用函数类似的比较操作"><a href="#和通用函数类似的比较操作" class="headerlink" title="和通用函数类似的比较操作"></a>和通用函数类似的比较操作</h4><p><img src="C:\Users\Scott\AppData\Roaming\Typora\typora-user-images\1571574168160.png" alt="1571574168160"></p><h4 id="操作布尔数组"><a href="#操作布尔数组" class="headerlink" title="操作布尔数组"></a>操作布尔数组</h4><ol><li><p>统计记录的个数如果需要统计布尔数组中 True 记录的个数，可以使用==np.count_nonzero==函数：</p><pre class=" language-python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 有多少值小于6？</span>np<span class="token punctuation">.</span>count_nonzero<span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token comment" spellcheck="true">#我们看到有 8 个数组记录是小于 6 的。另外一种实现方式是利用</span><span class="token comment" spellcheck="true">#np.sum。在这个例子中，False 会被解释成 0，True 会被解释成</span>In<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token comment" spellcheck="true">#sum() 的好处是，和其他 NumPy 聚合函数一样，这个求和也可以沿着行或列进行：</span>In<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 每行有多少值小于6？</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ​```这是矩阵中每一行小于 <span class="token number">6</span> 的个数。如要快速检查任意或者所有这些值是否为 <span class="token boolean">True</span>，可以用（你一定猜到了）np<span class="token punctuation">.</span>any<span class="token punctuation">(</span><span class="token punctuation">)</span> 或 np<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>​```In<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 有没有值大于8？</span>np<span class="token punctuation">.</span>any<span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>In<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 有没有值小于0？</span>np<span class="token punctuation">.</span>any<span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">False</span>In<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 是否所有值都小于10？</span>np<span class="token punctuation">.</span>all<span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>In<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 是否所有值都等于6？</span>np<span class="token punctuation">.</span>all<span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true">#np.all() 和n p.any() 也可以用于沿着特定的坐标轴，例如：</span>In<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 是否每行的所有值都小于8？</span>np<span class="token punctuation">.</span>all<span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>bool<span class="token punctuation">)</span>    </code></pre></li><li><p>布尔运算符</p><p> 运算符 对应通用函数<br> &amp;     np.bitwise_and<br> |       np.bitwise_or<br> ^     np.bitwise_xor<br> ~     np.bitwise_not</p></li></ol><h4 id="将布尔数组作为掩码"><a href="#将布尔数组作为掩码" class="headerlink" title="将布尔数组作为掩码"></a>将布尔数组作为掩码</h4><p>在前面的小节中，我们看到了如何直接对布尔数组进行聚合计算。一种<br>更强大的模式是使用布尔数组作为掩码，通过该掩码选择数据的子数据<br>集。以前面小节用过的 x 数组为例，假设我们希望抽取出数组中所有小<br>于 5 的元素：</p><pre class=" language-python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#如前面介绍过的方法，利用比较运算符可以得到一个布尔数组：</span>In<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">5</span>Out<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>bool<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#现在为了将这些值从数组中选出，可以进行简单的索引，即掩码操作：</span>In<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span>x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="花俏的索引"><a href="#花俏的索引" class="headerlink" title="花俏的索引"></a>花俏的索引</h3><h4 id="探索花俏的索引"><a href="#探索花俏的索引" class="headerlink" title="探索花俏的索引"></a>探索花俏的索引</h4><p>花哨的索引在概念上非常简单，它意味着传递一个索引数组来一次性获<br>得多个数组元素。例如以下数组：</p><pre class=" language-python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> nprand <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>x <span class="token operator">=</span> rand<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">51</span> <span class="token number">92</span> <span class="token number">14</span> <span class="token number">71</span> <span class="token number">60</span> <span class="token number">20</span> <span class="token number">82</span> <span class="token number">86</span> <span class="token number">74</span> <span class="token number">74</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#假设我们希望获得三个不同的元素，可以用以下方式实现：</span>In<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#另外一种方法是通过传递索引的单个列表或数组来获得同样的结果：</span>In<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ind <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>x<span class="token punctuation">[</span>ind<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#利用花哨的索引，结果的形状与索引数组的形状一致，而不是与被索引数组的形状一致：</span>In<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ind <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span>ind<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#花哨的索引也对多个维度适用。假设我们有以下数组：</span>In<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>XOut<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#和标准的索引方式一样，第一个索引指的是行，第二个索引指的是列：</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> row <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>col <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X<span class="token punctuation">[</span>row<span class="token punctuation">,</span> col<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>​```这里需要注意，结果的第一个值是 X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>，第二个值是 X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>，第三个值是 X<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>。在花哨的索引中，索引值的配对遵循 <span class="token number">2.5</span> 节介绍过的广播的规则。因此当我们将一个列向量和一个行向量组合在一个索引中时，会得到一个二维的结果：​```In<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X<span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">,</span> col<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h4><p>花哨的索引可以和其他索引方案结合起来形成更强大的索引操作：</p><pre class=" language-python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#可以将花哨的索引和简单的索引组合使用：</span>In<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#也可以将花哨的索引和切片组合使用：</span>In<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#更可以将花哨的索引和掩码组合使用：</span>In<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mask <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>bool<span class="token punctuation">)</span>X<span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">,</span> mask<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><h4 id="NumPy中的快速排序：np-sort和np-argsort"><a href="#NumPy中的快速排序：np-sort和np-argsort" class="headerlink" title="NumPy中的快速排序：np.sort和np.argsort"></a>NumPy中的快速排序：np.sort和np.argsort</h4><p>尽管 Python 有内置的 sort 和 sorted 函数可以对列表进行排序，但是<br>这里不会介绍这两个函数，因为 NumPy 的 np.sort 函数实际上效率更<br>高。默认情况下，np.sort 的排序算法是 快速排序，其算法复杂度为<br>[N log N]，另外也可以选择归并排序和堆排序。对于大多数应用场<br>景，默认的快速排序已经足够高效了。<br>如果想在不修改原始输入数组的基础上返回一个排好序的数组，可以使<br>用 np.sort：</p><pre class=" language-python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果希望用排好序的数组替代原始数组，可以使用数组的 sort 方法：</span>In<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#另外一个相关的函数是 argsort，该函数返回的是原始数组排好序的索引值：</span>In<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>i <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span><span class="token punctuation">]</span>​```以上结果的第一个元素是数组中最小元素的索引值，第二个值给出的是次小元素的索引值，以此类推。这些索引值可以被用于（通过花哨的索引）创建有序的数组：​```In<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>​```沿着行或列排序NumPy 排序算法的一个有用的功能是通过 axis 参数，沿着多维数组的行或列进行排序，例如：​```In<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rand <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>X <span class="token operator">=</span> rand<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">9</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>In<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 对X的每一列排序</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>X<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 对X每一行排序</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>X<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    </code></pre><h4 id="部分排序-分隔"><a href="#部分排序-分隔" class="headerlink" title="部分排序:分隔"></a>部分排序:分隔</h4><p>有时候我们不希望对整个数组进行排序，仅仅希望找到数组中第 K 小的<br>值，NumPy 的 np.partition 函数提供了该功能。np.partition 函<br>数的输入是数组和数字 K，输出结果是一个新数组，最左边是第 K 小的<br>值，往右是任意顺序的其他值：</p><pre class=" language-python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>​```请注意，结果数组中前三个值是数组中最小的三个值，剩下的位置是原始数组剩下的值。在这两个分隔区间中，元素都是任意排列的。与排序类似，也可以沿着多维数组任意的轴进行分隔：​```In<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果是一个数组，该数组每一行的前两个元素是该行最小的两个值，每行的其他值分布在剩下的位置。</span><span class="token comment" spellcheck="true">#最后，正如 np.argsort 函数计算的是排序的索引值，也有一个np.argpartition 函数计算的是分隔的索引值，我们将在下一节中举例介绍它。</span></code></pre><p><img src="C:\Users\Scott\AppData\Roaming\Typora\typora-user-images\1571575463728.png" alt="1571575463728"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Nump数组基础&quot;&gt;&lt;a href=&quot;#Nump数组基础&quot; class=&quot;headerlink&quot; title=&quot;Nump数组基础&quot;&gt;&lt;/a&gt;Nump数组基础&lt;/h3&gt;&lt;h4 id=&quot;从头创建数组&quot;&gt;&lt;a href=&quot;#从头创建数组&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kafka快速入门</title>
    <link href="https://www.shiyiri.top/node/5.html"/>
    <id>https://www.shiyiri.top/node/5.html</id>
    <published>2021-04-19T14:46:07.390Z</published>
    <updated>2021-04-19T14:55:38.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​    Kafka是一个==分布式==的基于==发布/订阅模式==的==消息队列==（Message Queue），主要应用于大数据实时处理领域。</p><p>MQ传统应用场景之异步处理</p><p><em>同步处理</em></p><ol><li>填入注册信息</li><li>注册信息写入数据库</li><li>调发发用短信结构</li><li>发送短信</li><li>页面响应注册成功</li></ol><p><em>异步处理</em></p><ol><li>填写注册信息</li><li>注册信息写入数据库</li><li>发送短信的请求写入消息队列 –&gt; MQ</li><li>页面响应注册成功</li></ol><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="使用消息队列的好处"><a href="#使用消息队列的好处" class="headerlink" title="使用消息队列的好处"></a><em>使用消息队列的好处</em></h4><ol><li><p><strong>解耦</strong></p><p> ​    允许你独立的拓展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p></li><li><p><strong>可恢复性</strong></p><p> ​    系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理</p></li><li><p><strong>缓冲</strong></p><p> ​    有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况</p></li><li><p><strong>灵活性&amp;峰值处理能力</strong></p></li><li><p><strong>异步通信</strong></p></li></ol><h4 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a><em>消息队列的两种模式</em></h4><ol><li><p>点对点模式（==一对一==，消费者主动拉取数据，消息收到后消息清除）</p><p> ​    消息生产者发送消息到Queue中，然后消息消费者从Queue中取出并消费消息。消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者一个被消费</p></li><li><p>发布/订阅模式（==一对多==，消费者消费数据之后不会清除消息）</p><p> ​    消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点的方式不同，发布到topic的消息会被所有订阅者消费。</p></li></ol><p>发布/订阅模式模式中又分为</p><p>生产者主动推送消息（生产者将数据推到消费者）</p><p>消费者主题拉去消息（消费者定时询问生产者是否有新数据，有的话就拉取）</p><p>Kafka是后者</p><h3 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h3><p><a href="https://sm.ms/image/cXb2in4ZHsag3Vv" target="_blank"><img src="https://i.loli.net/2020/03/07/cXb2in4ZHsag3Vv.png"></a></p><ol><li>Producer：消息生产者，就是向kafka broker发送消息的客户端；</li><li>Consumer：消息消费者，向kafka broker 取消息的客户端</li><li>Consumer Group (CG)：消费者组，由多个consumer组成。<em>消费者组内每个消费者负责消费不同的分区数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响</em>。所有的消费者都属于某个消费者组，<em>即消费者组是逻辑上的一个订阅者</em></li><li>Broker：一台Kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic</li><li>Topic：可以理解为一个队列，生产者和消费者面向的都是一个topic</li><li>Partition：为了实现拓展性，一个非常大的topic可以分布到多个broker（即服务器上），一个topic可以分为多个partion，每个partion是有个有序的队列</li><li>Replication：副本，为保证集群中的某个节点发生故障时，一个topic的每个分区都有若干个副本，一个leader和若干个follower</li><li>leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader</li><li>follwer：每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follwer会成为新的follwer</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><p>Kafka官网 <a href="https://kafka.apache.org/">https://kafka.apache.org</a></p><p>准备的环境：</p><p>jdk1.8+</p><p>zookeeper</p><p>修改config/server.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># The id of the broker. This must be set to a unique integer for each broker.</span><span class="token comment" spellcheck="true"># 这个id是broker的id，必须设置成唯一的整数</span><span class="token attr-name">broker.id</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true"># A comma separated list of directories under which to store log files</span><span class="token comment" spellcheck="true"># kafka暂存数据的目录</span><span class="token attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/kafka/data</span><span class="token comment" spellcheck="true"># The minimum age of a log file to be eligible for deletion due to age</span><span class="token comment" spellcheck="true"># 数据暂时保存的时间，不用变化</span><span class="token attr-name">log.retention.hours</span><span class="token punctuation">=</span><span class="token attr-value">168</span><span class="token comment" spellcheck="true"># 配置zookeeper集群地址</span><span class="token attr-name">zookeeper.connect</span><span class="token punctuation">=</span><span class="token attr-value">node1:2181,node2:2181,node3:2181</span></code></pre><p>配置好后分发到其他节点，然后==修改其他节点的broker.id==</p><p>节点上启动</p><p><code>kafka-server-start.sh -daemon /usr/local/kafka/config/server.properties</code></p><h3 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h3><h4 id="Topic操作"><a href="#Topic操作" class="headerlink" title="Topic操作"></a>Topic操作</h4><ol><li><p>查看当前服务器中的所有topic</p><pre class=" language-shell"><code class="language-shell">kafka-topics.sh --bootstrap-server node1:9092 --list</code></pre></li><li><p>创建topic</p><pre class=" language-shell"><code class="language-shell">kafka-topics.sh --create --bootstrap-server node1:9092 --topic first --partitions 2 --replication-factor 2</code></pre><p> –create 创建主题</p><p> –bootstrap-server 指定kafka的集群的地址</p><p> –topic 后面接着要创建的名字</p><p> –partitions 指定分区数</p><p> –replication-factor 指定备份数量</p><p> 这里会产生一个first的topic，它有2个分区，那么在–bootstrap-server 所指定的node1中所配置的==log目录中会有first-0和first-1两个文件==，2个备份数量，那么在其他节点中一共==会有2个关于first的备份==，一个first-0一个first-1</p></li><li><p>删除topic</p><pre class=" language-shell"><code class="language-shell">kafka-topics.sh --delete --bootstrap-server node1:9092 --topic first</code></pre></li><li><p>topic详情</p><pre class=" language-shell"><code class="language-shell">kafka-topics.sh --describe --topic first --bootstrap-server node1:9092</code></pre><p> 结果</p><pre class=" language-base"><code class="language-base">Topic:first    PartitionCount:3    ReplicationFactor:1    Configs:segment.bytes=1073741824    Topic: first    Partition: 0    Leader: 1    Replicas: 1    Isr: 1    Topic: first    Partition: 1    Leader: 0    Replicas: 0    Isr: 0    Topic: first    Partition: 2    Leader: 2    Replicas: 2    Isr: 2</code></pre></li></ol><h4 id="控制台操作"><a href="#控制台操作" class="headerlink" title="控制台操作"></a>控制台操作</h4><ol><li><p>生产者</p><pre class=" language-shell"><code class="language-shell">kafka-console-producer.sh --topic first --broker-list node1:9092</code></pre><p> 注意生产者用的是  <em>–broker-list</em>  而不是  <em>–bootstrap-server</em></p></li><li><p>消费者</p><pre class=" language-shell"><code class="language-shell">kafka-console-consumer.sh --topic first --bootstrap-server node1:9092kafka-console-consumer.sh --topic first --bootstrap-server node1:9092 --from-beginning  </code></pre><p> 消费者这里的    <em>–from-beginning</em>     可以从主题的最开始发布的消息订阅，否则只有下一次发布消息才能接受到</p></li></ol><h2 id="Kafka-架构深入"><a href="#Kafka-架构深入" class="headerlink" title="Kafka 架构深入"></a>Kafka 架构深入</h2><h3 id="kafka工作流程及文件存储机制"><a href="#kafka工作流程及文件存储机制" class="headerlink" title="kafka工作流程及文件存储机制"></a>kafka工作流程及文件存储机制</h3><p><img src="https://i.loli.net/2020/03/14/AhMTDYrBLUmJS3w.png" alt="image.png"></p><p>Kafka中的消息是以topic进行费雷的，生产者生产消息，消费者消费消息，都是面向topic的。</p><p>topic是逻辑上的概念，而partition是物理上的概念，每个partion对应于一个log文件，该log文件中存储的就是producer生产的数据。producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者都会实时记录自己消费到了哪个offset，以便出错恢复时，从上次的位置继续消费。</p><p>文件存储机制</p><p><img src="https://i.loli.net/2020/03/14/2UjubtY3cDXzJw4.png" alt="image.png"></p><p>​        由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了分片和索引机制，将每个partition分为多个segment。每个segment对应两个文件–“.index”文件和”.log“文件。</p><h3 id="Kafka生产者"><a href="#Kafka生产者" class="headerlink" title="Kafka生产者"></a>Kafka生产者</h3><h4 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h4><ol><li><p>分区的原因</p><ol><li>方便在集群中拓展：每个Partition可以调整以适应它所在的机器，而一个topic又可以有多个partition组成，因此整个集群就可以适应任意大小的数据了；</li><li>可以提高并发，因为可以以partition为单位读写了</li></ol></li><li><p>分区的原因</p><p> 我们需要将producer发送的数据封装成一个ProducerRecord对象。</p><p> <img src="https://i.loli.net/2020/03/14/Xl2KaiPMu47sSN5.png" alt="image.png"></p><ol><li>指明partition的情况下，直接将指明的值作为partition的值</li><li>没有指明partition的值但又key的情况下，将key的hash值于topic的partition值进行取余得到partition值</li><li>即没有partition值又没有key的值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），这个值与topic可用的partition总数取余得到partition值，也就时常说的round-robin算法</li></ol></li></ol><h4 id="数据可靠性保证"><a href="#数据可靠性保证" class="headerlink" title="数据可靠性保证"></a>数据可靠性保证</h4><p>​    为保证producer发送的数据，能可靠的发送到指定的topic，topic每个partition收到producer发送的数据后，都需要向producer发送ack（acknowledgement 确认收到），如果producer收到ack，就会进行下一轮的发送，否则重新发送数据</p><p><img src="https://i.loli.net/2020/03/14/M36umqWldUTDIFb.png" alt="image.png"></p><ol><li><p>副本数据同步策略</p><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>半数以上完成同步，就发送ack</td><td>延迟低</td><td>选举新的leader时，容忍n台节点的故障，需要2n+1个副本</td></tr><tr><td>全部完成同步，才发送ack</td><td>选举新的leader时，容忍n台节点的故障，需要n+1个副本</td><td>延迟高</td></tr></tbody></table> <hr></li><li><p>ISR</p><p> ​    采用第二种方案之后，设想以下情景：leader收到数据，所有follower都开始同步数据，但有一个follower，因为某种故障，迟迟不能与leader同步，那leader就要一直等下去，直到它完成同步，才能发送ack。这个问题怎么解决呢？</p><p> ​    Leader维护了一个动态的==in-sync replica set（ISR）==同步副本，意为和leader保持同步的follower集合。当ISR中的follower完成数据同步之后，leader就会给follower发送ack。如果follower长时间为向leader同步数据，则该follower将被踢出ISR，该时间阈值由replica.lag.time.max.ms 参数设定。leader发生故障之后，就会从ISR中选举新的leader</p> <hr></li><li><p>ack应答机制</p><p> ​    对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接受成功。</p><p> ​    所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下配置：</p><p> acks参数配置：</p><p> ​    acks：</p><p> ​    0：producer不等待broker的ack，这一操作提供了一个最低的延迟，broker已接受到还没有写入磁盘就已经返回，当broker故障时有可能丢失数据；</p><p> ​    1：producer等待broker的ack，partition的leader落盘成功后放回ack，如果在follwer同步成功之前leader故障，那么将会丢失数据；</p><p> ​    -1（all）：producer等待broker的ack，partition的leader和follower全部落盘成功后才会返回ack，但是如果在follower同步完成后，broker发送ack之前，leader发送故障，那么会造成数据重复</p> <hr></li><li><p>故障处理细节</p><p> <img src="https://i.loli.net/2020/03/14/k6qvDCS3p4cKnbA.png" alt="image.png"></p><p> LEO：指的时每个副本的最大offset</p><p> HW：指的时消费者能见到的最大offset，ISR队列中最小的LEO</p><ol><li><p>follower 故障</p><p> ​    follower发送故障后会被临时提出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次HW，并将log文件高于HW的部分截取掉，从HW开始将leader进行同步。等待该follower的LEO大于等于该partition的HW，即follower追上leader之后，就可以重新加入ISR了</p></li><li><p>leader 故障</p><p> ​    leader发送故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。</p><p> ==注意：这只能保证副本之间的数据一致性，并不能保证，数据不丢失或者不重复==</p></li></ol></li></ol><h4 id="Exactly-Once-语义"><a href="#Exactly-Once-语义" class="headerlink" title="Exactly Once 语义"></a>Exactly Once 语义</h4><p>将服务器的ACK级别设置为-1，可以保证Producer到Server之间不会丢失数据，即At least once 语义。相对的将服务器ack级别设置为0，可以保证生产者每条消息只会被发送一次，即At most once 语义</p><p>​    at least once 可以保证数据不丢失，但是不能保证数据不重复</p><p>​    at most once 可以保证数据不重复，但是不能保证数据不丢失</p><p>0.11kafka版本引入一项重大特性：幂等性。所谓幂等性就是Producer不论向server发送多少重复数据，Server端都只会持久化一条。</p><p>​    Exactly once 即是，即不重复也不冲突</p><p>​    At least once + 幂等性 = Exactly once</p><p>要启用幂等性，只需要将Producer的参数中enable.idompotence设置为true。</p><h3 id="Kafka消费者"><a href="#Kafka消费者" class="headerlink" title="Kafka消费者"></a>Kafka消费者</h3><h4 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h4><p>​    consumer采用pull（拉）模式从broker中读取数据</p><p>​    pull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这个时长即为timeout</p><h4 id="分区分配策略"><a href="#分区分配策略" class="headerlink" title="分区分配策略"></a>分区分配策略</h4><p>​    一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及partition的分配问题，即缺点哪个partition由哪个consumer来消费</p><p><strong>Kafka由两种分配策略</strong></p><pre><code>      1. RoundRobin            2. Range</code></pre><h5 id="RoundRobin"><a href="#RoundRobin" class="headerlink" title="RoundRobin"></a>RoundRobin</h5><p><img src="https://i.loli.net/2020/03/14/W4thI97LAS6rQpU.png" alt="image.png"><img src="https://i.loli.net/2020/03/14/T7SLAjEMzJ9UKP1.png" alt="image.png"></p><p>使用这种分配策略必须保证消费者组内所有consumer订阅的主题是一样的</p><h5 id="Range（默认"><a href="#Range（默认" class="headerlink" title="Range（默认)"></a>Range（默认)</h5><p><img src="https://i.loli.net/2020/03/14/LzPAyuVdtq4KhMZ.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/03/14/OUSCrXQljt2h9Zi.png" alt="image.png"></p><p>使用这种策略可能会导致消费者获得的数据差距大的问题</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="Producer-API"><a href="#Producer-API" class="headerlink" title="Producer API"></a>Producer API</h3><h4 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h4><p>​    Kafka的Producer发送消息采用的是异步发送的方式。再消息发送的过程中，涉及到了两个线程–<em>main线程和Sender线程</em>，以急一个线程共享变量–RecordAccumulator。mian线程将消息发送给RecordAccmulator，Sender线程不断从RecordAccumulator中拉去消息发送到Kafka broker。</p><p><img src="C:\Users\Zanytta\AppData\Roaming\Typora\typora-user-images\1585013353797.png" alt="1585013353797"></p><p>相关参数</p><p>batch.size 只有数据累计到batch.size之后，sender才会发送数据</p><p>linger.ms 如果数据迟迟未到batch.size ，sender等待linger.time之后就会发送数据</p><h4 id="异步发送API"><a href="#异步发送API" class="headerlink" title="异步发送API"></a>异步发送API</h4><ol><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kafka-clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写代码</p><p> 需要用到的类：</p><p> KafkaProducer：需要创建一个生产者对象，用来发送数据</p><p> ProducerConfig：获取所需的一系列配置参数</p><p> ProducerRecord：每条数据都要封装成一个ProducerRecord对象</p></li></ol><p>普通生产者</p><p>代码示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>djb<span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Kafka生产者的配置信息</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定连接的kafka集群</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span><span class="token string">"node1:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ack应答级别</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"acks"</span><span class="token punctuation">,</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重试次数</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"retries"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//批次大小</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"batch.size"</span><span class="token punctuation">,</span><span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待时间</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"linger.ms"</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//RecordAccumulator缓冲区大小</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"buffer.memory"</span><span class="token punctuation">,</span><span class="token number">33554432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Key,value 的序列化类</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建生产者对象</span>        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"love"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭资源</span>        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Thread.sleep(10000);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>带回调函数的send</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>djb<span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallBackProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span><span class="token string">"node1:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> producer <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">,</span> <span class="token string">"wo ai ni "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>                    <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata recordMetadata<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>recordMetadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>recordMetadata<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*for (int i = 0;i &lt; 10;i++){            producer.send(new ProducerRecord&lt;String, String>("second",0,"djb ", "wo ai ni " + i)                    , new Callback() {                        public void onCompletion(RecordMetadata recordMetadata, Exception e) {                            if (e == null){                                System.out.println(recordMetadata.partition()+"----"+recordMetadata.offset());                            }                        }                    });        }*/</span>        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="自定义分区"><a href="#自定义分区" class="headerlink" title="自定义分区"></a>自定义分区</h4><p>实现Partitioner类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>djb<span class="token punctuation">.</span>partitioner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>Partitioner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Cluster<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Object o<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> Object o1<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1<span class="token punctuation">,</span> Cluster cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如何使用</p><pre class=" language-java"><code class="language-java">properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>PARTITIONER_CLASS_CONFIG<span class="token punctuation">,</span>MyPartitioner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在properties中设置</p><h3 id="Consumer-API"><a href="#Consumer-API" class="headerlink" title="Consumer API"></a>Consumer API</h3><p>同样是写入配置信息，然后订阅topic</p><p>不同的是</p><ol><li>需要指定消费者组，在命令行模式中是给了默认的分组，但是在代码中需要我们自己指定，结合之前对消费者组的概念学习，理解下面代码</li><li>需要指定自动提交，否则需要手动提交，下次原来的offset重新拉取数据</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>djb<span class="token punctuation">.</span>consumer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecord<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecords<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>KafkaConsumer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//消费者配置信息</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接的kafka集群</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span><span class="token string">"node1:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启自动提交offset</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自动提交的延迟</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>AUTO_COMMIT_INTERVAL_MS_CONFIG<span class="token punctuation">,</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//key，value的反序列化</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消费者组</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span><span class="token string">"bigdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建消费者</span>        KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅主题;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> poll <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> consumerRecord <span class="token operator">:</span> poll<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>consumerRecord<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="重置offset"><a href="#重置offset" class="headerlink" title="重置offset"></a>重置offset</h4><p>命令行使用 –from-beginning</p><p>默认 latest (最新的信息)</p><p>可选 earliest (所有信息)</p><p>获得所有信息要满足下面2个条件其一</p><ol><li>在一个新的消费组，并使用earliest参数</li><li>在kafka临时保存信息过期后，并使用earliest参数</li></ol><p>设置如下：</p><pre class=" language-java"><code class="language-java">properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>AUTO_OFFSET_RESET_CONFIG<span class="token punctuation">,</span><span class="token string">"earliest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="提交offset"><a href="#提交offset" class="headerlink" title="提交offset"></a>提交offset</h4><h5 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h5><p>只需要在参数中设置自动提交开启和提交时间间隔</p><p>参数如下</p><pre><code>//开启自动提交offsetproperties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);//自动提交的延迟properties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,"1000");</code></pre><p>从上面参数我们可以知道，自动提交时基于时间提交的，难以把握offset提交的时机。</p><h5 id="手动提交"><a href="#手动提交" class="headerlink" title="手动提交"></a>手动提交</h5><p>手动提交有两种：</p><ol><li>commitSync(同步提交)</li><li>commitAsync(异步提交)</li></ol><p>相同点：</p><ol><li>都会将本次poll的一批数据最高的偏移量提交</li></ol><p>不同点：</p><ol><li>commitSync，阻塞当前线程，一直到提交成功，并且会自动失败尝试</li><li>commitAsync，则没有失败重试机制，有可能提交失败</li></ol><p>两种的提交方式</p><pre><code>//同步提交consumer.commitSync();//异步提交consumer.commitAsync()</code></pre><h3 id="自定义拦截器（Interceptor）"><a href="#自定义拦截器（Interceptor）" class="headerlink" title="自定义拦截器（Interceptor）"></a>自定义拦截器（Interceptor）</h3><h4 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h4><p>Interceptor的事项接口是org.apache.kafka.clients.producer.ProducerInterceptor</p><p>其中的方法包括：</p><ol><li><p>configure(configs)</p><p> 获取配置信息和初始化数据时调用</p></li><li><p>onSend(ProducerRecord)</p><p> 该方法装进KafkaProducer.send方法中，即它运行在用户主线程中。Producer确保在消息被序列化以及计算分区前调用该方法。用户可以在该方法中对消息做任何操作，但最好保证不要修改消息所属的topic和分区，否则会影响目标分区的计算</p></li><li><p>onAcknowledgement(RecordMetadata,Exception)</p><p> 该方法会在消息中从RecordAccumulator成功发送KafkaBroker之后，或者发送过程中失败时调用。并且通常都是在Producer回调逻辑触发之前。onAcknowledgement运行在producer的IO线程中，因此不要再该方法中放入很重的逻辑，否则会拖慢producer的消息发送效率</p></li><li><p>close</p><p> 关闭Interceptor</p></li></ol><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><em>需求</em>：实现一个简单的双interceptor组成的拦截链。第一个interceptor会在发送前将时间戳信息加到消息value的最前部；第二个interceptor会再消息发送后更新成功发送消息数或失败发送消息数</p><p><img src="C:\Users\Zanytta\AppData\Roaming\Typora\typora-user-images\1585038205531.png" alt="1585038205531"></p><p>代码示例：</p><p>TimeInterceptor.class</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>djb<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>RecordMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerInterceptor</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">onSend</span><span class="token punctuation">(</span>ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAcknowledgement</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>CounterInterceptor.class</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>djb<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>RecordMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CounterInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerInterceptor</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> error<span class="token punctuation">;</span>    <span class="token keyword">int</span> success<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">onSend</span><span class="token punctuation">(</span>ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> record<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAcknowledgement</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            success<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            error<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"success:"</span><span class="token operator">+</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token operator">+</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>main</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>djb<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span><span class="token string">"node1:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加拦截器</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>INTERCEPTOR_CLASSES_CONFIG<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>TimeInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>CounterInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"djb "</span><span class="token punctuation">,</span> <span class="token string">"wo ai ni "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>                    <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata recordMetadata<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>recordMetadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>recordMetadata<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Eagle监控"><a href="#Eagle监控" class="headerlink" title="Eagle监控"></a>Eagle监控</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官网下载地址</p><p><a href="http://download.kafka-eagle.org/">http://download.kafka-eagle.org/</a></p><p>解压：</p><pre><code>tar -zxvf /software/kafka-eagle-bin-1.4.5.tar.gz -C /usr/local</code></pre><p>解压后里面还有个tar.gz文件，需要再解压</p><pre><code>tar -zxvf kafka-eagle-web-1.4.5-bin.tar.gz -C /usr/local</code></pre><p>改名：</p><pre><code>mv kafka-eagle-web-1.4.5/ eagle</code></pre><p>环境变量(/etc/profile)</p><pre><code>export KE_HOME=/usr/local/eagleexport PATH=$PATH:$KE_HOME/bin</code></pre><p>修改eagle/bin下的sh脚本权限,没有执行权限，给它加一个</p><pre><code>chmod +x ke.sh</code></pre><p>修改eagle/conf下的properties配置文件</p><p>可以设置多套zookeeper集群，我只有一套，所以把cluster2删掉</p><p>offset保存位置有两个选项一个是kafka，一个是zookeeper，老版本用zookeeper，这里我们把cluster2删掉</p><p>metrics.charts是否显示图标，默认false，我们让他显示</p><p>修改数据库连接，我的虚拟机没有装mysql，所以我直接连接的我windows的数据库（我可太机智了）</p><pre><code>kafka.eagle.zk.cluster.alias=cluster1cluster1.zk.list=node1:2181,node2:2181,node3:2181cluster1.kafka.eagle.offset.storage=kafkakafka.eagle.metrics.charts=truekafka.eagle.driver=com.mysql.jdbc.Driverkafka.eagle.url=jdbc:mysql://192.168.1.114:3306/kekafka.eagle.username=rootkafka.eagle.password=123</code></pre><p>搞定之后启动</p><p>ke.sh start</p><p>会出现访问的链接，和账号密码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;​    Kafka是一个==分布式==的基于==发布/订阅模式==的==消息队列==（Message Queue），主要应用于大数据实时处</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hive笔记</title>
    <link href="https://www.shiyiri.top/node/4.html"/>
    <id>https://www.shiyiri.top/node/4.html</id>
    <published>2021-04-19T14:45:51.834Z</published>
    <updated>2021-04-19T14:55:40.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hive笔记"><a href="#Hive笔记" class="headerlink" title="Hive笔记"></a>Hive笔记</h1><h2 id="第一章-Hive数据类型"><a href="#第一章-Hive数据类型" class="headerlink" title="第一章 Hive数据类型"></a>第一章 Hive数据类型</h2><h3 id="1-STRUCT类型的定义与指定分隔符"><a href="#1-STRUCT类型的定义与指定分隔符" class="headerlink" title="1.STRUCT类型的定义与指定分隔符"></a>1.STRUCT类型的定义与指定分隔符</h3><pre class=" language-sql"><code class="language-sql">info struct<span class="token operator">&lt;</span>name:string<span class="token punctuation">,</span>sex:string<span class="token punctuation">,</span>age:<span class="token keyword">int</span><span class="token operator">></span>collection items <span class="token keyword">terminated by</span> <span class="token string">'集合数据项分隔符'</span><span class="token punctuation">;</span></code></pre><h3 id="2-MAP类型的定义与指定分隔符"><a href="#2-MAP类型的定义与指定分隔符" class="headerlink" title="2.MAP类型的定义与指定分隔符"></a>2.MAP类型的定义与指定分隔符</h3><pre class=" language-sql"><code class="language-sql">perf map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>collection items <span class="token keyword">terminated by</span> <span class="token string">'集合数据项分隔符'</span> map <span class="token keyword">keys</span> <span class="token keyword">terminated by</span> <span class="token string">'键值对分隔符'</span></code></pre><h3 id="3-ARRAY类型的定义与指定分隔符"><a href="#3-ARRAY类型的定义与指定分隔符" class="headerlink" title="3.ARRAY类型的定义与指定分隔符"></a>3.ARRAY类型的定义与指定分隔符</h3><pre class=" language-sql"><code class="language-sql">emp_id_list array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>collection items terminate <span class="token keyword">by</span> <span class="token string">'集合数据项分隔符'</span></code></pre><table><thead><tr><th>数据类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>STRUCT</td><td>一组命名字段，字段类型可以不同，可以通过’点‘符号访问元素内容。</td><td>Struct(‘john’,’doe’)</td></tr><tr><td>MAP</td><td>Map是一组键-值对元素集合。键的类型必须是原子的。</td><td>Map(‘a’,1,’b’,2)</td></tr><tr><td>ARRAY</td><td>数组是一组具有相同类型和名称的变量的集合。这些变量成为数组的元素，每组元素都有一个编号，编号从零开始。</td><td>Array(‘john’,’doe’)</td></tr></tbody></table><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201019110909279.png" alt="image-20201019110909279"></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/23d6178eea66b6979d912b09a5101ead.png" alt="img"></p><h2 id="第二章-数据定义与操作"><a href="#第二章-数据定义与操作" class="headerlink" title="第二章 数据定义与操作"></a>第二章 数据定义与操作</h2><h3 id="2-1-数据定义语言"><a href="#2-1-数据定义语言" class="headerlink" title="2.1 数据定义语言"></a>2.1 数据定义语言</h3><p>####2.1.1 数据库操作</p><p>#####1.创建数据库</p><ul><li>创建数据库：create database ‘数据库名’;</li><li>创建数据库并增加描述信息：create database ‘数据库名’ comment ‘描述信息’;</li><li>创建数据库并指定位置：create database ‘数据库名’ location ‘数据库位置’;</li><li>创建数据库并增加其他信息：create database ‘数据库名’ with dbproperties(‘键’=值);</li></ul><h5 id="2-修改数据库"><a href="#2-修改数据库" class="headerlink" title="2.修改数据库"></a>2.修改数据库</h5><ul><li>alter database 数据库名 set dbproperties(‘creator’=’xxx’,’data’=’xxxx-xx-xx’);</li></ul><h5 id="3-删除数据库"><a href="#3-删除数据库" class="headerlink" title="3.删除数据库"></a>3.删除数据库</h5><ul><li>删除空数据库<ul><li>drop database 数据库名;</li></ul></li><li>删除非空数据库<ul><li>drop database 数据库名 cascade;</li></ul></li></ul><p>####2.1.2 表操作</p><h5 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h5><pre><code>create table 数据库名.表名(字段1 类型 comment '字段描述信息',字段2 类型 comment '字段描述信息')row format delimited fields terminated by '字符分隔符'comment '表描述信息'location '表位置';</code></pre><ul><li>拷贝已经存在的表<ul><li>create table 表名 like 表名2;</li></ul></li></ul><h5 id="2-查看表"><a href="#2-查看表" class="headerlink" title="2.查看表"></a>2.查看表</h5><ul><li><p>查看所有表</p><ul><li>show tables;</li></ul></li><li><p>使用正则过滤出需要的表名</p><ul><li>show tables emp.*;</li></ul></li><li><p>查看表的详细结构信息</p><ul><li>desc 表名;</li></ul></li><li><p>查看表的位置 </p><ul><li>desc extended 表名</li></ul></li></ul><h5 id="3-创建外部表"><a href="#3-创建外部表" class="headerlink" title="3.创建外部表"></a>3.创建外部表</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> external <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段 类型<span class="token punctuation">,</span>字段 类型<span class="token punctuation">)</span><span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'字段分隔符'</span> <span class="token punctuation">[</span>location <span class="token string">'文件位置'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h5 id="4-修改表"><a href="#4-修改表" class="headerlink" title="4.修改表"></a>4.修改表</h5><ul><li>表重命名<ul><li>alter table 表名 rename to 新表名;</li></ul></li><li>新增列信息<ul><li>alter table 表名 add columns(字段 类型 [,字段 类型]);</li></ul></li><li>修改类名、类型<ul><li>alter table 表名 change column 原列名 新列名 类型;</li></ul></li></ul><h5 id="5-删除表"><a href="#5-删除表" class="headerlink" title="5.删除表"></a>5.删除表</h5><ul><li>drop table 表名</li><li>清空表数据<ul><li>truncate table 表名; (外部表不行)</li></ul></li></ul><h3 id="2-2-分区表"><a href="#2-2-分区表" class="headerlink" title="2.2 分区表"></a>2.2 分区表</h3><h4 id="2-2-1-静态分区表"><a href="#2-2-1-静态分区表" class="headerlink" title="2.2.1 静态分区表"></a>2.2.1 静态分区表</h4><h5 id="1-创建静态分区表"><a href="#1-创建静态分区表" class="headerlink" title="1.创建静态分区表"></a>1.创建静态分区表</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段 类型<span class="token punctuation">[</span><span class="token punctuation">,</span>字段 类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>partitioned <span class="token keyword">by</span><span class="token punctuation">(</span>分区字段 字段类型<span class="token punctuation">[</span><span class="token punctuation">,</span>分区字段 字段类型<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'字段分隔符'</span><span class="token punctuation">;</span></code></pre><ul><li>向分区表加载数据：<ul><li>load data local inpath ‘文件位置’ into table 表名 partition(分区字段=值[,分区字段=值]);</li></ul></li></ul><blockquote><ol><li>查看数据：select * from 表名;</li><li>查看分区：show partitions 表名;</li><li>查看hdfs分布式文件系统，看到可以反映区结构的子目录<ul><li>hdfs shell 命令查看</li><li>walker:50070 浏览器查看文件系统</li></ul></li></ol></blockquote><h4 id="2-2-2-动态分区表"><a href="#2-2-2-动态分区表" class="headerlink" title="2.2.2 动态分区表"></a>2.2.2 动态分区表</h4><blockquote><p>创建分区表，要先打开允许分区列是动态的。</p><p>set hive.exec.dynamic.partition=true;</p><p>set hive.exec.dynamic.partition=nonstrict;</p><p>set hive.exec.max.dynamic.partitions.pernode=1000;</p><p>set hive.mapred.mode=nonstrict;</p></blockquote><h5 id="1-写入数据到动态分区表"><a href="#1-写入数据到动态分区表" class="headerlink" title="1.写入数据到动态分区表"></a>1.写入数据到动态分区表</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> 表名 <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段<span class="token punctuation">[</span><span class="token punctuation">,</span>分区字段<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><h5 id="2-修改分区"><a href="#2-修改分区" class="headerlink" title="2.修改分区"></a>2.修改分区</h5><ul><li>增加分区<ul><li>alter table 表名 add partition(分区字段=值[,分区字段=值]) location ‘数据位置’;</li></ul></li><li>修改分区的路径<ul><li>alter table 表名 partition(字段=值[,字段=值]) set location ‘数据位置’;</li></ul></li><li>删除某个分区的路径<ul><li>alter table 表名 drop partition(字段=值[,字段=值]);</li></ul></li></ul><p>###2.3 数据操作语言</p><h4 id="2-3-1-insert语句"><a href="#2-3-1-insert语句" class="headerlink" title="2.3.1 insert语句"></a>2.3.1 insert语句</h4><ul><li>向表中插入数据<ul><li>insert overwrite table 表名 select */字段 from 表名2[where 语句];</li></ul></li><li>向分区表插入数据<ul><li>insert overwrite table 表名 partition(分区字段=值[,分区字段2=值2]) select * from 表名2[where语句];</li></ul></li><li>动态分区数据插入<ul><li>insert overwrite table 表名 partition(分区字段1[,分区字段2…]) select 字段1[,字段2…] from 表名;</li></ul></li><li>混合使用动态分区和静态分区数据插入<ul><li>insert overwrite table 表名 partition(分区字段=值[,分区字段2…]) select 字段1[字段2…] from 表名;</li></ul></li></ul><h4 id="2-3-2-创建备份表并向其加载数据"><a href="#2-3-2-创建备份表并向其加载数据" class="headerlink" title="2.3.2 创建备份表并向其加载数据"></a>2.3.2 创建备份表并向其加载数据</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token operator">/</span>字段 <span class="token keyword">from</span> 表名<span class="token number">2</span><span class="token punctuation">;</span></code></pre><h4 id="2-3-3-数据的导入与导出"><a href="#2-3-3-数据的导入与导出" class="headerlink" title="2.3.3 数据的导入与导出"></a>2.3.3 数据的导入与导出</h4><ul><li>导入<ul><li>dfs -put 本地数据文件 hdfs 目录;</li></ul></li><li>导出<ul><li>insert overwrite local directory ‘本地文件位置’ select */字段 from 表名 where 语句;</li><li>dfs -get hdfs数据文件 本地目录;</li></ul></li></ul><h3 id="2-4-分桶表操作"><a href="#2-4-分桶表操作" class="headerlink" title="2.4 分桶表操作"></a>2.4 分桶表操作</h3><ul><li><p>分桶，就是将数据按照指定的字段进行划分到多个文件当中去，==分桶就是MapReduce中的分区==。必须配合内部表或外部表一起使用。</p></li><li><p>好处：避免单个表文件数据过大的问题。</p></li><li><p>开启 Hive 的分桶功能：</p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>enforce<span class="token punctuation">.</span>bucketing<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><ul><li>设置 Reduce 个数：</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reduces<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></code></pre><ul><li>创建分桶表</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> course<span class="token punctuation">(</span>c_id string<span class="token punctuation">,</span>c_name string<span class="token punctuation">,</span>t_id string<span class="token punctuation">)</span> <span class="token keyword">clustered</span> <span class="token keyword">by</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token number">3</span> buckets <span class="token keyword">row</span> format delimited <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span></code></pre><blockquote><p>分桶表的数据加载，由于通标的数据加载通过 hdfs dfs -put 文件 或者通过 load data 均不好使，只能通过 insert overwrite</p><p>创建普通表，并通过 insert overwrite 的方式将普通表的数据同构查询的方式加载到桶表当中去。</p></blockquote><ul><li>创建普通表</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> course_common<span class="token punctuation">(</span>c_string<span class="token punctuation">,</span>c_name string<span class="token punctuation">,</span>t_id string<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span></code></pre><ul><li>普通表中加载数据</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'/root/hivedata/course_txt'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> course_common<span class="token punctuation">;</span></code></pre><ul><li>通过 insert overwrite 给桶表中加载数据</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> course <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course_common cluster <span class="token keyword">by</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5-Hive查询语法"><a href="#2-5-Hive查询语法" class="headerlink" title="2.5 Hive查询语法"></a>2.5 Hive查询语法</h3><h4 id="2-5-1-SELECT"><a href="#2-5-1-SELECT" class="headerlink" title="2.5.1 SELECT"></a>2.5.1 SELECT</h4><pre class=" language-SQL"><code class="language-SQL">select [all | distinct] select_expr,select_expr,...from table_reference[where where_condition][group by col_list [having condition]][cluster by col_list | [distribute by col_list] | [order by col_list]][limit number]</code></pre><ol><li>order by 会对输入做全局排序，因此只有一个 reducer，会导致输入规模较大时，需要较长的计算时间。</li><li>sort by 不是全局排序，其在数据进入 reducer 前完成排序。因此，如果用 sort by 进行排序，并且设置 mapred.reduce.tasks&gt;1,则 sort by 只保证每个 reducer 的输出有序，不保证全局有序。</li><li>distribute by 根据指定的字段将数据分到不同的 reducer，且分发算法是 hash 散列。</li><li>cluster by 除了具有 distribute by 的功能外，还会对该字段进行排序。</li></ol><p>因此，如果 distribute 和 sort 字段是同一个时，此时，==cluster by = distribute by + sort by==</p><p>####2.5.2 常用函数</p><ul><li>求总行数（count）</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><ul><li>求分数的最大值（max）</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><ul><li>求分数的最小值（min）</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><ul><li>求分数的总和（sum）</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><ul><li>求分数的平均值（avg）</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ave<span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><h4 id="2-5-3-LIMIT"><a href="#2-5-3-LIMIT" class="headerlink" title="2.5.3 LIMIT"></a>2.5.3 LIMIT</h4><p>典型的查询会返回多行数据。limit子句用于限制返回的行数。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h4 id="2-5-4-WHERE"><a href="#2-5-4-WHERE" class="headerlink" title="2.5.4 WHERE"></a>2.5.4 WHERE</h4><pre class=" language-SQL"><code class="language-SQL">select * from 表名 where ...;</code></pre><h4 id="2-5-5-LIKE-和-RLIKE"><a href="#2-5-5-LIKE-和-RLIKE" class="headerlink" title="2.5.5 LIKE 和 RLIKE"></a>2.5.5 LIKE 和 RLIKE</h4><ol><li>使用like运算选择类似的值。</li><li>选择条件可以包含字符或数字。</li><li>RLIKE 子句是 Hive 中这个功能的一个扩展，其可以通过Java的正则表达式这个更强大的语言来指定匹配条件。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token operator">%</span> 代表零个或多个字符（任意字符）_ 代表一个字符</code></pre><h4 id="2-5-6-逻辑运算符"><a href="#2-5-6-逻辑运算符" class="headerlink" title="2.5.6 逻辑运算符"></a>2.5.6 逻辑运算符</h4><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>AND</td><td>逻辑并</td></tr><tr><td>OR</td><td>逻辑或</td></tr><tr><td>NOT</td><td>逻辑否</td></tr></tbody></table><h4 id="2-5-7-分组"><a href="#2-5-7-分组" class="headerlink" title="2.5.7 分组"></a>2.5.7 分组</h4><p><strong>GROUP BY 语句</strong></p><blockquote><p>查看字段必须是分组字段</p></blockquote><ul><li>计算每个学生的平均分数</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> tableName <span class="token keyword">group</span> <span class="token keyword">by</span> s_id<span class="token punctuation">;</span></code></pre><ul><li>计算每个学生最高成绩</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> tableName <span class="token keyword">group</span> <span class="token keyword">by</span> s_id<span class="token punctuation">;</span></code></pre><h4 id="2-5-8-HIVING语句"><a href="#2-5-8-HIVING语句" class="headerlink" title="2.5.8 HIVING语句"></a>2.5.8 HIVING语句</h4><ol><li><p>hiving与where不同点</p><ol><li>where针对表中的列发挥作用，查询数据；hiving针对查询结果中的列发挥作用，筛选数据。</li><li>where后面不能写分组函数，而having后面可以使用分组函数。</li><li>hiving只用于group by分组统计语句。</li></ol></li><li><p>案例实操：</p><ul><li>求平均分大于八十五的学生</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> avg_score <span class="token keyword">from</span> tableName <span class="token keyword">group</span> <span class="token keyword">by</span> s_id <span class="token keyword">having</span> avg_score <span class="token operator">></span> <span class="token number">85</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="2-5-9-JOIN-语句"><a href="#2-5-9-JOIN-语句" class="headerlink" title="2.5.9 JOIN 语句"></a>2.5.9 JOIN 语句</h4><p>hive支持通常的SQL   JOIN语句，但是只支持等值连接，不支持非等值连接<br>案例操作：</p><ul><li>查询分数对应的姓名</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>s_birth <span class="token keyword">from</span> score s <span class="token keyword">join</span> student stu <span class="token keyword">on</span> s<span class="token punctuation">.</span>s_id <span class="token operator">=</span> stu<span class="token punctuation">.</span>s_id<span class="token punctuation">;</span></code></pre><ul><li>合并老师与课程表</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">join</span> course <span class="token number">c</span> <span class="token keyword">on</span> t<span class="token punctuation">.</span>t_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>t_id<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql">内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。<span class="token keyword">select</span> <span class="token operator">*</span> form teacher t <span class="token keyword">inner</span> <span class="token keyword">join</span> course <span class="token number">c</span> <span class="token keyword">on</span> t<span class="token punctuation">.</span>t_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>t_id<span class="token punctuation">;</span>左外连接：<span class="token keyword">join</span>操作符左边表中符合<span class="token keyword">WHERE</span>子句的所有记录将会被返回。<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">left</span> <span class="token keyword">join</span> course <span class="token number">c</span> <span class="token keyword">on</span> t<span class="token punctuation">.</span>t_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>t_id<span class="token punctuation">;</span>右外连接：<span class="token keyword">join</span>操作符右边表符合<span class="token keyword">WHERE</span>子句的所有记录将会被返回。<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">right</span> <span class="token keyword">join</span> corese <span class="token number">c</span> <span class="token keyword">on</span> t<span class="token punctuation">.</span>t_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>t_id<span class="token punctuation">;</span>多表连接：连接n个表，至少需要n<span class="token number">-1</span>个连接条件。<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t<span class="token keyword">left</span> <span class="token keyword">join</span> course <span class="token number">c</span><span class="token keyword">on</span> t<span class="token punctuation">.</span>t_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>t_id<span class="token keyword">left</span> <span class="token keyword">join</span> score s<span class="token keyword">on</span> s<span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>c_id<span class="token keyword">left</span> <span class="token keyword">join</span> student stu<span class="token keyword">on</span> s<span class="token punctuation">.</span>s_id <span class="token operator">=</span> stu<span class="token punctuation">.</span>s_id<span class="token punctuation">;</span></code></pre><h4 id="2-5-10-排序"><a href="#2-5-10-排序" class="headerlink" title="2.5.10 排序"></a>2.5.10 排序</h4><p><strong>全局排序</strong></p><p>order by：全局排序，一个reduce</p><ol><li><p>使用 ORDER B Y子句排序 ASC:升序，DESC:降序</p></li><li><p>ORDER BY 子句在 SELECT 语句的结尾。</p></li><li><p>案例实操</p><ol><li>查询学生的成绩，并按照分数降序（升序）排列</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">left</span> <span class="token keyword">join</span> score sco <span class="token keyword">on</span> s<span class="token punctuation">.</span>s_id <span class="token operator">=</span> sco<span class="token punctuation">.</span>s_id <span class="token keyword">order</span> <span class="token keyword">by</span> sco<span class="token punctuation">.</span>s_score <span class="token keyword">desc</span><span class="token punctuation">(</span><span class="token keyword">asc</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>按照别名排序</strong></p><ul><li>按照分数的平均值排序</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> avg <span class="token keyword">from</span> score <span class="token keyword">group</span> <span class="token keyword">by</span> s_id <span class="token keyword">order</span> <span class="token keyword">by</span> avg<span class="token punctuation">;</span></code></pre><p><strong>多个列排序</strong></p><ul><li>按照学生id和平均成绩进行排序</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> avg <span class="token keyword">from</span> score <span class="token keyword">group</span> <span class="token keyword">by</span> s_id <span class="token keyword">order</span> <span class="token keyword">by</span> s_id<span class="token punctuation">,</span>avg<span class="token punctuation">;</span></code></pre><p><strong>每个MapReduce内部排序（sort by）局部排序</strong></p><p>sort by：每个MapReduce内部进行排序，对全局结果集来说不是排序。</p><ol><li>设置reduce个数</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reduces<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>查看设置reduce个数</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reduces<span class="token punctuation">;</span></code></pre><p><strong>分区排序（DISTRIBUTE BY）</strong></p><p>distribute by：类似MR中partititon，进行分区，结合sort by使用。</p><p>注意，Hive要求distribute by语句要写在sort by语句之前。</p><p>对于distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果。</p><p>案例实操：先按照学生id进行分区，再按照学生成绩进行排序。</p><ol><li>设置reduce的个数，将我们对应的s_id划分到对应的reduce当中去</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reduces<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>通过distribute by进行数据的分区</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">local</span> directory <span class="token string">'export/servers/hivedatas/sort'</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> score distribute <span class="token keyword">by</span> spid sort <span class="token keyword">by</span> s_score<span class="token punctuation">;</span></code></pre><p>##第三章 Hive函数</p><h3 id="3-1-内置函数"><a href="#3-1-内置函数" class="headerlink" title="3.1 内置函数"></a>3.1 内置函数</h3><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF">Hive官方文档</a></p><ol><li>查看系统自带的函数</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> functions<span class="token punctuation">;</span></code></pre><ol start="2"><li>显示自带的函数的用法</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">desc</span> <span class="token keyword">function</span> upper<span class="token punctuation">;</span></code></pre><ol start="3"><li>详细显示自带的函数的用法</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">desc</span> <span class="token keyword">function</span> <span class="token keyword">extended</span> upper<span class="token punctuation">;</span></code></pre><ol start="4"><li>常用的内置函数</li></ol><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true">#字符串连接函数:concat</span>select <span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'gh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#带分隔符字符串连接函数:concat_ws</span>select <span class="token function">concat_ws</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'gh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#cast类型转换</span>select <span class="token function">cast</span><span class="token punctuation">(</span><span class="token number">1.5</span> as int<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#get_json_object(json解析函数，用来处理json，必须是json格式)</span>select get<span class="token punctuation">.</span><span class="token function">json_object</span><span class="token punctuation">(</span><span class="token string">'{"name": "jack", "age": "20"}'</span><span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#URL解析函数</span>select <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token string">'http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1'</span><span class="token punctuation">,</span><span class="token string">'HOST'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>select <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token string">'http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1'</span><span class="token punctuation">,</span><span class="token string">'PATH'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>select <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token string">'http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1'</span><span class="token punctuation">,</span><span class="token string">'QUERY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#explode:把map集合中每个键值对或数组中的每个元素都单独生成一行的形式</span></code></pre><h3 id="3-2-自定义函数"><a href="#3-2-自定义函数" class="headerlink" title="3.2 自定义函数"></a>3.2 自定义函数</h3><h4 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h4><ol><li><p>Hive自带了一些函数，比如：max/min等，当Hive提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数(UDF)。</p></li><li><p>根据用户自定义函数类别分为以下三种：</p><ol><li>UDF（User-Defined-Function）<ul><li>一进一出</li></ul></li><li>UDAF（User-Defined Aggregation Function）<ul><li>聚集函数，多进一出</li><li>类似于：==count / max / min==</li></ul></li><li>UDTF（User-Defined Table-Generating Functions）<ul><li>一进多出</li><li>如：==lateral / view / explore()==</li></ul></li></ol></li><li><p>编程步骤：</p><ol><li>继承org.apache.hadoop.hive.ql.UDF</li><li>需要实现evaluate函数；evaluate函数支持重载</li></ol></li><li><p>注意事项</p><ol><li>UDF必须要有返回类型，可以返回null，但是返回类型不能为void。</li><li>UDF中常用 Text / LongWritable 等类型，不推荐使用 java 类型。</li></ol></li></ol><h4 id="3-2-2-UDF-开发实例"><a href="#3-2-2-UDF-开发实例" class="headerlink" title="3.2.2 UDF 开发实例"></a>3.2.2 UDF 开发实例</h4><p><strong>step1 创建Maven工程</strong></p><p>##第四章 Hive的数据压缩</p><blockquote><p>在实际工作当中，hive当中处理的数据，一般都需要经过压缩，前期我们在学习hadoop的时候，已经配置过hadoop的压缩，我们这里的hive也是一样的可以使用压缩来节省我们的MR处理的网络带宽.</p></blockquote><h3 id="4-1-MR支持的压缩编码"><a href="#4-1-MR支持的压缩编码" class="headerlink" title="4.1 MR支持的压缩编码"></a>4.1 MR支持的压缩编码</h3><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201029113639790.png" alt="image-20201029113639790"></p><p>为了支持多种压缩/解压缩算法，Hadoop引入了编码/解码器，如下表所示：</p><table><thead><tr><th>压缩格式</th><th>对应的编码/解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>LZ4</td><td>org.apache.hadoop.io.compress.Lz4Codec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCoded</td></tr></tbody></table><h3 id="4-2-压缩配置参数"><a href="#4-2-压缩配置参数" class="headerlink" title="4.2 压缩配置参数"></a>4.2 压缩配置参数</h3><p>要在Hadoop中启用压缩，可以配置如下参数（mapred-site.xml文件中)：</p><table><thead><tr><th>参数</th><th>默认值</th><th>阶段</th><th>建议</th></tr></thead><tbody><tr><td>io.compression.codesc（在core-site.xml中配置）</td><td>1.org.apache.hadoop.io.compress.DefaultCoder    2.org.apache.hadoop.io.compress.GzipCodec            3.org.apache.hadoop.io.compress.BZip2Codec          4.org.apache.hadoop.io.compress.Lz4Codec</td><td>输入压缩</td><td>Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td>mapreduce.map.output.compress</td><td>false</td><td>mapper输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.map.output.compress.codec</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>mapper输出</td><td>snappy编解码器在此阶段压缩数据</td></tr><tr><td>mapreduce.output.fileoutputformat.compress</td><td>false</td><td>reducer输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.codec</td><td>org.apache.hadoop.io.compress.DefaultCodes</td><td>reducer输出</td><td>使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.type</td><td>RECORD</td><td>reducer输出</td><td>SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table><h3 id="4-3-开启Map输出阶段压缩"><a href="#4-3-开启Map输出阶段压缩" class="headerlink" title="4.3 开启Map输出阶段压缩"></a>4.3 开启Map输出阶段压缩</h3><p>开启map输出阶段压缩可以减少job中map和Reduce task间数据传输量。具体配置如下：</p><p><strong>案例实操</strong></p><ol><li>开启hive中间传输数据压缩功能</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>compress<span class="token punctuation">.</span>intermediate<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>开启mapreduce中map输出压缩功能</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>map<span class="token punctuation">.</span>output<span class="token punctuation">.</span>compress<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>设置mapreduce中map输出数据的压缩方式</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>map<span class="token punctuation">.</span>output<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>SnappyCodec<span class="token punctuation">;</span></code></pre><ol start="4"><li>执行查询语句</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tableName<span class="token punctuation">;</span></code></pre><h3 id="4-4-开启Reduce输出阶段压缩"><a href="#4-4-开启Reduce输出阶段压缩" class="headerlink" title="4.4 开启Reduce输出阶段压缩"></a>4.4 开启Reduce输出阶段压缩</h3><p>当Hive将输出写入到表中时，输出内容同样可以进行压缩。属性hive.exec.compress.output控制着这个功能。用户可能需要保持默认设置文件中的默认值false，这样默认的输出就是非压缩的纯文本文件了。用户可以通过在查询语句或执行脚本中设置这个值为true，来开启输出结果压缩功能。</p><p><strong>案例实操</strong></p><ol><li>开启hive最终输出数据压缩功能</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>compress<span class="token punctuation">.</span>output<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>开启mapreduce最终输出数据压缩</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>设置mapreduce最终数据输出压缩方式</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>SnappyCodec<span class="token punctuation">;</span></code></pre><ol start="4"><li>设置mapreduce最终数据输出压缩为块压缩</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>output<span class="token punctuation">.</span>fileoutputformat<span class="token punctuation">.</span>compress<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token operator">=</span>BLOCK<span class="token punctuation">;</span></code></pre><ol start="5"><li>测试一下输出结果是否是压缩文件</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">local</span> directory <span class="token string">'/root/input_hivedata'</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> moviesp<span class="token punctuation">;</span></code></pre><h2 id="第五章-Hive调优"><a href="#第五章-Hive调优" class="headerlink" title="第五章 Hive调优"></a>第五章 Hive调优</h2><h3 id="5-1-Fetch抓取"><a href="#5-1-Fetch抓取" class="headerlink" title="5.1 Fetch抓取"></a>5.1 Fetch抓取</h3><p>Hive中对某些情况的查询可以不必使用MapReduce计算。例如:SELECT * FROM score;在这种情况下，Hive可以简单地读取score对应的存储目录下的文件，然后输出查询结果到控制台。<br><strong>通过设置hive.fetch.task.conversion参数,可以控制查询语句是否走MapReduce.</strong></p><p><strong>案例实操：</strong></p><ol><li>把 hive.fetch.task.conversion 设置成 none，然后执行查询语句，都会执行 mapreduce 程序。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">fetch</span><span class="token punctuation">.</span>task<span class="token punctuation">.</span>conversion<span class="token operator">=</span>none<span class="token punctuation">;</span></code></pre><ol start="2"><li>把 hive.fetch.task.conversion 设置成 more，然后执行查询语句，不会执行 mapreduce 程序。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">fetch</span><span class="token punctuation">.</span>task<span class="token punctuation">.</span>conversion<span class="token operator">=</span>more<span class="token punctuation">;</span></code></pre><h3 id="5-2-本地模式"><a href="#5-2-本地模式" class="headerlink" title="5.2 本地模式"></a>5.2 本地模式</h3><p>大多数的Hadoop Job是需要Hadoop提供的完整的可扩展性来处理大数据集的。不过，有时Hive的输入数据量是非常小的。在这种情况下，为查询触发执行任务时消耗可能会比实际job的执行时间要多的多。对于大多数这种情况，Hive可以通过本地模式在单台机器上处理所有的任务。对于小数据集，执行时间可以明显被缩短。</p><p>用户可以通过设置==hive.exec.mode.local.auto==的值为true，来让Hive在适当的时候自动启动这个优化。</p><p><strong>案例实操</strong></p><ol><li>开启本地模式，并执行查询语句</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> movies cluster <span class="token keyword">by</span> score<span class="token punctuation">;</span></code></pre><ol start="2"><li>关闭本地模式，并执行查询语句</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> movies cluster <span class="token keyword">by</span> score<span class="token punctuation">;</span></code></pre><h3 id="5-3-MapJoin"><a href="#5-3-MapJoin" class="headerlink" title="5.3 MapJoin"></a>5.3 MapJoin</h3><p>如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会在Reduce阶段完成join,容易发生数据倾斜。可以用MapJoin把小表全部加载到内存在map端进行join，避免reducer处理。</p><ol><li><p>开启MapJoin参数设置：</p><ol><li>设置自动选择 MapJoin</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span><span class="token keyword">join</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>大表小表的阈值设置（默认25M以下认为是小表）：</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapjoin<span class="token punctuation">.</span>smalltable<span class="token punctuation">.</span>filesize<span class="token operator">=</span><span class="token number">25123456</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="5-4-Group-By"><a href="#5-4-Group-By" class="headerlink" title="5.4 Group By"></a>5.4 Group By</h3><p>默认情况下，Map阶段同一Key数据分发给一个reduce，当一个key数据过大时就倾斜了。并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作都可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。</p><p><strong>开启Map端聚合参数设置</strong></p><ol><li>是否在Map端进行聚合，默认为True</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>map<span class="token punctuation">.</span>aggr<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>在Map端进行聚合操作的条目数目</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>mapaggr<span class="token punctuation">.</span>checkinterval<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>有数据倾斜的时候进行负载均衡（默认是false）</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>skewindata<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><p>当选项设定为true，生成的查询计划会有两个MR Job。<br>第一个MR Job中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作，并输出结果，这样处理的结果是相同的Group By Key有可能被分发到不同的Reduce中，从而达到负载均衡的目的;<br>第二个MR .Job再根据预处理的数据结果按照Group By Key分布到Reduce中（这个过程可以保证相同的Group By Key被分布到同一个Reduce中)，最后完成最终的聚合操作。</p><h3 id="5-5-Count-distinct"><a href="#5-5-Count-distinct" class="headerlink" title="5.5 Count(distinct)"></a>5.5 Count(distinct)</h3><p>数据量小的时候无所谓，数据量大的情况下，由于COUNT DISTINCT操作需要用一个Reduce Task来完成，这一个Reduce需要处理的数据量太大，就会导致整个Job很难完成，一般COUNT DISTINCT使用先GROUP BY再COUNT的方式替换:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> keyword<span class="token punctuation">)</span> <span class="token keyword">from</span> sogou<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> url <span class="token keyword">from</span> sogou <span class="token keyword">group</span> <span class="token keyword">by</span> keyword<span class="token punctuation">)</span> <span class="token number">a</span><span class="token punctuation">;</span></code></pre><h3 id="5-6-笛卡尔积"><a href="#5-6-笛卡尔积" class="headerlink" title="5.6 笛卡尔积"></a>5.6 笛卡尔积</h3><p>尽量避免笛卡尔积，即避免join的时候不加on条件，或者无效的on条件，Hive只能使用1个reducer来完成笛卡尔积。</p><h3 id="5-7-动态分区调整"><a href="#5-7-动态分区调整" class="headerlink" title="5.7 动态分区调整"></a>5.7 动态分区调整</h3><p>往hive分区表中插入数据时，hive提供了一个动态分区功能，其可以基于查询参数的位置去推断分区的名称，从而建立分区。使用Hive的动态分区，需要进行相应的配置。</p><p>Hive的动态分区是以第一个表的分区规则，来对应第二个表的分区规则，将第一个表的所有分区，全部拷贝到第二个表中来，第二个表在加载数据的时候，不需要指定分区了，直接用第一个表的分区即可</p><h4 id="5-7-1-开启动态分区参数设置"><a href="#5-7-1-开启动态分区参数设置" class="headerlink" title="5.7.1 开启动态分区参数设置"></a>5.7.1 开启动态分区参数设置</h4><ol><li>开启动态分区功能（默认为true，开启）</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>设置为非严格模式（动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区,nonstrict模式表示允许所有的分区字段都可以使用动态分区。)</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token punctuation">.</span>mode<span class="token operator">=</span>nonstrict<span class="token punctuation">;</span></code></pre><ol start="3"><li>在所有执行MR的节点上，最大一共可以创建多少个动态分区。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>在每个执行MR的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token punctuation">.</span>pernode<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></code></pre><ol start="5"><li>整个MR Job中，最大可以创建多少个HDFS文件。<br>在linux系统当中，每个linux用户最多可以开启1024个进程，每一个进程最多可以打开2048个文件，即持有2048个文件句柄，下面这个值越大，就可以打开文件句柄越大</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>created<span class="token punctuation">.</span>files<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span></code></pre><ol start="6"><li>当有空分区生成时，是否抛出异常。一般不需要设置。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token keyword">on</span><span class="token punctuation">.</span>empty<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><p>###5.8 并行执行</p><p>Hive会将一个查询转化成一个或者多个阶段。这样的阶段可以是MapReduce阶段、抽样阶段、合并阶段、limit阶段。或者Hive执行过程中可能需要的其他阶段。默认情况下，Hive一次只拿执行一个阶段。不过，某个特定的job可能包含众多的阶段，而这些阶段可能并非完全互相依赖的，也就是说有些阶段是可以并行执行的，这样可能使得整个job的执行时间缩短。不过，如果有更多的阶段可以并行执行，那么job可能就越快完成。</p><p>通过设置参数hive.exec.parallel值为true，就可以开启并发执行。不过，在共享集群中，需要注意下，如果job中并行阶段增多，那么集群利用率就会增加。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>parallel<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><p>当然，得是在系统资源比较空菌的时候才有优势，否则，没资源，并行也起不来。</p><h3 id="5-9-严格模式"><a href="#5-9-严格模式" class="headerlink" title="5.9 严格模式"></a>5.9 严格模式</h3><p>Hive提供了一个严格模式，可以防止用户执行那些可能意向不到的不好的影响的查询。</p><p>通过设置属性hive.mapred.mode值为默认是非严格模式nonstrict。开启严格模式需要修改hive.mapred.mode值为strict，开启严格模式可以禁止3种类型的查询。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>mode<span class="token operator">=</span>strict<span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>mode<span class="token operator">=</span>nonstrict<span class="token punctuation">;</span></code></pre><ol><li>==对于分区表，在where语句中必须含有分区字段作为过滤条件来限制范围，否则不允许执行。==换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表。</li><li>==对于使用了order by语句的查询，要求必须使用limit语句。==因为order by为了执行排序过程会将所有的结果数据分发到同一个Reducer中进行处理，强制要求用户增加这个LIMIT语句可以防止Reducer额外执行很长一段时间。</li><li>==限制笛卡尔积的查询。==对关系型数据库非常了解的用户可能期望在执行JOIN查询的时候不使用ON语句而是使用where语句，这样关系数据库的执行优化器就可以高效地将WHERE语句转化成那个ON语句。不幸的是，Hive并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况。</li></ol><h3 id="5-10-JVM重用"><a href="#5-10-JVM重用" class="headerlink" title="5.10 JVM重用"></a>5.10 JVM重用</h3><p>JVM重用是Hadoop调优参数的内容，其对Hive的性能具有非常大的影响，特别是对于很难避免小文件的场景或task特别多的场景，这类场景大多数执行时间都很短。</p><p>Hadoop的默认配置通常是使用派生JVM来执行map和Reduce任务的。这时JVM的启动过程可能会造成相当大的开销，尤其是执行的job包含有成百上千task任务的情况。JVM重用可以使得JVM实例在同一个job中重新使用N次。N的值可以在Hadoop的mapred-site.xml文件中进行配置。通常在10-20之间，具体多少需要根据具体业务场景测试得出。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reuse<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>num<span class="token punctuation">.</span>tasks<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>这个功能的缺点是，开启JVM重用将一直占用使用到的task插槽，以便进行重用，直到任务完成后才能释放。如果某个“不平衡的”job中有某几个reduce task执行的时间要比其他Reducetask消耗的时间多的多的话，那么保留的插槽就会一直空闲着却无法被其他的job使用，直到所有的task都结束了才会释放。</p><h3 id="5-11-推测执行"><a href="#5-11-推测执行" class="headerlink" title="5.11 推测执行"></a>5.11 推测执行</h3><p>在分布式集群环境下，因为程序Bug (包括Hadoop本身的bug)，负载不均衡或者资源分布不均等原因，会造成同一个作业的多个任务之间运行速度不一致，有些任务的运行速度可能明显慢于其他任务（比如一个作业的某个任务进度只有50%，而其他所有任务已经运行完毕)，则这些任务会拖慢作业的整体执行进度。为了避免这种情况发生，Hadoop采用了推测执行(Speculative Execution)机制，它根据一定的法则推测出”拖后腿”的任务，并为这样的任务启动一个备份任务，让该任务与原始任务同时处理同一份数据，并最终选用最先成功运行完成任务的计算结果作为最终结果。</p><p><strong>设置开启推测执行参数:</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>map<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>speculative<span class="token punctuation">.</span>execution<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>reduce<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>speculative<span class="token punctuation">.</span>execution<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>reduce<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>speculative<span class="token punctuation">.</span>execution<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hive笔记&quot;&gt;&lt;a href=&quot;#Hive笔记&quot; class=&quot;headerlink&quot; title=&quot;Hive笔记&quot;&gt;&lt;/a&gt;Hive笔记&lt;/h1&gt;&lt;h2 id=&quot;第一章-Hive数据类型&quot;&gt;&lt;a href=&quot;#第一章-Hive数据类型&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HBase笔记</title>
    <link href="https://www.shiyiri.top/node/3.html"/>
    <id>https://www.shiyiri.top/node/3.html</id>
    <published>2021-04-19T14:45:17.028Z</published>
    <updated>2021-04-19T14:55:42.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HBase-shell"><a href="#1-HBase-shell" class="headerlink" title="1.HBase shell"></a>1.HBase shell</h1><h2 id="1-1-HBase-shell操作"><a href="#1-1-HBase-shell操作" class="headerlink" title="1.1 HBase shell操作"></a>1.1 HBase shell操作</h2><h3 id="1-1-1-创建表"><a href="#1-1-1-创建表" class="headerlink" title="1.1.1 创建表"></a>1.1.1 创建表</h3><ul><li>HBase是没有schema的，就是在创建表的时候不需要指定表中有哪些列，只需要指定有多少个列族</li></ul><p>语法：</p><pre class=" language-mysql"><code class="language-mysql">create '表名','列族名'...</code></pre><p>注意：</p><ul><li>create要写成小写</li><li>一个表可以包含若干个列族</li><li>命令解析，调用hbase提供的ruby脚本的create方法，传递两个字符串参数</li></ul><h3 id="1-1-2-删除表"><a href="#1-1-2-删除表" class="headerlink" title="1.1.2 删除表"></a>1.1.2 删除表</h3><h5 id="1-1-2-1-禁用表"><a href="#1-1-2-1-禁用表" class="headerlink" title="1.1.2.1 禁用表"></a>1.1.2.1 禁用表</h5><pre class=" language-ruby"><code class="language-ruby">disable <span class="token string">"表名"</span></code></pre><h5 id="1-1-2-2-删除表"><a href="#1-1-2-2-删除表" class="headerlink" title="1.1.2.2  删除表"></a>1.1.2.2  删除表</h5><pre class=" language-ruby"><code class="language-ruby">drop <span class="token string">"表名"</span></code></pre><h3 id="1-1-3-put插入数据"><a href="#1-1-3-put插入数据" class="headerlink" title="1.1.3 put插入数据"></a>1.1.3 put插入数据</h3><p>语法：</p><pre class=" language-ruby"><code class="language-ruby">put <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token string">"ROWKEY"</span><span class="token punctuation">,</span><span class="token string">"列族名：列名"</span><span class="token punctuation">,</span><span class="token string">"值"</span></code></pre><h3 id="1-1-4-查询数据"><a href="#1-1-4-查询数据" class="headerlink" title="1.1.4 查询数据"></a>1.1.4 查询数据</h3><ul><li>get是查询一行的数据</li></ul><p>查找指定行键：</p><pre class=" language-ruby"><code class="language-ruby">get <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token string">"行键名"</span></code></pre><p>要将数据中的中文正确显示</p><pre class=" language-ruby"><code class="language-ruby">get <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token string">"行键名"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token constant">FORMATTER</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"toString"</span><span class="token punctuation">}</span></code></pre><h3 id="1-1-5-更新操作-新增数据"><a href="#1-1-5-更新操作-新增数据" class="headerlink" title="1.1.5 更新操作/新增数据"></a>1.1.5 更新操作/新增数据</h3><p>使用put进行更新操作</p><pre class=" language-ruby"><code class="language-ruby">put <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token string">"行键名"</span><span class="token punctuation">,</span><span class="token string">"列族：列名"</span><span class="token punctuation">,</span><span class="token string">"更新的值"</span></code></pre><h3 id="1-1-6-删除数据"><a href="#1-1-6-删除数据" class="headerlink" title="1.1.6 删除数据"></a>1.1.6 删除数据</h3><ul><li>删除数据的时候，其实HBasse不是真的直接把数据删除掉，而是给某个列设置一个标志，然后查询数据的时候，有这个标志的数据，就不显示出来。</li></ul><h4 id="1-1-6-1-delete命令"><a href="#1-1-6-1-delete命令" class="headerlink" title="1.1.6.1 delete命令"></a>1.1.6.1 delete命令</h4><blockquote><p>执行delete的时候</p><ul><li>如果表中某个列有对应的几次修改，它会删除最近的一次修改</li></ul></blockquote><p>使用delete将一个单元格的数据删除(删除指定的列)：</p><pre class=" language-ruby"><code class="language-ruby">delete <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token string">"行键名"</span><span class="token punctuation">,</span><span class="token string">"列族:列"</span></code></pre><h4 id="1-1-6-2-deleteall命令"><a href="#1-1-6-2-deleteall命令" class="headerlink" title="1.1.6.2 deleteall命令"></a>1.1.6.2 deleteall命令</h4><p>删除整行数据:</p><pre class=" language-ruby"><code class="language-ruby">deleteall <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token string">"行键"</span></code></pre><h3 id="1-1-7-简单scan扫描操作"><a href="#1-1-7-简单scan扫描操作" class="headerlink" title="1.1.7 简单scan扫描操作"></a>1.1.7 简单scan扫描操作</h3><p>1.查询表中的所有数据（慎用，效率低）：</p><pre class=" language-ruby"><code class="language-ruby">scan <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token constant">FORMATTER</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"toString"</span><span class="token punctuation">}</span></code></pre><p>2.查询表中的数据（显示前三条）：</p><pre class=" language-ruby"><code class="language-ruby">scan <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token constant">FORMATTER</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"toString"</span><span class="token punctuation">,</span><span class="token constant">LIMIT</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">}</span></code></pre><p>3.查询表中的数据指定列族，并且显示三条数据：</p><pre class=" language-ruby"><code class="language-ruby">scan <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token constant">FORMATTER</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"toString"</span><span class="token punctuation">,</span><span class="token constant">LIMIT</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token constant">COLUMS</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'列族：列'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>4.使用scan来根据rowkey查询数据，也是查询指定列的数据:</p><pre class=" language-ruby"><code class="language-ruby">scan <span class="token string">"表名"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token constant">ROWPREFIXFILTER</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"rowkey"</span> <span class="token constant">FORMATTER</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"toString"</span><span class="token punctuation">,</span><span class="token constant">LIMIT</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token constant">COLUMS</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'列族：列'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h1 id="2-HBase-Java编程"><a href="#2-HBase-Java编程" class="headerlink" title="2.HBase Java编程"></a>2.HBase Java编程</h1><h2 id="2-1-创建表"><a href="#2-1-创建表" class="headerlink" title="2.1 创建表"></a>2.1 创建表</h2><p>==在同一个类里面完成创建表，删除表，插入数据，get数据，删除数据等操作时，只要实例化一次Configuration==</p><ol><li><p>实例化Configuration对象，进行HBase数据库的参数配置对象</p><pre class=" language-java"><code class="language-java">Configuration conf<span class="token operator">=</span>HBaseConfiguration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span><span class="token string">"node,node1,node2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最主要的配置项，找到集群</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.rootdir"</span><span class="token punctuation">,</span><span class="token string">"hdfs://node:90000/hbase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.master"</span><span class="token punctuation">,</span><span class="token string">"node:60000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.property.clientPort"</span><span class="token punctuation">,</span><span class="token string">"2181"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建连接，Admin类对象</p><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>Admin admin<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HBase表的管理对象，负责数据库表的创建，列族结构的管理，删除表</span></code></pre></li><li><p>创建表</p><p>3.1 表名</p><pre class=" language-java"><code class="language-java">TableName tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>talename<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.2 表描述对象TableDescriptor</p><pre class=" language-java"><code class="language-java">TableDescriptorBuilder tdb <span class="token operator">=</span> TableDescriptorBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.3 列族描述对象ColumnFamilyDescriptor</p><pre class=" language-java"><code class="language-java">ColumnFamilyDescriptorBuilder cfdb <span class="token operator">=</span> ColumnFamilyDescriptorBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ColumnFamilyDescriptor cfd <span class="token operator">=</span> cfdb<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tdb<span class="token punctuation">.</span><span class="token function">setColumnFamily</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>tdb<span class="token punctuation">.</span><span class="token function">setColumnFamily</span><span class="token punctuation">(</span>ColumnFamilyDescriptorBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种方法</span></code></pre></li><li><p>创建表</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">tableExists</span><span class="token punctuation">(</span>tablename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    admin<span class="token punctuation">.</span><span class="token function">disableTable</span><span class="token punctuation">(</span>tablename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先disable</span>    admin<span class="token punctuation">.</span><span class="token function">deleteTable</span><span class="token punctuation">(</span>tablename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再删除表            </span><span class="token punctuation">}</span>admin<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>tdb<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建表</span></code></pre></li><li><p>释放资源</p><pre><code>admin.close();conn.closee();</code></pre></li></ol><h2 id="2-2-插入数据"><a href="#2-2-插入数据" class="headerlink" title="2.2 插入数据"></a>2.2 插入数据</h2><ol><li><p>实例化Configuration类</p><pre class=" language-java"><code class="language-java">Configuration conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建连接，实例化Table类</p><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>Table table  <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span>TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"tablename"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>实例化Put类</p><pre class=" language-Java"><code class="language-Java">Put put = new Put("row1".getBytes());//row1为行键，在行键为row1的地方插入数据对象</code></pre></li><li><p>构造待插入数据</p><pre class=" language-java"><code class="language-java">put<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token string">"列族"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"列"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"值"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>插入数据</p><pre class=" language-Java"><code class="language-Java">table.put(put);//每次插入一行数据，table为步骤二里面实例化的Table类</code></pre></li><li><p>释放资源</p><pre class=" language-java"><code class="language-java">conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="2-3-get数据"><a href="#2-3-get数据" class="headerlink" title="2.3 get数据"></a>2.3 get数据</h2><ol><li><p>实例化Configuration</p><pre class=" language-java"><code class="language-java">Configuration conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建连接，实例化Table类</p><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>Table table <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span>TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"tablename"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>实例化Get类</p><pre class=" language-java"><code class="language-java">Get get <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token string">"row1"</span><span class="token punctuation">.</span>getBytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//row1为行键，在行键为row1的地方插入数据对象</span></code></pre></li><li><p>获取数据</p><pre class=" language-java"><code class="language-java">Result rs <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>输出结果</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取的结果要变成String类型才能看懂</span>String 列 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"列族名"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"列"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"值:"</span><span class="token operator">+</span>值<span class="token punctuation">)</span></code></pre></li><li><p>释放资源</p><pre class=" language-java"><code class="language-java">table<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="2-4-删除数据"><a href="#2-4-删除数据" class="headerlink" title="2.4 删除数据"></a>2.4 删除数据</h2><ol><li><p>实例化Configuration</p><pre class=" language-java"><code class="language-java">Configuration conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建连接，实例化Table类</p><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>Table table <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span>TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"表名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除行，列</p><pre class=" language-java"><code class="language-java">Delete delete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Delete</span><span class="token punctuation">(</span><span class="token string">"行键"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除行</span>table<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除列</span>delete<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token string">"列族"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"列"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>释放资源</p><pre class=" language-java"><code class="language-java">table<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-HBase-shell&quot;&gt;&lt;a href=&quot;#1-HBase-shell&quot; class=&quot;headerlink&quot; title=&quot;1.HBase shell&quot;&gt;&lt;/a&gt;1.HBase shell&lt;/h1&gt;&lt;h2 id=&quot;1-1-HBase-shell操作&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据采集笔记</title>
    <link href="https://www.shiyiri.top/node/1.html"/>
    <id>https://www.shiyiri.top/node/1.html</id>
    <published>2021-04-11T08:55:49.081Z</published>
    <updated>2021-04-22T14:35:04.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章、爬虫基础"><a href="#第一章、爬虫基础" class="headerlink" title="第一章、爬虫基础"></a>第一章、爬虫基础</h1><h2 id="1-1-HTTP-基本原理"><a href="#1-1-HTTP-基本原理" class="headerlink" title="1.1 HTTP 基本原理"></a>1.1 HTTP 基本原理</h2><h3 id="1-1-1-URI-和-URL"><a href="#1-1-1-URI-和-URL" class="headerlink" title="1.1.1 URI 和 URL"></a>1.1.1 URI 和 URL</h3><ul><li><p>URI 的全称为 Uniform Resource Identifier ，统一资源标志符</p></li><li><p>URL 称为 Universal Resource Locator，统一资源定位符</p></li><li><p>URL 是 URI 的子集，也就是说每个 URL 都是 URI ，但不是每个 URI 都是 URL。</p></li></ul><h3 id="1-1-2-超文本"><a href="#1-1-2-超文本" class="headerlink" title="1.1.2 超文本"></a>1.1.2 超文本</h3><ul><li>超文本，其英文名称叫作 hypertext ，我们在浏览器里看到的网页就是超文本解析而成的， 网页源代码是一系列系列 HTML 代码，而网页的源代码 HTML 就可以称作超文本。</li></ul><h3 id="1-1-3-HTTP-和-HTTPS"><a href="#1-1-3-HTTP-和-HTTPS" class="headerlink" title="1.1.3 HTTP 和 HTTPS"></a>1.1.3 HTTP 和 HTTPS</h3><ul><li>HTTP 全称是 Hyper Text Transfer Protocol ，中文 叫作超文本传输协议 HTTP 协议是用于从网络传输超文本数据到本地浏览器的传送协议，它能保证高效而准确地传送超文本文档。</li><li>HTTPS 的全称是 Hyper Text Transfer Protocol over Secure Socket Layer ，是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版， HTTP 下加入 SSL  层，简称为 HTTPS。</li></ul><h3 id="1-1-4-请求"><a href="#1-1-4-请求" class="headerlink" title="1.1.4 请求"></a>1.1.4 请求</h3><ul><li>请求，由客户端向服务端发出，可以分为 部分内容：请求方法 (Request Method)、请求的网址 (Request URL ）、请求头 (Request Headers)、请求体 (Request Body)。</li></ul><ol><li>请求方法<ul><li>常见的方法有两种：GET 和 POST。</li><li>GET 和 POST 请求方法有如下区别<ul><li>GET 请求中的参数包含在 URL 里面，数据可以在 URL 中看到，而 POST 请求的 URL 会包含这些数据，数据都是通过表单形式传输的，会包含在请求体中.</li><li>GET 请求提交的数据最多只有 1024 字节，而 POST 方式没有限制。</li></ul></li></ul></li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求页面，并返回页面内容</td></tr><tr><td>HEAD</td><td>类似于 GET 请求， 只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>POST</td><td>大多用于提交表单或上传文件，数据包含在请求体中</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定文梢中的内容</td></tr><tr><td>DELETE</td><td>请求服务器删除指定的页面</td></tr><tr><td>CONNECT</td><td>把服务器当作跳板，让服务器代替客户端防问其他网页</td></tr><tr><td>OPTIONS</td><td>允许客户端查看服务器的性能</td></tr><tr><td>TRACE</td><td>囚显服务器收到的请求，主要用于测试或诊断</td></tr></tbody></table><ol start="2"><li>请求的网址</li></ol><ul><li>请求的网址，即统 资惊定位符 URL ，它可以唯一确定我们想请求的资源。</li></ul><ol start="3"><li>请求头</li></ol><ul><li><p> Host ：用于指定请求资源的主机 IP 和端口号，其内容为请求 URL 的原始服务器或网关的位置，从 HTTP 1.1版本开始，请求必须包含此内容。</p></li><li><p>Cookie ：也常用复数形式 Cookies ，这是网站为了辨别用户进行会话跟踪而存储在用户本地的数据。它的主要功能是维持当前访问会话 例如，我们输入用户名和密码成功登录某个网站后，服务器会用会话保存登录状态信息，后面我们每次刷新或请求该站点的其他页面时，会发现都是登录状态，这就是 Cookies 的功 Cookies 里有信息标识了我们所对应的服务器的会话，每次浏览器在请求该站点的页面时，都会在请求头中加上 Cookies 并将其发送给服务器，服务器通过 Cookies 识别出是我们自己，并且查出当前状态是登录状态，所以返回结果就是登录之后才能看到的网页内容。</p></li><li><p>Referer ：此内容用来标识这个请求是从哪个页面发过来的，服务器可以拿到这 信息并做相应的处理，如做来源统计、防盗链处理等</p></li><li><p>User-Agent ：简称 UA ，它是一个特殊的字符串头，可以使服务器识别客户使用的操作系统及版本 浏览器及版本等信息 在做爬虫时加上此信息，可以伪装为浏览器；如果不加，很可能会被识别州为爬虫</p></li></ul><ol start="4"><li>请求体</li></ol><ul><li>请求体一般承载的内容是 POST 请求中的表单数据，而对于 GET 请求，请求体则为空。</li></ul><h3 id="1-1-5-响应"><a href="#1-1-5-响应" class="headerlink" title="1.1.5 响应"></a>1.1.5 响应</h3><ul><li>响应，由服务端返回给客户端，可以分为 部分：响应状态码（ Response Status Code ）、响应头( Response Headers ）和响应体（ Response Body）</li></ul><ol><li>响应状态码</li></ol><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201116210501159.png" alt="image-20201116210501159"></p><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201116210517596.png" alt="image-20201116210517596"></p><h2 id="1-2-爬虫的基本原理"><a href="#1-2-爬虫的基本原理" class="headerlink" title="1.2 爬虫的基本原理"></a>1.2 爬虫的基本原理</h2><p>我们可以把互联网比作一张大网，而爬虫（即网络爬虫）便是在网上爬行的蜘蛛。把网的节点比作一个个网页，爬虫爬到这就相当于访问了该页面，获取了其信息。可以把节点间的连线比作网页与网页之间的链接关系，这样蜘蛛通过一个节点后，可以顺着节点连线继续爬行到达下一个节点，即通个网页继续获取后续的网页，这样整个网的节点便可以被蜘蛛全部爬行到，网站的数据就可以被抓取下来了。</p><h3 id="1-2-1-爬虫概述"><a href="#1-2-1-爬虫概述" class="headerlink" title="1.2.1 爬虫概述"></a>1.2.1 爬虫概述</h3><p>简单来说，爬虫就是获取网页并提取和保存信息的自动 程序，下面概要介绍一下</p><ol><li>获取网页<ul><li>爬虫首先要做的工作就是获取网页，这里就是获取网页的源代码 源代码里包含了网页的部分有用信息 ，所以只要把源代码获取下来，就可以从中提取想要的信息了。</li></ul></li><li>提取信息<ul><li>获取网页源代码后，接下来就是分析网页源代码，从中提取我们想要的数据。</li></ul></li><li>保存数据<ul><li>可以简单保存为 TXT 文本或 JSON 文本，也可以保存到数据库，如 MySQL MongoDB等。</li></ul></li><li>自动化程序<ul><li>说到自动化程序，意思是说爬虫可以代替人来完成这些操作。首先，我们手工当然可以提取这些信息，但是当量特别大或者想快速获取大量数据的话，肯定还是要借助程序。</li></ul></li></ol><h3 id="1-2-2-能抓取怎样的数据"><a href="#1-2-2-能抓取怎样的数据" class="headerlink" title="1.2.2 能抓取怎样的数据"></a>1.2.2 能抓取怎样的数据</h3><ol><li>最常见的便是常规网页，它们对应着 HTML 码，而最常抓取的便是 HTML 源代码。</li><li>JSON 字符串（其中 PI 接口大多采用这样的形式），这种格式的数据方便传输和解析，它们同样可以抓取，而且数据提取更加方便。</li><li>各种二进制数据，如图片 、视频和音频等 利用爬虫，我们可以将这些二进制数据抓取下来，然后保存成对应的文件名。</li></ol><h3 id="1-2-3-JavaScript-渲染页面"><a href="#1-2-3-JavaScript-渲染页面" class="headerlink" title="1.2.3 JavaScript 渲染页面"></a>1.2.3 JavaScript 渲染页面</h3><ul><li>有时候，在用 urllib 或 requests 抓取网页时，可以看到的源代码实际和浏览器中看到的不一样。</li><li>这是 个非常常见的问题 现在网页越来越多地采用 Ajax 、前端模块化工具来构建，整个网页可能都是由 JavaScript 渲染出来的，也就是说原始的 HTML 代码就是一个空壳。</li><li>对于这种，我们可以使用 Selenium、Splash 这样的库来实现模拟 JavaScript 渲染。</li><li>其次可以通过post请求。</li></ul><h1 id="第二章、基本库的使用"><a href="#第二章、基本库的使用" class="headerlink" title="第二章、基本库的使用"></a>第二章、基本库的使用</h1><h2 id="2-1-使用-urllib"><a href="#2-1-使用-urllib" class="headerlink" title="2.1 使用 urllib"></a>2.1 使用 urllib</h2><blockquote><p>首先，了解一下 urllib 库，python 内置的 HTTP 请求库，不需要额外的安装。</p><p>包含四个模块：</p><ul><li>request：最基本的 HTTP 请求模块，用来模拟发送请求。</li><li>error：异常处理模块，如果出现请求错误，可以捕获这些异常，然后进行重试或其他操作以保证程序不会意外终止。</li><li>parse：工具模块，提供了许多 URL 处理方法，比如拆分、解析、合并等。</li><li>robotparser ：主要是用来识别网站的 robots.txt 文件，然后判断哪些网站可以爬，哪些网站不可以爬，用的很少。</li></ul></blockquote><h3 id="2-1-1-发送请求"><a href="#2-1-1-发送请求" class="headerlink" title="2.1.1 发送请求"></a>2.1.1 发送请求</h3><ol><li><strong>urlopen()</strong></li></ol><p>urllib.request 模块提供了最基本的构造 HTTP 求的方法， 利用它可以模拟浏览器的一个请求发起过程， 同时它还带有处理授权验证（authenticaton）、重定向（ redirection ）、浏览器 Cookies 及其他内容。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment" spellcheck="true"># 这里定义 response 变量接返回的 HTML</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://www.python.org'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># read() 读取为二进制的数据，再使用 decode() 方法把它转为字符串</span><span class="token comment" spellcheck="true"># 并设置字符编码为 utf-8 ，这里要注意，有些网页编码可能是 gb2312 或其他。</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>下面我们看下 urlopen() 函数的 API：</p></li><li><p>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None ) </p></li><li><p>data 参数：</p><p>data 参数是可选的。如果传递了这个参数，则它的请求方式就不再是 GET 方式，而POST 方式。</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestdata <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'word'</span><span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>timeout 参数：</p><p>timeout 参数用于设置超时时间，单位为秒，意思就是如果请求超 了设置的这个时间， 还没有得到响应，就会抛出异常。如果不指定该参数，就会使用全局默认时间。</p><p>通过设置这个超时时间来控制一个网页如果长时间未 应，就跳过它的抓取。</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error<span class="token keyword">try</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 可以用 isinstance() 方法来判断它的类型，作出更详细的异常判断</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'TIME OUT'</span><span class="token punctuation">)</span></code></pre><ul><li><p>其他参数：</p><p>除了 data 参数和 timeout 参数外，还有 context 参数，它必须是 ssl.SSLContext 类型，用来指定SSL 设置。</p><p>此外，cafile 和 capath 这两个参数分别指定 CA 证书和它的路径，这个在请求 HTTPS 链接时会有用。</p><p>cadefault 参数现在已经弃用了，其默认值为 False。</p><p><a href="https://docs.python.org/3/library/urllib.request.html">官方文档</a></p></li></ul><ol start="2"><li><strong>Request</strong></li></ol><p>利用 urlopen() 方法可以实现最基本请求的发起，但这几个简单的参数并不足以构建个完整的请求 如果请求中需要加入 Headers 等信息，就可以利用更强大的 Request 类来构建。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'</span><span class="token punctuation">}</span>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'https://python.org'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>下面我们看下 Request 的构造方法</p><ul><li>class urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)</li></ul></li><li><p>第一个参数 url 用于请求 URL 这是必传参数，其他都是可选参数。</p></li><li><p>第二个参数 data 如果要传，必须传 bytes （字节流）类型的 如果它是字典，可以先用urllib.parse 模块里的 urlencode() 编码。</p></li><li><p>第 个参数 headers 是一个字典，它就是请求头，我们可以在构造请求时通过 headers 参数直接构造，也可以通过调用请求实例的 add_header() 方法添加。</p></li><li><p>第四个参数 origin_req_host 指的是请求方的 host 名称或者 IP 地址。</p></li><li><p>第五个参数 unverifiable 表示这个请求是否是无法验证的，默认是 False ，意思就是说用户没有足够权限来选择接收这个请求的结果。</p></li><li><p>第六个参数 method 一个字符串 ，用来指示请求使用的方法，比如 GET POST PUT 等。</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parseurl <span class="token operator">=</span> <span class="token string">'http://httpbin.org/post'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span>        <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'httpbin.org'</span><span class="token punctuation">}</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Germey'</span><span class="token punctuation">}</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'POST'</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="3"><li><strong>高级用法</strong></li></ol><p>那对于一些更高级的操作（比如 Cookies 处理、代理设置等），该如何操作？</p><p>接下来，就需要更强大的工具 Handler 登场了。简而言之，我们可以把它理解为各种处理器，有专门处理登录验证的，有处理 Cookies 的，有处理代理设置的 利用它们，我们几乎可以做到 HTTP 请求中所有的事情。</p><p>urllib.request 模块里的 BaseHandler 类，它是所有其他 Handler 的父类，它提供了最基本的方法，例如 default_open()、protocol_request() 等。</p><p>接下来，就有各种 Ha dler 子类继承这个 BaseHandler 类，举例如下：</p><ul><li>HTTPDefaultErrorHandler：处理 HTTP 响应错误，错误都会抛出 HTTPError 类型的异常。</li><li>HTTPRedirectHandler：用于处理重定向。</li><li>HTTPCookieProcessor：用于处理 Cookies。</li><li>ProxyHandler：用于设置代理，默认代理为空。</li><li>HTTPPasswordMgr：用于管理密码，它维护了用户名和密码的表。</li><li>HTTPBasicAuthHandler 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。</li></ul><p><a href="'https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler'">详见官方文档</a></p><ul><li>验证登陆，借助 HTTPBasicAuthHandler 可以完成</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">,</span> HTTPBasicAuthHandler<span class="token punctuation">,</span> build_opener<span class="token comment" spellcheck="true"># 对于异常的处理</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> URLErrorusername <span class="token operator">=</span> <span class="token string">'username'</span>password <span class="token operator">=</span> <span class="token string">'password'</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/hot'</span>p <span class="token operator">=</span> HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>None<span class="token punctuation">,</span> url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>auth_handler <span class="token operator">=</span> HTTPBasicAuthHandler<span class="token punctuation">(</span>p<span class="token punctuation">)</span>opener <span class="token operator">=</span> build_opener<span class="token punctuation">(</span>auth_handler<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    html <span class="token operator">=</span> result<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span></code></pre><ul><li>代理</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> URLError<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> ProxyHandler<span class="token punctuation">,</span> build_opener<span class="token comment" spellcheck="true"># 这里的代理IP不能使用，网上的免费代理IP大多都不能使用。</span>proxy_handler <span class="token operator">=</span> ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:9743'</span><span class="token punctuation">,</span>    <span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'https://127.0.0.1:9743'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>opener <span class="token operator">=</span> build_opener<span class="token punctuation">(</span>proxy_handler<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span></code></pre><ul><li>Cookies</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取网站的Cookies</span><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestcookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/hot'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> cookie<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejarurl <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/hot'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Mobile Safari/537.36'</span><span class="token punctuation">}</span>cookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>request<span class="token punctuation">)</span>html <span class="token operator">=</span> r<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><h3 id="2-1-2-处理异常"><a href="#2-1-2-处理异常" class="headerlink" title="2.1.2 处理异常"></a>2.1.2 处理异常</h3><p>urllib 的 error 模块定义了由 request 模块产生的异常 如果出现了问题，request 模块便会抛出 error 模块中定义的异常。</p><ol><li>URLError</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> error<span class="token keyword">try</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://cuiqingcai.com/index.htm'</span><span class="token punctuation">)</span><span class="token keyword">except</span> error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打开一个不存在的页面照理来说应该会报错，但是这时我们捕获了 URLError 这个异常。输出：Not Found。通过如上操作，我们就可以避免程序异常终止，同时异常得到了有效处理。</span></code></pre><ol start="2"><li>HTTPError</li></ol><p>URL Error 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败等。</p><p>它有如下三个属性：</p><ul><li>code：返回 HTTP 状态码，比如 404 表示网页不存在，500 表示服务器内部错误等。</li><li>reason：同父类一样，用于返回错误的原因。</li><li>headers：返回请求头。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> error<span class="token keyword">try</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://cuiqingcai.com/index.htm'</span><span class="token punctuation">)</span><span class="token keyword">except</span> error<span class="token punctuation">.</span>HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">,</span> e<span class="token punctuation">.</span>code<span class="token punctuation">,</span> e<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">except</span> error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Request Successfully'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 因为 URLError 是 HTTPError 的父类，所以可以先选择捕获子类的错误，再去捕获父类的错误。</span></code></pre><h3 id="2-1-3-解析链接"><a href="#2-1-3-解析链接" class="headerlink" title="2.1.3 解析链接"></a>2.1.3 解析链接</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># urlparse() 该方法可以实现 URL 的识别和分段</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparseresult <span class="token operator">=</span> urlparse<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/index.html;user?id=5#comment'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># scheme='http'                协议</span><span class="token comment" spellcheck="true"># netloc='www.baidu.com'    域名</span><span class="token comment" spellcheck="true"># path='/index.html'        访问路径</span><span class="token comment" spellcheck="true"># params='user'                参数</span><span class="token comment" spellcheck="true"># query='id=5'                查询条件</span><span class="token comment" spellcheck="true"># fragment='comment'        锚点</span><span class="token comment" spellcheck="true"># 标准的链接格式</span><span class="token comment" spellcheck="true"># scheme://netloc/path;params?query#fragment</span></code></pre><h2 id="2-2-使用-requests"><a href="#2-2-使用-requests" class="headerlink" title="2.2 使用 requests"></a>2.2 使用 requests</h2><h3 id="2-2-1-基本用法"><a href="#2-2-1-基本用法" class="headerlink" title="2.2.1 基本用法"></a>2.2.1 基本用法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""对于 GET 请求，如果要附加额外的信息，一般怎样添加呢？比如现在想添加两个参数，其中 name是germey, age是22 要构造这个请求链接"""</span><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0'</span><span class="token punctuation">}</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'germey'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span>url <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>url<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>抓取网页、添加headers</li></ul><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""上面的请求链接返回的是 JSON 形式的字符串，那么如果请求普通的网页，则肯定能获得相应的内容了 下面以“知乎”→“发现”页面为例"""</span><span class="token comment" spellcheck="true"># 在这里，如果不设置U-A，就不能正常请求</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span>        <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/explore'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>textpattern <span class="token operator">=</span> <span class="token string">'view-id="5799">(.*?)&lt;/a>'</span>titles <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> r<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(titles)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> titles<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><ul><li> 抓取二进制数据</li></ul><p>图片、音频、视频这些文件本质上都是由二进制码组成的，由于有特定的保存格式和对应的解析方式， 我们才可以看到这些形形色色的多媒体。所以，想要抓取它们，就要拿到它们的二进制码。</p><pre class=" language-python"><code class="language-python">url <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/favicon.ico'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(url.text)  # 打印时转化为 str 类型，图片直接转化为字符串，会出现乱码</span><span class="token comment" spellcheck="true"># print(url.content)  # 前带有一个b</span><span class="token comment" spellcheck="true"># wb 以二进制写入打开一个文件。如果该文件已存在，则将其覆盖。</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'favicon.ico'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># content 是将网页数据以二进制输出</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>url<span class="token punctuation">.</span>content<span class="token punctuation">)</span></code></pre><ul><li>post请求</li></ul><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'germey'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""2．POST方式网页的访问方式除了GET方式以外，还有POST方式。有一些网页，使用GET和POST方式访问同样的网址，得到的结果是不一样的。还有另外一些网页，只能使用POST方式访问，如果使用GET方式访问，网站会直接返回错误信息。此时就需要使用requests的post()方法来获取源代码。post()方法的格式如下：import requestsdata = {'key1': 'value1','key2': 'value2'}html_formdata = requests.post('网址', data=data).content.decode() 其中，data这个字典的内容和项数需要根据实际情况修改，Key和Value在不同的网站是不一样的。而做爬虫，构造这个字典是任务之一。还有一些网址，提交的内容需要是JSON格式的，因此post()方法的参数需要进行一些修改：html_json = requests.post('网址', json=data).content.decode() #使用JSON提交数据。这样写代码，requests可以自动将字典转换为JSON字符串。"""</span><span class="token comment" spellcheck="true"># 2.post方式的使用</span><span class="token comment" spellcheck="true"># 通过formdata提交数据</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'ouni'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">}</span>html_formdata <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://exercise.kingname.info/exercise_requests_post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html_formdata<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过JSON提交数据</span>html_formdata <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://exercise.kingname.info/exercise_requests_post'</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html_formdata<span class="token punctuation">)</span></code></pre><h3 id="2-2-2-高级用法"><a href="#2-2-2-高级用法" class="headerlink" title="2.2.2 高级用法"></a>2.2.2 高级用法</h3><ol><li>文件上传</li></ol><p>requests 可以 拟提交一些数据，假如有的网站需要上传文件，我们也可以用它来实现。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># favicon.ico 为文件名，此外还需注意路径。</span>files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span><span class="token string">'favicon.ico'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><ol start="2"><li>Cookies</li></ol><pre class=" language-python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> r<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> value<span class="token punctuation">)</span></code></pre><ol start="3"><li>会话维持</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 普通方法</span><span class="token comment" spellcheck="true"># requests.get("http://httpbin.org/cookies/set/number/123456789")</span><span class="token comment" spellcheck="true"># r = requests.get('http://httpbin.org/cookies')</span><span class="token comment" spellcheck="true"># print(r.text)</span><span class="token comment" spellcheck="true"># 使用 Session</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/cookies/set/number/123456789"</span><span class="token punctuation">)</span>r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/cookies'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><ol start="4"><li>SSL 证书验证</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用 verify 参数控制是否检查此证书</span><span class="token keyword">from</span> requests<span class="token punctuation">.</span>packages <span class="token keyword">import</span> urllib3urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.12306.cn'</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><ol start="5"><li>代理设置</li></ol><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''对于某些网站，在测试的时候请求几次，能正常获取内容 但是一旦开始大规模爬取，对于大规模且频繁的请求，网站可能会弹出验证码，或者跳转到登录认证页面，更甚者可能会直接封禁客户端，导致一定时间段内无法访问。为了防止这种情况发生，需要设置代理来解决这个问题，这就需要用到 proxies 参数'''</span><span class="token string">"使用 HTTP Basic Auth,可以使用类似 http://user:password@host:port 这样的语法来置代理，示例如下："</span><span class="token comment" spellcheck="true"># proxies = {</span><span class="token comment" spellcheck="true">#     'http': 'http://user:password@10.10.1.10:3128'</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># response = requests.get('https://www.taobao.com', proxies=proxies)</span><span class="token comment" spellcheck="true"># print(response)</span><span class="token comment" spellcheck="true"># pip install 'requests[socks]'</span><span class="token comment" spellcheck="true"># "除了基本的 HTTP 代理外， equests 还支持 SOCKS 协议的代理"</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># proxies = {</span><span class="token comment" spellcheck="true">#     'http': 'socks5://user:password@host:port',</span><span class="token comment" spellcheck="true">#     'https': 'socks5://user:password@host:port'</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># response = requests.get('https://www.taobao.com', proxies=proxies)</span><span class="token comment" spellcheck="true"># print(response)</span></code></pre><h2 id="2-3-正则表达式"><a href="#2-3-正则表达式" class="headerlink" title="2.3 正则表达式"></a>2.3 正则表达式</h2><h3 id="2-3-1-常用的匹配规则"><a href="#2-3-1-常用的匹配规则" class="headerlink" title="2.3.1 常用的匹配规则"></a>2.3.1 常用的匹配规则</h3><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201124104319661.png" alt="image-20201124104319661"></p><p>###2.3.2 match()</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> recontent <span class="token operator">=</span> <span class="token string">'Hello 123 4567 World_This is a Regex Demo'</span><span class="token comment" spellcheck="true"># print(len(content))</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^Hello\s\d\d\d\s\d{4}\s\w{10}'</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(result)</span><span class="token comment" spellcheck="true"># print(result.group())</span><span class="token comment" spellcheck="true"># print(result.span())</span></code></pre><ul><li>匹配目标</li></ul><p>刚才我们用 match() 方法可以得到匹配到的字符串内容，但是如果想从字符串中提 一部分内容，该怎么办呢？就像最前面的实例一样，从一段文本中提取出邮件或电话号码等内容。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""1.使用match()方法进行匹配，如果在起始位置匹配成功，则返回Match对象，否则返回None，语法格式：re.match(pattern, string, [flags])pattern：表示模式字符串，由要匹配的正则表达式转换而来string：表示要匹配的字符串flags：可选参数，表示标志位，用于控制匹配方式，如是否区分字母大小写。如下：   标志                       说明A或ASCII         对于\w \W \b \B \D \s \S 只进行ASCII匹配I或IGNORECASE    执行不区分字母大小写的匹配M或MULTILINE     将^和$用于包括整个字符串的开始和结尾的每一行S或DOTALL        使用(.)字符匹配所有字符，包括换行符X或VERBOSE       忽略模式字符串中未转义的空格和注释"""</span>pattern <span class="token operator">=</span> r<span class="token string">'mr_\w+'</span>string <span class="token operator">=</span> <span class="token string">'MR_SHOP mr_shop'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'匹配值的起始位置：'</span><span class="token punctuation">,</span> match<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'匹配值的结束位置：'</span><span class="token punctuation">,</span> match<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'匹配位置的元组：'</span><span class="token punctuation">,</span> match<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'要匹配的字符串：'</span><span class="token punctuation">,</span> match<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'匹配数据：'</span><span class="token punctuation">,</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">'项目名称MR_SHOP mr_shop'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token keyword">import</span> reresult <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^Hello\s(.*?)\s\w{10} (.*?)\s'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 25), match='Hello 123 4567 World_This'></span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Hello 123 4567 World_This</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1234567</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># is</span></code></pre><ul><li>修饰符</li></ul><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201124105453279.png" alt="image-20201124105453279"></p><h3 id="2-3-3-search"><a href="#2-3-3-search" class="headerlink" title="2.3.3 search()"></a>2.3.3 search()</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""search()方法用于整个字符串中搜索第一个匹配的值，如果匹配成功，则返回Match对象，否则返回None。语法格式如下：re.search(pattern, string, [flags])"""</span>pattern <span class="token operator">=</span> r<span class="token string">'mr_\w+'</span>string <span class="token operator">=</span> <span class="token string">'MR_SHOP mr_shop'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">'项目名称MR_SHOP mr_shop'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span></code></pre><h3 id="2-3-4-findall"><a href="#2-3-4-findall" class="headerlink" title="2.3.4 findall()"></a>2.3.4 findall()</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""findall()方法用于在整个字符串中搜索所有符合正则表达式的字符串，并以列表的形式返回。如果匹配成功，则返回包含匹配结构的列表，否则返回空列表。re.findall(pattern, string, [flags])"""</span>pattern <span class="token operator">=</span> r<span class="token string">'mr_\w+'</span>string <span class="token operator">=</span> <span class="token string">'MR_SHOP mr_shop'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">'项目名称MR_SHOP mr_shop'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>pattern <span class="token operator">=</span> r<span class="token string">'([1-9]{1,3}(\.[0-9]{1,3}){3})'</span>str1 <span class="token operator">=</span> <span class="token string">'127.0.0.1 192.168.1.66'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> match<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2-3-5-sub"><a href="#2-3-5-sub" class="headerlink" title="2.3.5 sub()"></a>2.3.5 sub()</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""sub()除了使用正则表达式提取信息外，有时候还需要借助它来修改文本,比如，想要把一串文本中的所有数字都去掉，如果只用字符串的 replace()方法，那就太烦琐了，这时可以借助 sub() 方法"""</span>content <span class="token operator">=</span> <span class="token string">'54aKS4yrsoiRS4ixSL2g数字'</span>content <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'\d+|[\u4e00-\u9fa5]'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></code></pre><h1 id="第三章、解析库的使用"><a href="#第三章、解析库的使用" class="headerlink" title="第三章、解析库的使用"></a>第三章、解析库的使用</h1><h2 id="3-1-使用-XPath"><a href="#3-1-使用-XPath" class="headerlink" title="3.1 使用 XPath"></a>3.1 使用 XPath</h2><p>XPath 全称 XML Path Language ，即 XML 路径语言，它是一门在 XML 文档中查找信息的语言。它最初是用来搜寻 XML 文档的，但是它同样适用于 HTML 文档的搜索。</p><p><a href="https://www.w3.org/TR/xpath">官方文档</a></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""XPath语句格式         核心思想：写XPath就是写地址。         获取文本：//标签1[@属性1="属性值1"]/标签2[@属性2="属性值2"]/..../text()获取属性值：//标签1[@属性1="属性值1"]/标签2[@属性2="属性值2"]/..../@属性n其中，[@属性="属性值"]不是必需的。它的作用是帮助过滤相同的标签。在不需要过滤相同标签的情况下可以省略。哪些属性可以省略&lt;ul>标签本身就没有属性，则写XPath的时候，其属性可以省略。标签有属性，但是如果这个标签的所有属性值都相同，则可以省略属性，例如&lt;li class="info">，所有的&lt;li>标签都有一个class属性，值都为info，所以属性可以省略。"""</span></code></pre><p>==<strong>对于 tboty 标签，实际匹配不到的，在写的时候需要注意</strong>==</p><h3 id="3-1-1-XPath-常用使用规则"><a href="#3-1-1-XPath-常用使用规则" class="headerlink" title="3.1.1 XPath 常用使用规则"></a>3.1.1 XPath 常用使用规则</h3><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从当前节点选取直接子节点</td></tr><tr><td>//</td><td>从当前节点选取子孙节点</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入lxml库</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment" spellcheck="true"># 读取text.html文件并转化为元素树对象</span>parse <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'text.html'</span><span class="token punctuation">,</span> parse<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 补充xpath表达式,获取所有书的名称</span><span class="token comment" spellcheck="true"># ********** Begin ********* #</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//book/title/text()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *********** End ********** #</span><span class="token comment" spellcheck="true"># 补充xpath表达式,获取所有书的价格</span><span class="token comment" spellcheck="true"># ********** Begin ********* #</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//book/price/text()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *********** End ********** #</span><span class="token comment" spellcheck="true"># 填写代码, 获取价格低于30的书名</span><span class="token comment" spellcheck="true"># ********** Begin ********* #</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//book/title[@class="good"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *********** End ********** #</span><span class="token comment" spellcheck="true"># 相对路径 book 节点选择</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//book[1]/title/text()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 相对路径 title 节点存在 class 属性条件选择</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//title[@class]/@class'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 同上, 但是使用了轴选择 class 属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//title[@class]/attribute::class'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绝对路径常规选择</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/bookstore//book[1]/title/@class'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5获取价格小于30的书名</span>book_name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book[price&lt;30]/title/text()"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>book_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6获取价格等于39.95的书</span>book_name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book[price=39.95]/title/text()"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>book_name<span class="token punctuation">)</span></code></pre><h3 id="3-1-2-所有节点"><a href="#3-1-2-所有节点" class="headerlink" title="3.1.2 所有节点"></a>3.1.2 所有节点</h3><p>例：html.xpath(‘//*’)</p><h3 id="3-1-3-子节点"><a href="#3-1-3-子节点" class="headerlink" title="3.1.3 子节点"></a>3.1.3 子节点</h3><p>例：html.xpath(‘//li/a’)</p><h3 id="3-1-4-子孙节点"><a href="#3-1-4-子孙节点" class="headerlink" title="3.1.4 子孙节点"></a>3.1.4 子孙节点</h3><p>例：html.xpath(‘//li//a’)</p><h3 id="3-1-5-父节点"><a href="#3-1-5-父节点" class="headerlink" title="3.1.5 父节点"></a>3.1.5 父节点</h3><p>选中 href 属性为 link4.html 节点，然后再获取其父节点，然后再获取其 class 属性，相关代码如下：</p><p>例：html.xpath(‘//a[@href=”link4.html”]/../@class’)</p><p>同时，也可以通过 parent:: 来获取父节点</p><p>html.xpath(‘//a[@href=”link4.html”]/parent::*/@class’)</p><h3 id="3-1-6-属性匹配"><a href="#3-1-6-属性匹配" class="headerlink" title="3.1.6 属性匹配"></a>3.1.6 属性匹配</h3><p>要选取 class 为 item-1 的 li节点，可以这样实现：</p><p>html.xpath(‘//li[@class=”itme-1”]’)</p><h3 id="3-1-7-文本获取"><a href="#3-1-7-文本获取" class="headerlink" title="3.1.7 文本获取"></a>3.1.7 文本获取</h3><p>html.xpath(‘//li[@class=”item-0”]/text()’)</p><h3 id="3-1-8属性获取"><a href="#3-1-8属性获取" class="headerlink" title="3.1.8属性获取"></a>3.1.8属性获取</h3><p>获取所有 li 节点下所有 节点的 href 属性</p><p>html.xpath(‘//li/a/@href’)</p><h3 id="3-1-9-属性多值匹配"><a href="#3-1-9-属性多值匹配" class="headerlink" title="3.1.9 属性多值匹配"></a>3.1.9 属性多值匹配</h3><pre class=" language-python"><code class="language-python">text <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;li class="li li-first">&lt;a href="link.html">first item&lt;/a>&lt;/li>"""</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''这里 HTML 文本中 li 节点的 class 属性有两个值 li li-first，此时如果还想用之前的属性匹配获取，就无法匹配了'''</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="li"]/a/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># result = html.xpath('//li[@class="li li-first"]/a/text()')</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这时就需要用 contains() 函数</span><span class="token triple-quoted-string string">'''这样通过 contains()方法，第一个参数传人属性名称，第二个参数传人属性值，只要此属性包含所传人的属性值，就可以完成匹配'''</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[contains(@class, "li")]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="3-1-10-多属性匹配"><a href="#3-1-10-多属性匹配" class="headerlink" title="3.1.10 多属性匹配"></a>3.1.10 多属性匹配</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""多属性匹配我们可能还遇到一种情况，那就是根据多个属性确定一个节点，这时就需要同时匹配多个属性 此时可以使用运算符 and 来连接，"""</span>text <span class="token operator">=</span> <span class="token string">'&lt;li class="li li-first" name="item">&lt;a href="link.html">first item&lt;/a>&lt;/li>'</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[contains(@class, "li") and @name="item"]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><strong>运算符及其介绍</strong><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201124143721294.png" alt="image-20201124143721294"></p><h3 id="3-1-11-按序选择"><a href="#3-1-11-按序选择" class="headerlink" title="3.1.11 按序选择"></a>3.1.11 按序选择</h3><p> <a href="..........%5Clearning%5Cspider%5Cproject%5C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%5Ctext.html">text.html</a> </p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""按序选择有时候，我们在选择的时候某些属性可能同时匹配了多个节点，但是只想要其中的某个节点，如第二个节点或者最后一个节点，"""</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'../text.html'</span><span class="token punctuation">,</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/a/text()'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选取第一个 li 节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[last()]/a/text()'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 最后一个 li 节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[position()&lt;4]/a/text()'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选取位置小于四的节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[last()-2]/a/text()'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 倒数第三个节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="3-1-12-节点轴选择"><a href="#3-1-12-节点轴选择" class="headerlink" title="3.1.12 节点轴选择"></a>3.1.12 节点轴选择</h3><p>XPath 提供了很多节点轴选择方法，包括获取子元素 、兄弟元素、父元素、祖先元素等，示例如下：</p><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'../text.html'</span><span class="token punctuation">,</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.调用 ancestor 轴，获取所有祖先节点。然后是节点的选择器，这里直接使用*，表示匹配所有节点</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/ancestor::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.改 * 为 div ，这样得到的结果只有div这个祖先节点了</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/ancestor::div'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.调用 attribute 轴，获取所有属性值。其后跟的选择器还是＊，这代</span><span class="token comment" spellcheck="true"># 获取节点的所有属性，返回值就是 li 节点的所有属性值</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/attribute::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.调用了 child 轴，可以获取所有直接子节点 这里我们又加了限定条件，选</span><span class="token comment" spellcheck="true"># href 属性为 link1.html 的a节点</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/child::a[@href="link1.html"]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5.调用 descendant 轴，可以获取所有子孙节点。这里有添加限定条件获取span节点，所以返回的结果只包含span节点</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/descendant::span'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6.调用 following 轴，可以获取当前节点之后的所有节点。</span><span class="token comment" spellcheck="true"># 虽然这里使用*匹配，但又加了索引选择，所以只获取了第二个后续节点</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/following::*[2]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7.调用 following-sibling 轴，可以获取当前节点之后的所有同级节点。</span><span class="token comment" spellcheck="true"># 这里我们使用 * 匹配，所以获取了所有后续同级节点。</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/following-sibling::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><a href="http://www.w3school.com.cn/xpath/index.asp">更多xpath用法</a></p><h2 id="3-2-使用-Beautiful-Soup"><a href="#3-2-使用-Beautiful-Soup" class="headerlink" title="3.2 使用 Beautiful Soup"></a>3.2 使用 Beautiful Soup</h2><h3 id="3-2-1-基本用法"><a href="#3-2-1-基本用法" class="headerlink" title="3.2.1 基本用法"></a>3.2.1 基本用法</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""基本用法"""</span>html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head> &lt;body> &lt;p class="title" name="dromouse">&lt;b>The Dormouse's story&lt;/b>&lt;/p> &lt;p class="story">Once upon a time there were three little sisters; and their names were &lt;a href="http://example.com/elsie" class="sister" id="link1">&lt;!-- Elsie -->&lt;/a>, &lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and &lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>; and they lived at the bottom of a well.&lt;/p> &lt;p class="story">...&lt;/p>'''</span><span class="token string">'对于不标准的 HTML 字符串, BeautifulSoup 可以自动更正格式'</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token string">'调用 prettify()方法 这个方法可以把要解析的字符串以标准的缩进格式输出'</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span></code></pre><h3 id="3-2-2-节点选择器"><a href="#3-2-2-节点选择器" class="headerlink" title="3.2.2 节点选择器"></a>3.2.2 节点选择器</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""节点选择器直接调用节点的名称就可以选择节点元素，再调用 string 属性就可以得到节点内的文本了，这种选择方式速度非常快。如果单个节点结构层次非常清晰，可以选用这种方式来解析"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'bs4.element.Tag'></span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;title>The Dormouse's story&lt;/title></span><span class="token comment" spellcheck="true"># 获取名称。利用 name 属性获取节点的名称</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;p class="title" name="dromouse">&lt;b>The Dormouse's story&lt;/b>&lt;/p></span><span class="token string">'attrs 的返回结果是字典形式，它把选择的节点的所有属性和属性值组合成一个字典'</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'class': ['title'], 'name': 'dromouse'}</span><span class="token triple-quoted-string string">'''这里需要注意的是，有的返回结果是字符串，有的返回结果是字符串组成的列表 比如， name属性的值是唯一的，返回的结果就是单个字符串,而对于 class 一个节点元素可能有多个 class 所以返回的是列表'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dromouse</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['title']</span><span class="token comment" spellcheck="true"># 获取内容。可以利用 string 属性获取节点元素包含的文本内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># The Dormouse's story</span></code></pre><h3 id="3-2-3-关联选择"><a href="#3-2-3-关联选择" class="headerlink" title="3.2.3 关联选择"></a>3.2.3 关联选择</h3><ol><li>子节点和子孙节点</li></ol><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;html> &lt;head>  &lt;title>The Dormouse's story&lt;/title> &lt;/head> &lt;body>  &lt;p class="story">   Once upon a time there were three little sisters; and their names were   &lt;a  href="http://example.com/elsie" class="sister" id="link1">    &lt;span>Elsie&lt;/span>   &lt;/a>   &lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a>    and   &lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>and they lived at the bottom of a well.  &lt;/p>  &lt;p class="story">...&lt;/p>'''</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 得到p标签下的子节点</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> child <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果要得到所有的子孙节点的话，可以调用 descendants 属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;generator object Tag.descendants at 0x00000143C3039EC8></span><span class="token keyword">for</span> i<span class="token punctuation">,</span> child <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> child<span class="token punctuation">)</span></code></pre><ol start="2"><li>父节点和祖先节点</li></ol><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""父节点和祖先节点如果要获取某个节点元素的父节点，可以调用 parent 属性"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parents<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'generator'></span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parents<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>兄弟节点</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Next Sibling'</span><span class="token punctuation">,</span> soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Prev Sibling'</span><span class="token punctuation">,</span> soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>previous_sibling<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Next Siblings'</span><span class="token punctuation">,</span> list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_siblings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Prev Siblings'</span><span class="token punctuation">,</span> list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>previous_siblings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># next_sibling 和 previous_sibling 分别获取节点的下一个和上一个兄弟元素，</span><span class="token comment" spellcheck="true"># next_siblings 和 previous_siblings 分别返回所有前面和后面的兄弟节点的生成器。</span></code></pre><h3 id="3-2-4-方法选择器"><a href="#3-2-4-方法选择器" class="headerlink" title="3.2.4 方法选择器"></a>3.2.4 方法选择器</h3><ul><li>find_all()</li></ul><p>查询所有符合条件的元素</p><p>API 如下：</p><p>find_all(name , attrs , recursive , text , **kwargs) </p><ol><li>name。根据节点名来查询元素</li></ol><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="panel">&lt;div class="panel-heading">&lt;h4>Hello&lt;/h4> &lt;/div> &lt;div class="panel-body"> &lt;li class="list" id="list-1">&lt;li class="element">Foo&lt;/li> &lt;li class="element">Bar&lt;/li> &lt;li class="element">Jay&lt;/li> &lt;ul>&lt;li class="element">Fool&lt;/li> &lt;/ul> &lt;ul class="list list-small" id="list-2">&lt;li class="element">Foo&lt;/li> &lt;li class="element">Bar&lt;/li> &lt;/ul> &lt;/div> &lt;/div>'''</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'bs4.element.Tag'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'bs4.element.ResultSet'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'bs4.element.Tag'></span><span class="token keyword">for</span> ul <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(ul.find_all(name='li'))</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> ul<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>string<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span></code></pre><ol start="2"><li>attrs。根据属性来查询。</li></ol><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="panel">&lt;div class="panel-heading">&lt;h4>Hello&lt;/h4> &lt;/div> &lt;div class="panel-body"> &lt;ul class="list" id="list-1" name="elements">&lt;li class="element">Foo&lt;/li> &lt;li class="element">Bar&lt;/li> &lt;li class="element">Jay&lt;/li> &lt;/ul>&lt;ul class="list list-small" id="list-2">&lt;li class="element">Foo&lt;/li> &lt;li class="element">Bar&lt;/li> &lt;/ul> &lt;/div> &lt;/div>'''</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'list-1'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(soup.find_all(id='list-1'))</span><span class="token comment" spellcheck="true"># print(soup.find_all(attrs={'name': 'elements'}))</span><span class="token comment" spellcheck="true"># print(type(soup.find_all(attrs={'name': 'elements'})))  # &lt;class 'bs4.element.ResultSet'></span></code></pre><ol start="3"><li>text。匹配节点的文本，传入的形式可以是字符串，可以是正则表达式对象。</li></ol><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""text"""</span>html <span class="token operator">=</span> <span class="token triple-quoted-string string">''' &lt;div class="panel"> &lt;div class="panel-body">&lt;a>Hello, this is a link&lt;/a> &lt;a>Hello, this is a link, too&lt;/a> &lt;/div> &lt;/div>'''</span><span class="token triple-quoted-string string">"""这里有两个a节点，其内部包含文本信息。这里在find_all()方法 传人 text 参数 该参数为正则表达式对象，结果返回所有匹配正则表达式的节点文本组成的列表。"""</span><span class="token keyword">import</span> resoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Hello, this is a link', 'Hello, this is a link, too']</span></code></pre><ul><li>find()。返回的是单个元素 ，也就是第一个匹配的元素。</li></ul><h1 id="第四章、数据存储"><a href="#第四章、数据存储" class="headerlink" title="第四章、数据存储"></a>第四章、数据存储</h1><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201124155850837.png"></p><h2 id="4-1-文件存储"><a href="#4-1-文件存储" class="headerlink" title="4.1 文件存储"></a>4.1 文件存储</h2><h3 id="4-1-1-TXT-文本存储"><a href="#4-1-1-TXT-文本存储" class="headerlink" title="4.1.1 TXT 文本存储"></a>4.1.1 TXT 文本存储</h3><blockquote><pre class=" language-python"><code class="language-python">使用Python打开文件，有两种写法。第<span class="token number">1</span>种方式如下：f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'文件路径'</span><span class="token punctuation">,</span> <span class="token string">'文件操作方式'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>对文件进行操作f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>第<span class="token number">2</span>种方式，使用Python的上下文管理器：<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'文件路径'</span><span class="token punctuation">,</span> <span class="token string">'文件操作方式'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  对文件进行操作第<span class="token number">1</span>种方式需要手动关闭文件，但是在程序开发中经常会出现忘记关闭文件的情况。第<span class="token number">2</span>种方法不需要手动关闭文件，只要代码退出了缩进，Python就会自动关闭文件。 </code></pre></blockquote><pre class=" language-python"><code class="language-python">使用Python写文本文件    使用Python写文件也需要先打开文件，使用如下代码来打开文件：<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'new.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'../text.txt'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content_list <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取所有行，以列表形式返回结果</span>    <span class="token comment" spellcheck="true"># content_list = f.read()  # 直接把文件里面的全部内容用一个字符串返回</span>    <span class="token comment" spellcheck="true"># content_list = f.readline()  # 读取一行数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content_list<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'../text2.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"hello,world\n"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># f.write("hello,python")</span>    f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\n第一段\n'</span><span class="token punctuation">,</span> <span class="token string">'第二段'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="4-1-2-JSON-文件存储"><a href="#4-1-2-JSON-文件存储" class="headerlink" title="4.1.2 JSON 文件存储"></a>4.1.2 JSON 文件存储</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用 JSON 库的 loads() 方法将 JSON 文本字符串转为 JSON 对象。</span><span class="token comment" spellcheck="true"># 通过 dumps() 方法将 JSON 对象转为文本字符串。</span><span class="token keyword">import</span> jsondata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'王伟'</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    <span class="token string">'birthday'</span><span class="token punctuation">:</span> <span class="token string">'1992-10-18'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data3.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里为了输出中文，要指定参数 ensure_ascii 为 false</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-1-3-CSV-文件存储"><a href="#4-1-3-CSV-文件存储" class="headerlink" title="4.1.3 CSV 文件存储"></a>4.1.3 CSV 文件存储</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> csvdata <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mike1'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mike2'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'子'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mike3'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># newline=''不空行</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data3.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    fieldnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> fieldnames<span class="token operator">=</span>fieldnames<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><h2 id="4-2-关系型数据库存储"><a href="#4-2-关系型数据库存储" class="headerlink" title="4.2 关系型数据库存储"></a>4.2 关系型数据库存储</h2><h3 id="4-2-1-MySQL-的存储"><a href="#4-2-1-MySQL-的存储" class="headerlink" title="4.2.1 MySQL 的存储"></a>4.2.1 MySQL 的存储</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_data_mysql</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1.连接数据库</span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'qaz3357375'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建数据库</span>    <span class="token comment" spellcheck="true"># cursor.execute('CREATE DATABASE if not exists spiders DEFAULT CHARACTER SET utf8')</span>    <span class="token comment" spellcheck="true"># cursor.execute('use spiders')</span>        <span class="token comment" spellcheck="true"># 2.创建表</span>    sql <span class="token operator">=</span> <span class="token string">'create table if not exists zhaopin(position varchar(235), '</span> \          <span class="token string">'salary varchar(235), '</span> \          <span class="token string">'work_place varchar(235), '</span> \          <span class="token string">'Number_recruiters varchar(235), '</span> \          <span class="token string">'operating_duty varchar(235), '</span> \          <span class="token string">'requirement varchar(235), '</span> \          <span class="token string">'Release_time varchar(235)'</span> \          <span class="token string">')charset utf8'</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3.插入数据</span>    table <span class="token operator">=</span> <span class="token string">'表名'</span>    keys <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    values <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">'insert into {table}({keys}) values({values})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token operator">=</span>table<span class="token punctuation">,</span> keys<span class="token operator">=</span>keys<span class="token punctuation">,</span> values<span class="token operator">=</span>values<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> tuple<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Successful'</span><span class="token punctuation">)</span>            db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Failed'</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭连接</span>    db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据导入</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'qaz3357375'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">,</span> local_infile<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">'create table if not exists house_data('</span> \<span class="token string">'title varchar(1235), '</span> \<span class="token string">'type varchar(1235), '</span> \<span class="token string">'area varchar(1235), '</span> \<span class="token string">'price_square_meter '</span> \<span class="token string">'varchar(1235), '</span> \<span class="token string">'total_price varchar(1235), '</span> \<span class="token string">'orientation varchar(1235), '</span> \<span class="token string">'floor varchar(1235), '</span> \<span class="token string">'address varchar(1235)'</span> \<span class="token string">')charset utf8'</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"load data local infile '路径/文件名.csv' into table 表名 fields terminated by ',' lines terminated by '\n' ignore 1 lines"</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4-3-非关系型数据库存储"><a href="#4-3-非关系型数据库存储" class="headerlink" title="4.3 非关系型数据库存储"></a>4.3 非关系型数据库存储</h2><h3 id="4-3-1-MongoDB-存储"><a href="#4-3-1-MongoDB-存储" class="headerlink" title="4.3.1 MongoDB 存储"></a>4.3.1 MongoDB 存储</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_data_mongodb</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1.连接MongoDB</span>    client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#  指定数据库</span>    db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'数据库名'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 指定集合</span>    collection <span class="token operator">=</span> db<span class="token punctuation">[</span><span class="token string">'集合名'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        collection<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">insert_data_mongo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1.连接MongoDB</span>    client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2.指定数据库</span>    db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 3.指定集合</span>    collection <span class="token operator">=</span> db<span class="token punctuation">[</span><span class="token string">'zhaopin'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 4.插入多条数据</span>    collection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><h1 id="第五章、Ajax数据爬取"><a href="#第五章、Ajax数据爬取" class="headerlink" title="第五章、Ajax数据爬取"></a>第五章、Ajax数据爬取</h1><h1 id="第六章、动态渲染页面爬取"><a href="#第六章、动态渲染页面爬取" class="headerlink" title="第六章、动态渲染页面爬取"></a>第六章、动态渲染页面爬取</h1><h2 id="6-1-Selenium-的使用"><a href="#6-1-Selenium-的使用" class="headerlink" title="6.1 Selenium 的使用"></a>6.1 Selenium 的使用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWaitbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>    input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>    wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'content_left'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>current_url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>访问页面</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>查找节点</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 单节点</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>input_first <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 根据 id 值查找</span>input_second <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#q'</span><span class="token punctuation">)</span>input_third <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="q"]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_first<span class="token punctuation">,</span> input_second<span class="token punctuation">,</span> input_third<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多节点</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>lis <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[4]/div[1]/div/div[1]/div/ul/li'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>获取属性</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取属性</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/explore'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>logo <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="special"]/div[2]/div/div[2]/a/img'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span>src <span class="token operator">=</span> logo<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(src)</span>tp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'图片.png'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># browser.close()</span></code></pre><ul><li>获取文本</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/explore'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[1]/div/main/div[2]/div[3]/div[2]/div/div[3]/div[2]/div[1]/a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="1-使用框架爬取猫眼top100的信息"><a href="#1-使用框架爬取猫眼top100的信息" class="headerlink" title="1. 使用框架爬取猫眼top100的信息"></a>1. 使用框架爬取猫眼top100的信息</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># maoyan.py 这里是文件名</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> maoyanPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> MaoyanproItem<span class="token keyword">class</span> <span class="token class-name">MaoyanSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'maoyan'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['https://maoyan.com/board/4?offset=0']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://maoyan.com/board/4?offset=0'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        dd_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div/div/div[1]/dl/dd'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(dd_list)</span>        <span class="token keyword">for</span> dd <span class="token keyword">in</span> dd_list<span class="token punctuation">:</span>            item <span class="token operator">=</span> MaoyanproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> dd<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">"actor"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dd<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div//p[@class="star"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"time"</span><span class="token punctuation">]</span> <span class="token operator">=</span> dd<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div//p[@class="releasetime"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"score"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dd<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'p.score i::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">yield</span> item        next_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]//div[2]/ul/li[last()]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> next_url <span class="token operator">!=</span> <span class="token string">'javascript:void(0);'</span><span class="token punctuation">:</span>            next_url <span class="token operator">=</span> <span class="token string">'https://maoyan.com/board/4'</span> <span class="token operator">+</span> next_url            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>next_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>                                         <span class="token comment" spellcheck="true"># items.py 这里是文件名            </span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MaoyanproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    actor <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    time <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    score <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pipelines.py 这里是文件名</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> maoyanPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> MaoyanproItem<span class="token comment" spellcheck="true"># client = pymongo.MongoClient(host='localhost', port=27017)</span><span class="token comment" spellcheck="true"># db = client['test']</span><span class="token comment" spellcheck="true"># collection = db['maoyan_2']</span><span class="token comment" spellcheck="true"># class MaoyanproPipeline(object):</span><span class="token comment" spellcheck="true">#     def process_item(self, item, spider):</span><span class="token comment" spellcheck="true">#         print(item)</span><span class="token comment" spellcheck="true">#         collection.insert_one(dict(item))</span><span class="token comment" spellcheck="true">#         return item</span><span class="token comment" spellcheck="true"># import pymysql</span><span class="token comment" spellcheck="true"># from maoyan import settings</span><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">MaoyanPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        actor <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'actor'</span><span class="token punctuation">]</span>        time <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span>        score <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># ********** Begin **********#</span>        <span class="token comment" spellcheck="true"># 1.连接数据库</span>        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接的是本地数据库</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 数据库端口名</span>            user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 自己的mysql用户名</span>            passwd<span class="token operator">=</span><span class="token string">'qaz3357375'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 自己的密码</span>            db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 数据库的名字</span>            charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 默认的编码方式</span>        <span class="token punctuation">)</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token string">'create table if not exists mymovies(title varchar(235), actor varchar(235), time varchar(235), score varchar(235))charset utf8'</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># sql = 'insert into mymovies values (\'%s\',\'%s\',\'%s\',\'%s\')' % (name, starts, releasetime, score)</span>            sql <span class="token operator">=</span> <span class="token string">'insert into mymovies values ("%s","%s","%s","%s")'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> actor<span class="token punctuation">,</span> time<span class="token punctuation">,</span> score<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token operator">+</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'错误：{e}'</span><span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><h3 id="2-爬取豆瓣电影数据"><a href="#2-爬取豆瓣电影数据" class="headerlink" title="2. 爬取豆瓣电影数据"></a>2. 爬取豆瓣电影数据</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">import</span> requests<span class="token keyword">import</span> pymysql<span class="token keyword">import</span> os<span class="token triple-quoted-string string">'''需求分析：此网站为ajax加载1.爬豆瓣电影数据的名称，评分，图片，视频url。2.写入到csv和MySQL数据库'''</span><span class="token string">'https://www.douban.com'</span><span class="token string">'https://movie.douban.com/'</span><span class="token string">'https://movie.douban.com/explore#!type=movie&amp;tag=%E6%9C%80%E6%96%B0&amp;page_limit=20&amp;page_start=0'</span><span class="token string">'https://movie.douban.com/j/search_subjects?type=movie&amp;tag=%E6%9C%80%E6%96%B0&amp;page_limit=20&amp;page_start=0'</span><span class="token string">'https://movie.douban.com/explore#!type=movie&amp;tag=%E6%9C%80%E6%96%B0&amp;page_limit=20&amp;page_start=20'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">response_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'movie'</span><span class="token punctuation">,</span>            <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token string">'最新'</span><span class="token punctuation">,</span>            <span class="token string">'page_limit'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span>            <span class="token string">'page_start'</span><span class="token punctuation">:</span> i        <span class="token punctuation">}</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> movie <span class="token keyword">in</span> response<span class="token punctuation">[</span><span class="token string">'subjects'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            title <span class="token operator">=</span> movie<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>            score <span class="token operator">=</span> movie<span class="token punctuation">[</span><span class="token string">'rate'</span><span class="token punctuation">]</span>            video_url <span class="token operator">=</span> movie<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>            img <span class="token operator">=</span> movie<span class="token punctuation">[</span><span class="token string">'cover'</span><span class="token punctuation">]</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">'title'</span><span class="token punctuation">:</span> title<span class="token punctuation">,</span>                <span class="token string">'score'</span><span class="token punctuation">:</span> score<span class="token punctuation">,</span>                <span class="token string">'video_url'</span><span class="token punctuation">:</span> video_url<span class="token punctuation">,</span>                <span class="token string">'img'</span><span class="token punctuation">:</span> img            <span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 存储图片</span>            path <span class="token operator">=</span> <span class="token string">'douban_img/'</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            img_name <span class="token operator">=</span> img<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token operator">+</span>img_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># insert_csv(data_list)</span><span class="token keyword">def</span> <span class="token function">insert_csv</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./豆瓣.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        fieldnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">,</span> <span class="token string">'video_url'</span><span class="token punctuation">,</span> <span class="token string">'img'</span><span class="token punctuation">]</span>        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> fieldnames<span class="token operator">=</span>fieldnames<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># insert_mysql()</span><span class="token keyword">def</span> <span class="token function">insert_mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'qaz3357375'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'spiders2'</span><span class="token punctuation">,</span> local_infile<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">'create table if not exists douban(title varchar(235), score varchar(235), video_url varchar(235), img varchar(235))'</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">"load data local infile 'D:/learning/spider/project/爬虫案例/豆瓣.csv' into table douban fields terminated by ',' lines terminated by '\n' ignore 1 lines"</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'错误：{e}'</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/j/search_subjects?'</span>    response_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><h3 id="3-爬取小说"><a href="#3-爬取小说" class="headerlink" title="3.爬取小说"></a>3.爬取小说</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> parsel<span class="token keyword">import</span> requests<span class="token string">'https://www.xsbiquge.com'</span><span class="token string">'https://www.xsbiquge.com/20_20331/1135932.html'</span><span class="token string">'https://www.xsbiquge.com/20_20331/1135933.html'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.xsbiquge.com'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0'</span><span class="token punctuation">,</span>    <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate, br'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.baidu.com/link?url=gREzciPAbw8dLQOU3UGpX-fvNBEUVHtO7HU5hwdzIgWZIbq9jRhRSkYosvPBCdRP&amp;wd=&amp;eqid=cf2722fb00007d98000000045fb2203b'</span><span class="token punctuation">,</span>    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'PPad_id_PP=3; bcolor=; font=; size=; fontcolor=; width='</span><span class="token punctuation">,</span>    <span class="token string">'Upgrade-Insecure-Requests'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'If-Modified-Since'</span><span class="token punctuation">:</span> <span class="token string">'Sun, 15 Nov 2020 16:52:47 GMT'</span><span class="token punctuation">,</span>    <span class="token string">'If-None-Match'</span><span class="token punctuation">:</span> <span class="token string">'W/"5fb15cdf-353e1"'</span><span class="token punctuation">,</span>    <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=0'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">urls_info</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(response)</span>    sel <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    htmls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    use_info <span class="token operator">=</span> sel<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'dl dd a::attr(href)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> use_info<span class="token punctuation">:</span>        htmls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(htmls)</span>    page_content<span class="token punctuation">(</span>htmls<span class="token punctuation">)</span><span class="token string">'&lt;dl>'</span><span class="token string">'&lt;dd>&lt;a href="/20_20331/1135932.html">第1章 八百年后&lt;/a>&lt;/dd>'</span><span class="token string">'&lt;/dl>'</span><span class="token keyword">def</span> <span class="token function">page_content</span><span class="token punctuation">(</span>htmls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> html <span class="token keyword">in</span> htmls<span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>html<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token string">'02_万古神帝/'</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        sel <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        title <span class="token operator">=</span> sel<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'h1::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>        contents <span class="token operator">=</span> sel<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'div#content::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getall<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> content <span class="token keyword">in</span> contents<span class="token punctuation">:</span>            content <span class="token operator">=</span> str<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;#039'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token operator">+</span>str<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token string">'html body div#wrapper div.content_read div.box_con div#content'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.xsbiquge.com/20_20331/'</span>    urls_info<span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><h3 id="4-使用scrapy框架爬取小说"><a href="#4-使用scrapy框架爬取小说" class="headerlink" title="4.使用scrapy框架爬取小说"></a>4.使用scrapy框架爬取小说</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> wanguPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> WanguproItem<span class="token keyword">class</span> <span class="token class-name">WanguSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'wangu'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['www.xsbiquge.com/20_20331/']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.xsbiquge.com/20_20331//'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        detail_urls <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="list"]/dl/dd/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> detail_url <span class="token keyword">in</span> detail_urls<span class="token punctuation">:</span>            detail_url <span class="token operator">=</span> <span class="token string">'https://www.xsbiquge.com'</span> <span class="token operator">+</span> detail_url            <span class="token comment" spellcheck="true"># print(detail_url)</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>detail_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>detail_parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">detail_parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="content"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\xa0\xa0\xa0\xa0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;#039;'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(title)</span>        item <span class="token operator">=</span> WanguproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        <span class="token keyword">yield</span> item <span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">WanguproPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> <span class="token string">'万古神帝/'</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        title <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> title<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{title} 写入成功'</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token operator">+</span>title<span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><h3 id="5-爬取前程无忧招聘数据-正则"><a href="#5-爬取前程无忧招聘数据-正则" class="headerlink" title="5.爬取前程无忧招聘数据(正则)"></a>5.爬取前程无忧招聘数据(正则)</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> csv<span class="token string">'https://search.51job.com'</span><span class="token string">'https://search.51job.com/list/190000,000000,0000,00,9,99,Java,2,1.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare='</span><span class="token string">'https://search.51job.com/list/190000,000000,0000,00,9,99,python,2,1.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare='</span><span class="token string">'https://search.51job.com/list/190000,000000,0000,00,9,99,python,2,2.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare='</span><span class="token string">'https://search.51job.com/list/190000,000000,0000,00,9,99,python,2,1.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare='</span><span class="token triple-quoted-string string">'''lang: cpostchannel: 0000workyear: 99cotype: 99degreefrom: 99jobterm: 99companysize: 99ord_field: 0dibiaoid: 0line: welfare: '''</span>word <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入搜索关键字：'</span><span class="token punctuation">)</span>base_url <span class="token operator">=</span> <span class="token string">'https://search.51job.com/list/190000,000000,0000,00,9,99,{},2,{}.html?'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'</span><span class="token punctuation">}</span>params <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'lang'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    <span class="token string">'postchannel'</span><span class="token punctuation">:</span> <span class="token string">'0000'</span><span class="token punctuation">,</span>    <span class="token string">'workyear'</span><span class="token punctuation">:</span> <span class="token string">'99'</span><span class="token punctuation">,</span>    <span class="token string">'cotype'</span><span class="token punctuation">:</span> <span class="token string">'99'</span><span class="token punctuation">,</span>    <span class="token string">'degreefrom'</span><span class="token punctuation">:</span> <span class="token string">'99'</span><span class="token punctuation">,</span>    <span class="token string">'jobterm'</span><span class="token punctuation">:</span> <span class="token string">'99'</span><span class="token punctuation">,</span>    <span class="token string">'companysize'</span><span class="token punctuation">:</span> <span class="token string">'99'</span><span class="token punctuation">,</span>    <span class="token string">'ord_field'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>    <span class="token string">'dibiaoid'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>    <span class="token string">'line'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'welfare'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">}</span>end_page <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入结束页："</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>end_page<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> base_url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>word<span class="token punctuation">,</span> end_page<span class="token punctuation">)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(response)</span>    <span class="token comment" spellcheck="true"># position = re.findall(r'', response, re.S)</span>    <span class="token comment" spellcheck="true"># work_place = re.findall(r'', response, re.S)</span>    <span class="token comment" spellcheck="true"># salary = re.findall(r'', response, re.S)[0]</span>    <span class="token comment" spellcheck="true"># update = re.findall(r'', response, re.S)</span>    <span class="token comment" spellcheck="true"># welfare = re.findall(r'', response, re.S)</span>    <span class="token comment" spellcheck="true"># company = re.findall(r'', response, re.S)</span>    <span class="token comment" spellcheck="true"># company_type = re.findall(r'', response, re.S)</span>    <span class="token comment" spellcheck="true"># work_year = re.findall(r'',response, re.S)</span>    pattern <span class="token operator">=</span> r<span class="token string">'"job_name":"(.*?)".*?"company_name":"(.*?)".*?providesalary_text":"(.*?)".*?"workarea_text":"(.*?)".*?companytype_text":"(.*?)".*?workyear":"(.*?)".*?"issuedate":"(.*?)".*?jobwelf":"(.*?)"'</span>    content <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> response<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(content)</span>    <span class="token keyword">for</span> info <span class="token keyword">in</span> content<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'position'</span><span class="token punctuation">:</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'company'</span><span class="token punctuation">:</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'salary'</span><span class="token punctuation">:</span> info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'work_place'</span><span class="token punctuation">:</span> info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'company_type'</span><span class="token punctuation">:</span> info<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'work_year'</span><span class="token punctuation">:</span> info<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'update'</span><span class="token punctuation">:</span> info<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'welfare'</span><span class="token punctuation">:</span> info<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'前程.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    fieldnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'position'</span><span class="token punctuation">,</span> <span class="token string">'company'</span><span class="token punctuation">,</span> <span class="token string">'salary'</span><span class="token punctuation">,</span> <span class="token string">'work_place'</span><span class="token punctuation">,</span> <span class="token string">'company_type'</span><span class="token punctuation">,</span> <span class="token string">'work_year'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">'welfare'</span><span class="token punctuation">]</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> fieldnames<span class="token operator">=</span>fieldnames<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span></code></pre><h3 id="6-爬取图片（使用xpath）"><a href="#6-爬取图片（使用xpath）" class="headerlink" title="6.爬取图片（使用xpath）"></a>6.爬取图片（使用xpath）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span>            <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0'</span>    <span class="token punctuation">}</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://pic.netbian.com/4kdongman/index_{}.html'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 数据解析</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./picLibs_dongman'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./picLibs_dongman'</span><span class="token punctuation">)</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            img_href <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># /tupian/26531.html</span>            img_href <span class="token operator">=</span> <span class="token string">'http://pic.netbian.com'</span><span class="token operator">+</span>img_href            <span class="token comment" spellcheck="true"># print(img_href)  # http://pic.netbian.com/tupian/26531.html</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_href<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text            tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>            img_src <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="photo-pic"]/a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            img_src <span class="token operator">=</span> <span class="token string">'http://pic.netbian.com'</span><span class="token operator">+</span>img_src            <span class="token comment" spellcheck="true"># print(img_src)  # http://pic.netbian.com/uploads/allimg/201113/003901-1605199141caf8.jpg</span>            img_name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="photo-pic"]/a/img/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            img_name <span class="token operator">=</span> img_name<span class="token operator">+</span><span class="token string">'.jpg'</span>            img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>            img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            img_path <span class="token operator">=</span> <span class="token string">'picLibs_dongman/'</span><span class="token operator">+</span>img_name            <span class="token keyword">with</span> open<span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{img_name} 下载成功'</span><span class="token punctuation">)</span></code></pre><h3 id="7-爬取招聘信息（xpath-base64）"><a href="#7-爬取招聘信息（xpath-base64）" class="headerlink" title="7.爬取招聘信息（xpath,base64）"></a>7.爬取招聘信息（xpath,base64）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token keyword">import</span> csv<span class="token keyword">import</span> pymysql<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> time<span class="token string">'http://localhost:8080/getPosition?id=MTA4MQ=='</span><span class="token string">'id="1082"'</span><span class="token string">'http://localhost:8080/getPosition?id=MTA4Mg=='</span><span class="token string">'http://localhost:8080/getPosition?id=MTA4Mw=='</span><span class="token string">'http://localhost:8080/getPosition?id=MTA4Ng=='</span><span class="token string">'MTA4MQ'</span><span class="token string">'1081'</span><span class="token string">'http://localhost:8080/page/MS1hbGljZQ==/12/749'</span><span class="token string">'http://localhost:8080/page/Mi1hbGljZQ==/12/749'</span><span class="token string">'http://localhost:8080/page/My1hbGljZQ==/12/749'</span><span class="token string">'http://localhost:8080/page/NC1hbGljZQ==/12/749'</span><span class="token string">'http://localhost:8080/page/NS1hbGljZQ==/12/749'</span><span class="token string">'http://localhost:8080/page/Mi1hbGljZQ==/12/749'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'</span><span class="token punctuation">}</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">detail_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-alice'</span>        result <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>page<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">'http://localhost:8080/page/'</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">'/12/749'</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        id_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//legend/a/@id'</span><span class="token punctuation">)</span>        edu_level_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="article-list"]//div/fieldset//div[1]/div[4]/text()'</span><span class="token punctuation">)</span>        create_time_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="info"]/span[2]/text()'</span><span class="token punctuation">)</span>        company_size_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="layui-row"]/div[@class="layui-col-md2"]/span/text()'</span><span class="token punctuation">)</span>        workingExp_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="article-list"]/div//fieldset//div[1]/div[3] /text()'</span><span class="token punctuation">)</span>        company_name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        job_name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        salary_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        city_name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        welfare_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        responsibility_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        place_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>            result <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>i<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(result)</span>            detail_url <span class="token operator">=</span> <span class="token string">'http://localhost:8080/getPosition?id='</span> <span class="token operator">+</span> result            <span class="token comment" spellcheck="true"># print(detail_url)</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>detail_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>            company_name <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="affix-side"]/div[1]/div/div/div[2]/p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            company_name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>company_name<span class="token punctuation">)</span>            job_name <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            job_name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>job_name<span class="token punctuation">)</span>            salary <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="layui-card"]/div[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            salary_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>salary<span class="token punctuation">)</span>            city_name <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="affix-side"]/div[1]//div[2]/span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            city_name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>city_name<span class="token punctuation">)</span>            welfare <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="article-list"]//div[2]//div[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            welfare_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>welfare<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="article-list"]//div[3]//div[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                responsibility <span class="token operator">=</span> <span class="token string">'null'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                responsibility <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="article-list"]//div[3]//div[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            responsibility_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>responsibility<span class="token punctuation">)</span>            place <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="article-list"]//div[4]/div/div[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            place_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>place<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>company_name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">'company_name'</span><span class="token punctuation">:</span> company_name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'edu_level'</span><span class="token punctuation">:</span> edu_level_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'job_name'</span><span class="token punctuation">:</span> job_name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'salary'</span><span class="token punctuation">:</span> salary_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'create_time'</span><span class="token punctuation">:</span> create_time_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'city_name'</span><span class="token punctuation">:</span> city_name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'company_size'</span><span class="token punctuation">:</span> company_size_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'welfare'</span><span class="token punctuation">:</span> welfare_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">'responsibility'</span><span class="token punctuation">:</span> responsibility_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\xa0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">'place'</span><span class="token punctuation">:</span> place_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">'workingExp'</span><span class="token punctuation">:</span> workingExp_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># insert_mysql(data)</span>    insert_csv<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">insert_csv</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'cn_01_recruitment.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        fieldnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'company_name'</span><span class="token punctuation">,</span> <span class="token string">'edu_level'</span><span class="token punctuation">,</span> <span class="token string">'job_name'</span><span class="token punctuation">,</span> <span class="token string">'salary'</span><span class="token punctuation">,</span> <span class="token string">'create_time'</span><span class="token punctuation">,</span> <span class="token string">'city_name'</span><span class="token punctuation">,</span> <span class="token string">'company_size'</span><span class="token punctuation">,</span>                      <span class="token string">'welfare'</span><span class="token punctuation">,</span> <span class="token string">'responsibility'</span><span class="token punctuation">,</span> <span class="token string">'place'</span><span class="token punctuation">,</span> <span class="token string">'workingExp'</span><span class="token punctuation">]</span>        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> fieldnames<span class="token operator">=</span>fieldnames<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>    load_mysql<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># def insert_mysql(data):</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     conn = pymysql.connect(host='localhost', user='root', password='root', port=3306, db='spiders')</span><span class="token comment" spellcheck="true">#     cursor = conn.cursor()</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     sql = 'create table if not exists recruitment ( ' \</span><span class="token comment" spellcheck="true">#           'id int(11) primary key auto_increment, ' \</span><span class="token comment" spellcheck="true">#           'company_name varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'edu_level varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'job_name varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'salary varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'create_time varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'city_name varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'company_size varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'welfare varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'responsibility text, ' \</span><span class="token comment" spellcheck="true">#           'place varchar(255), ' \</span><span class="token comment" spellcheck="true">#           'workingExp varchar(255)' \</span><span class="token comment" spellcheck="true">#           ')charset utf8'</span><span class="token comment" spellcheck="true">#     cursor.execute(sql)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     table = 'recruitment'</span><span class="token comment" spellcheck="true">#     keys = ','.join(data.keys())</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     values = ','.join(['%s'] * len(data))</span><span class="token comment" spellcheck="true">#     sql = 'insert into {table}({keys}) values({values})'.format(table=table, keys=keys, values=values)</span><span class="token comment" spellcheck="true">#     try:</span><span class="token comment" spellcheck="true">#         if cursor.execute(sql, tuple(data.values())):</span><span class="token comment" spellcheck="true">#             print('Successful')</span><span class="token comment" spellcheck="true">#             conn.commit()</span><span class="token comment" spellcheck="true">#     except Exception as e:</span><span class="token comment" spellcheck="true">#         print('Failed', e)</span><span class="token comment" spellcheck="true">#         conn.rollback()</span><span class="token keyword">def</span> <span class="token function">load_mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">,</span> local_infile<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">'create table if not exists recruitment ( '</span> \          <span class="token string">'company_name varchar(1255), '</span> \          <span class="token string">'edu_level varchar(1255), '</span> \          <span class="token string">'job_name varchar(1255), '</span> \          <span class="token string">'salary varchar(1255), '</span> \          <span class="token string">'create_time datetime, '</span> \          <span class="token string">'city_name varchar(1255), '</span> \          <span class="token string">'company_size varchar(1255), '</span> \          <span class="token string">'welfare varchar(1255), '</span> \          <span class="token string">'responsibility text, '</span> \          <span class="token string">'place varchar(1255), '</span> \          <span class="token string">'workingExp varchar(1255),'</span> \          <span class="token string">'id int(30) primary key auto_increment '</span> \          <span class="token string">')charset utf8'</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">"load data local infile './cn_01_recruitment.csv' into table recruitment fields terminated by ',' lines terminated by '\n' ignore 1 lines"</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    detail_data<span class="token punctuation">(</span><span class="token punctuation">)</span>```<span class="token comment" spellcheck="true">### 8.爬取美团酒店信息</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>python<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> csv<span class="token keyword">import</span> pymysqlurl <span class="token operator">=</span> <span class="token string">'https://ihotel.meituan.com/hbsearch/HotelSearch'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://hotel.meituan.com/'</span><span class="token punctuation">}</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'utm_medium'</span><span class="token punctuation">:</span> <span class="token string">'pc'</span><span class="token punctuation">,</span>        <span class="token string">'version_name'</span><span class="token punctuation">:</span> <span class="token number">999.9</span><span class="token punctuation">,</span>        <span class="token string">'cateId'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">'attr_28'</span><span class="token punctuation">:</span> <span class="token number">129</span><span class="token punctuation">,</span>        <span class="token string">'uuid'</span><span class="token punctuation">:</span> <span class="token string">' DA1E77214B957240252862761F1E15865B9B1AA2ACD29C83F0F61D03E8DFB644@1607773617614'</span><span class="token punctuation">,</span>        <span class="token string">'cityId'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'offset'</span><span class="token punctuation">:</span> i <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">'limit'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">'startDay'</span><span class="token punctuation">:</span> <span class="token number">20201212</span><span class="token punctuation">,</span>        <span class="token string">'endDay'</span><span class="token punctuation">:</span> <span class="token number">20201212</span><span class="token punctuation">,</span>        <span class="token string">'q'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token string">'defaults'</span><span class="token punctuation">,</span>        <span class="token string">'X-FOR-WITH'</span><span class="token punctuation">:</span> <span class="token string">'y0S49miBphUhlSdxHk0yNx/zQUUPdVFaVHUcE7pp957986DvRcVqn1WFmBoRwkk8sysD+0+jcjaysGC3oiWjgNG1qIsmIorGCBEwXdMKoXyIdf+EQ4DZWwlrv+qY8Yhet4H+/1aKyaQfAXr4MCj//K0IjMPOwYhRX1r9yIHCe3v7W/0jrHmp94an7/7vUBwuzSaMtK70jedmB80BqgYsKA=='</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>  params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    results <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'searchresult'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> conn <span class="token keyword">in</span> results<span class="token punctuation">:</span>        name <span class="token operator">=</span> conn<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 酒店名字</span>        addr <span class="token operator">=</span> conn<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 酒店地址</span>        hotelStar <span class="token operator">=</span> conn<span class="token punctuation">[</span><span class="token string">'hotelStar'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 酒店类型</span>        originalPrice <span class="token operator">=</span> conn<span class="token punctuation">[</span><span class="token string">'originalPrice'</span><span class="token punctuation">]</span>        comment <span class="token operator">=</span> conn<span class="token punctuation">[</span><span class="token string">'commentsCountDesc'</span><span class="token punctuation">]</span>        score <span class="token operator">=</span> conn<span class="token punctuation">[</span><span class="token string">'scoreIntro'</span><span class="token punctuation">]</span>        lat <span class="token operator">=</span> conn<span class="token punctuation">[</span><span class="token string">'lat'</span><span class="token punctuation">]</span>        lng <span class="token operator">=</span> conn<span class="token punctuation">[</span><span class="token string">'lng'</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>            <span class="token string">'hotelStar'</span><span class="token punctuation">:</span> hotelStar<span class="token punctuation">,</span>            <span class="token string">'originalPrice'</span><span class="token punctuation">:</span> originalPrice<span class="token punctuation">,</span>            <span class="token string">'comment'</span><span class="token punctuation">:</span> comment<span class="token punctuation">,</span>            <span class="token string">'score'</span><span class="token punctuation">:</span> score<span class="token punctuation">,</span>            <span class="token string">'addr'</span><span class="token punctuation">:</span> addr<span class="token punctuation">,</span>            <span class="token string">'lat'</span><span class="token punctuation">:</span> lat<span class="token punctuation">,</span>            <span class="token string">'lng'</span><span class="token punctuation">:</span> lng        <span class="token punctuation">}</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'spiders2'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token string">'create table if not exists meituan('</span> \                  <span class="token string">'name varchar(235) primary key, '</span> \                  <span class="token string">'hotelStar varchar(235), '</span> \                  <span class="token string">'originalPrice varchar(235), '</span> \                  <span class="token string">'comment varchar(235), '</span> \                  <span class="token string">'score varchar(235), '</span> \                  <span class="token string">'addr varchar(235), '</span> \                  <span class="token string">'lat varchar(235), '</span> \                  <span class="token string">'lng varchar(235)'</span> \                  <span class="token string">')charset utf8'</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            table <span class="token operator">=</span> <span class="token string">'meituan'</span>            keys <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            values <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            sql <span class="token operator">=</span> <span class="token string">'insert into {table}({keys}) values({values})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token operator">=</span>table<span class="token punctuation">,</span> keys<span class="token operator">=</span>keys<span class="token punctuation">,</span> values<span class="token operator">=</span>values<span class="token punctuation">)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> tuple<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># with open('美团.csv', 'w', encoding='utf-8', newline='') as f:</span><span class="token comment" spellcheck="true">#     fieldnames = ['name', 'hotelStar', 'originalPrice', 'comment', 'score', 'addr', 'lat', 'lng']</span><span class="token comment" spellcheck="true">#     writer = csv.DictWriter(f, fieldnames=fieldnames)</span><span class="token comment" spellcheck="true">#     writer.writeheader()</span><span class="token comment" spellcheck="true">#     writer.writerows(data_list)</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token comment" spellcheck="true">### 9.爬取求是网（xpath)</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>python<span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> csvheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span>        <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'</span><span class="token punctuation">}</span>url <span class="token operator">=</span> <span class="token string">'http://www.qstheory.cn/dukan/qs/2019-01/01/c_1123932149.htm?spm=zm5062-001.0.0.1.OpkwSK'</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>p_list <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="highlight"]/p'</span><span class="token punctuation">)</span><span class="token keyword">for</span> p <span class="token keyword">in</span> p_list<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># href = p.xpath('./strong/a/@href | ./a/@href | ./span/a/@href | ./span/strong/a/@href')[0]</span>    href <span class="token operator">=</span> p<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(href)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>href<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    detail_urls <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="highlight"]/p/a/@href | //div[@class="highlight"]/p/strong/a/@href | //div[@class="highlight"]/p//strong/a/@href'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> detail_url <span class="token keyword">in</span> detail_urls<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print(detail_url)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>detail_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        sel <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            title <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\u3000'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            author <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/section/div/div/div/div/span[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            time_update <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/section/div/div/div/div/span[3]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            photo <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="highlight"]//@src'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>photo<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                time <span class="token operator">=</span> time_update<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>                time1 <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                time2 <span class="token operator">=</span> time<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>                result <span class="token operator">=</span> time1 <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> time2 <span class="token operator">+</span> <span class="token string">'/'</span>                photo_url <span class="token operator">=</span> <span class="token string">'http://www.qstheory.cn/dukan/qs/'</span> <span class="token operator">+</span> result <span class="token operator">+</span> photo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                photo_url <span class="token operator">=</span> photo            content <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="highlight"]/p/text() | //div[@class="highlight"]/p/strong/text()'</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\u3000\u3000'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\xa0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\r\n\r\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">'title'</span><span class="token punctuation">:</span> title<span class="token punctuation">,</span>                <span class="token string">'author'</span><span class="token punctuation">:</span> author<span class="token punctuation">,</span>                <span class="token string">'time'</span><span class="token punctuation">:</span> time_update<span class="token punctuation">,</span>                <span class="token string">'photo_url'</span><span class="token punctuation">:</span> photo_url<span class="token punctuation">,</span>                <span class="token string">'content'</span><span class="token punctuation">:</span> content            <span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'求是.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    fieldnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'author'</span><span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'photo_url'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> fieldnames<span class="token operator">=</span>fieldnames<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token comment" spellcheck="true">### 10爬取豆瓣图书（scrapy)</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>python<span class="token comment" spellcheck="true"># 特点：里外内容合并 meta</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> douban_bookPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> DoubanBookproItem<span class="token keyword">class</span> <span class="token class-name">BookSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'book'</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://book.douban.com/tag/%E6%97%A5%E6%9C%AC%E6%96%87%E5%AD%A6?start={}&amp;type=T'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span>                range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">980</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print(response)</span>        detail_links <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="subject-list"]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> detail_links<span class="token punctuation">:</span>            link <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            img_url <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            info <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[2]/div[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            info <span class="token operator">=</span> str<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>            author <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>            translator <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            press <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            price <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            req <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>link<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>detail_parse<span class="token punctuation">)</span>            req<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> link            req<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'img_url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> img_url            req<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span> <span class="token operator">=</span> author            req<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'translator'</span><span class="token punctuation">]</span> <span class="token operator">=</span> translator            req<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'press'</span><span class="token punctuation">]</span> <span class="token operator">=</span> press            req<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> price            <span class="token keyword">yield</span> req    <span class="token keyword">def</span> <span class="token function">detail_parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h1/span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        time <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="info"]/text()[last()-11]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> time <span class="token keyword">is</span> <span class="token string">''</span><span class="token punctuation">:</span>            time <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="info"]/text()[last()-9]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="info"]/text()[last()-9]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>page<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            page <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="info"]/text()[last()-7]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        binding <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="info"]/text()[last()-5]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        ISBN <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="info"]/text()[last()-1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        score <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="interest_sectl"]/div/div[2]/strong/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        comments <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="interest_sectl"]/div/div[2]/div/div[2]/span/a/span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> DoubanBookproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'ISBN'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ISBN        item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title        item<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> score        item<span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page        item<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> time        item<span class="token punctuation">[</span><span class="token string">'press'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'press'</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'translator'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'translator'</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'binding'</span><span class="token punctuation">]</span> <span class="token operator">=</span> binding        item<span class="token punctuation">[</span><span class="token string">'comments'</span><span class="token punctuation">]</span> <span class="token operator">=</span> comments        item<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'img_url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'img_url'</span><span class="token punctuation">]</span>        <span class="token keyword">yield</span> item        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token comment" spellcheck="true"># 文档</span><span class="token comment" spellcheck="true">## 1.requests文档</span><span class="token punctuation">[</span>requests文档<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>requests<span class="token punctuation">.</span>readthedocs<span class="token punctuation">.</span>io<span class="token operator">/</span>zh_CN<span class="token operator">/</span>latest<span class="token operator">/</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 2.scrapy文档</span><span class="token punctuation">[</span>scrapy文档<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>scrapy<span class="token operator">-</span>chs<span class="token punctuation">.</span>readthedocs<span class="token punctuation">.</span>io<span class="token operator">/</span>zh_CN<span class="token operator">/</span><span class="token number">0.24</span><span class="token operator">/</span>intro<span class="token operator">/</span>tutorial<span class="token punctuation">.</span>html<span class="token punctuation">)</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>python<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'qiushi.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>keys <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>values <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>values <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">'insert into data({keys}) values({values})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>keys<span class="token operator">=</span>keys<span class="token punctuation">,</span> values<span class="token operator">=</span>values<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> tuple<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>keys <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>values <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">'insert into douban({keys}) values({values})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>keys<span class="token operator">=</span>keys<span class="token punctuation">,</span> values<span class="token operator">=</span>values<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> tuple<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">,</span> local_infile<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> 'create table huang<span class="token punctuation">(</span>id int<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  name varchar<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sex varchar<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>charset utf8'cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"load data local infile 'double.csv' into table double fields terminated by ','  lines terminated by '\n' ignore 1 lines"</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章、爬虫基础&quot;&gt;&lt;a href=&quot;#第一章、爬虫基础&quot; class=&quot;headerlink&quot; title=&quot;第一章、爬虫基础&quot;&gt;&lt;/a&gt;第一章、爬虫基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-HTTP-基本原理&quot;&gt;&lt;a href=&quot;#1-1-HTTP-基本原理&quot; c</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.shiyiri.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python爬虫" scheme="https://www.shiyiri.top/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop搭建</title>
    <link href="https://www.shiyiri.top/node/2.html"/>
    <id>https://www.shiyiri.top/node/2.html</id>
    <published>2021-03-06T04:06:40.551Z</published>
    <updated>2021-04-22T14:35:45.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop配置文件讲解"><a href="#Hadoop配置文件讲解" class="headerlink" title="Hadoop配置文件讲解"></a>Hadoop配置文件讲解</h1><table><thead><tr><th>配置文件</th><th>功能描述</th></tr></thead><tbody><tr><td>hadoop-env.sh</td><td>配置 Hadoop 运行所需的环境变量</td></tr><tr><td>yarn-env.sh</td><td>配置 YARN 运行所需的环境变量</td></tr><tr><td>core-site.xml</td><td>Hadoop 核心全局配置文件，可在其他配置文件中引用改文件</td></tr><tr><td>hdfs-site.xml</td><td>HDFS 配置文件，继承 core-site.xml 配置文件</td></tr><tr><td>mapred-site.xml</td><td>MapReduce 配置文件，继承 core-site.xml 配置文件</td></tr><tr><td>yarn-site.xml</td><td>YARN 配置文件，继承 core-site.xml 配置文件</td></tr></tbody></table><p><a href="https://hadoop.apache.org/docs/current/">官方文档</a></p><h2 id="1-core-site-xml-常用参数"><a href="#1-core-site-xml-常用参数" class="headerlink" title="1.core-site.xml 常用参数"></a>1.core-site.xml 常用参数</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://node:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>HDFS的URI，设定namenode的主机名及端口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/local/src/hadoop-2.7.2/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>节点上本地的hadoop临时文件夹，之前一定要先建立好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.trash.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1440<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>开启hdfs的垃圾桶机制，删除掉的数据可以从垃圾桶中回收，单位分钟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.trash.checkpoint.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>io.file.buffer.size<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4096<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>缓冲区大小，实际工作中根据服务器性能动态调整<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h2 id="2-hdfs-site-xml-常用参数"><a href="#2-hdfs-site-xml-常用参数" class="headerlink" title="2.hdfs-site.xml 常用参数"></a>2.hdfs-site.xml 常用参数</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/usr/local/src/hdfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>namenode上存储hdfs名字空间元数据 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/usr/local/src/hdfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>datanode上数据块的物理存储位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>副本个数，默认是3,应小于datanode机器数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.blocksize<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>134217728<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>文件存储的block块大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h2 id="3-mapred-site-xml-常用参数"><a href="#3-mapred-site-xml-常用参数" class="headerlink" title="3.mapred-site.xml 常用参数"></a>3.mapred-site.xml 常用参数</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定我们mapreduce运行在yarn集群上面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.job.ubertask.enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>开启mapreduce的小任务模式，用于调优<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>配置mapreduce的jobhistory，可以查看我们所有运行完成的任务的一些情况<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>配置mapreduce的jobhistory的访问地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h2 id="4-yarn-site-xml-常用参数"><a href="#4-yarn-site-xml-常用参数" class="headerlink" title="4.yarn-site.xml 常用参数"></a>4.yarn-site.xml 常用参数</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定resourcemanager所在的hostname，    即指定yarn的老大即ResourceManger的地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>NodeManager上运行的附属服务。    指定NodeManager获取数据的方式是shuffle    需配置成mapreduce_shuffle，才可运行MapReduce程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>日志的聚合功能，方便我们查看任务执行完成之后的日志记录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>604800<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>聚合日志的保存时长，这里的值不要设置的太小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log.server.url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>http://node:19888/jobhistory.logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>配置日志服务器的地址,node节点使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.log-dirs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/tmp/yarn/userlogs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h1 id="设置环境只对当前用户有效"><a href="#设置环境只对当前用户有效" class="headerlink" title="设置环境只对当前用户有效"></a>设置环境只对当前用户有效</h1><pre class=" language-xml"><code class="language-xml">vi .bash_profile1.每次进入完全分布式有些命令未找到都必须要source一下解决办法：- 在~/.bashrc里面加一句source /etc/profilehadoop dfsadmin -safemode leave 关闭安全模式</code></pre><h1 id="配置yarn的历史服务器及日志产看功能"><a href="#配置yarn的历史服务器及日志产看功能" class="headerlink" title="配置yarn的历史服务器及日志产看功能"></a>配置yarn的历史服务器及日志产看功能</h1><pre class=" language-xml"><code class="language-xml">vi mapred-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>配置mapreduce的jobhistory，可以查看我们所有运行完成的任务的一些情况<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>配置mapreduce的jobhistory的访问地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>vi yarn-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>604800<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log.server.url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>http://node:19888/jobhistory.logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span># 启动 mr-jobhistory-daemon.sh start historyserver</code></pre><h1 id="伪分布式搭建"><a href="#伪分布式搭建" class="headerlink" title="伪分布式搭建"></a>伪分布式搭建</h1><h2 id="1-修改-IP-地址"><a href="#1-修改-IP-地址" class="headerlink" title="1.修改 IP 地址"></a>1.修改 IP 地址</h2><pre class=" language-shell"><code class="language-shell">vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></pre><h2 id="2-配置其中文件"><a href="#2-配置其中文件" class="headerlink" title="2.配置其中文件"></a>2.配置其中文件</h2><pre class=" language-shell"><code class="language-shell">TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=7397575d-294f-44ad-88a6-7476a5f27106DEVICE=ens33ONBOOT=yesIPADDR=192.168.136.220NETMASK=255.255.255.0GATEWAY=192.168.136.2DNS1=119.29.29.29</code></pre><h2 id="3-重启网络"><a href="#3-重启网络" class="headerlink" title="3.重启网络"></a>3.重启网络</h2><pre class=" language-shell"><code class="language-shell">systemctl restart network</code></pre><h2 id="4-修改主机名"><a href="#4-修改主机名" class="headerlink" title="4.修改主机名"></a>4.修改主机名</h2><pre class=" language-shell"><code class="language-shell">查看主机名hostname修改主机名hostnamectl set-hostname master1-1</code></pre><h2 id="5-关闭防火墙"><a href="#5-关闭防火墙" class="headerlink" title="5.关闭防火墙"></a>5.关闭防火墙</h2><pre class=" language-shell"><code class="language-shell">关闭防火墙systemctl stop firewalld关闭防火墙自启动systemctl disable firewalld检查防火墙systemctl status firewalld关闭 selinux防火墙vi /etc/sysconfig/selinux把 SELINUX=enforcing 变为 SELINUX=disabled</code></pre><h2 id="6-映射主机名和IP地址"><a href="#6-映射主机名和IP地址" class="headerlink" title="6.映射主机名和IP地址"></a>6.映射主机名和IP地址</h2><pre class=" language-shell"><code class="language-shell">vi /etc/hosts192.168.136.150 master1-1</code></pre><h2 id="7-安装-rz，使用rz上传所需文件"><a href="#7-安装-rz，使用rz上传所需文件" class="headerlink" title="7.安装 rz，使用rz上传所需文件"></a>7.安装 rz，使用rz上传所需文件</h2><pre class=" language-shell"><code class="language-shell">yum -y install lrzsz</code></pre><p>##8.解压JDK 安装包到‘/usr/local/src’路径，并配置环境变量</p><pre class=" language-shell"><code class="language-shell">tar -zxvf *.tar -C /usr/local/src配置环境变量vi /etc/profileexport JAVA_HOME=/usr/local/src/jdk1.8export PATH=$PATH:$JAVA_HOME/bin刷新环境变量source /etc/profile查看是否配置jdk成功java -version</code></pre><h2 id="9-解压hadoop安装包到-‘-usr-local-src’-路径，并配置环境变量"><a href="#9-解压hadoop安装包到-‘-usr-local-src’-路径，并配置环境变量" class="headerlink" title="9.解压hadoop安装包到 ‘/usr/local/src’ 路径，并配置环境变量"></a>9.解压hadoop安装包到 ‘/usr/local/src’ 路径，并配置环境变量</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf *.tar -C /usr/local/src配置环境变量vi /etc/profileexport JAVA_HOME=/usr/local/src/jdk1.8export HADOOP_HOME=/usr/local/src/hadoop-2.7.2export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin刷新环境变量source /etc/profile查看是否配置jdk成功hadoop version</code></pre><h2 id="10-修改Hadoop目录下的配置文件"><a href="#10-修改Hadoop目录下的配置文件" class="headerlink" title="10.修改Hadoop目录下的配置文件"></a>10.修改Hadoop目录下的配置文件</h2><pre class=" language-xml"><code class="language-xml">vi hadoop-env.shexport JAVA_HOME=/usr/local/src/jdk1.8vi core-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master1-1:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>HDFS的URI，设定namenode的主机名及端口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/local/src/hadoop-2.7.2/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>节点上本地的hadoop临时文件夹，之前一定要先建立好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>vi hdfs-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>副本个数，默认是3,应小于datanode机器数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master1-1:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>mv mapred-site.xml.template mapred-site.xmlvi mapred-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定mapreduce使用yarn框架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>vi yarn-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master1-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定resourcemanager所在的hostname，即指定yarn的老大即ResourceManger的地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>NodeManager上运行的附属服务。指定NodeManager获取数据的方式是shuffle需配置成mapreduce_shuffle，才可运行MapReduce程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="11-配置完成后，格式化-DFS"><a href="#11-配置完成后，格式化-DFS" class="headerlink" title="11.配置完成后，格式化 DFS"></a>11.配置完成后，格式化 DFS</h2><pre class=" language-shell"><code class="language-shell">hdfs namenode -format</code></pre><h2 id="12-创建shh密匙实现免密"><a href="#12-创建shh密匙实现免密" class="headerlink" title="12.创建shh密匙实现免密"></a>12.创建shh密匙实现免密</h2><pre class=" language-shell"><code class="language-shell"># 安装openssh，在centos7中ssh服务默认是已经被安装了的。通过命令rpm -qa | grep openssh 查看是否安装了ssh服务yum install opensshssh-keygen -t rsa  # 然后按三次回车cd /root/.sshssh-copy-id master1-1  # 将本机的公钥复制到远程机器的authorized_key文件中，然后实现免密登录more authorized_keys</code></pre><h1 id="完全分布式搭建"><a href="#完全分布式搭建" class="headerlink" title="完全分布式搭建"></a>完全分布式搭建</h1><h2 id="1-配置三台IP"><a href="#1-配置三台IP" class="headerlink" title="1.配置三台IP"></a>1.配置三台IP</h2><pre class=" language-shell"><code class="language-shell">vi /etc/sysconfig/network-scripts/ifcfg-ens33TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33DEVICE=ens33ONBOOT=yesIPADDR=192.168.136.150NETMASK=255.255.255.0GATEWAY=192.168.136.2DNS1=119.29.29.29# 重启网络systemctl restart network</code></pre><h2 id="2-关闭三台防火墙"><a href="#2-关闭三台防火墙" class="headerlink" title="2.关闭三台防火墙"></a>2.关闭三台防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl stop firewalld  # 关闭防火墙systemctl disable firewalld  # 关闭防火墙开机自启systemctl status firewalld  # 检查防火墙vi /etc/sysconfig/selinux   # 关闭selinux防火墙SELINUX=disabled</code></pre><h2 id="3-修改三台主机名和映射主机名和IP地址"><a href="#3-修改三台主机名和映射主机名和IP地址" class="headerlink" title="3.修改三台主机名和映射主机名和IP地址"></a>3.修改三台主机名和映射主机名和IP地址</h2><pre class=" language-shell"><code class="language-shell">hostnamectl set-hostname master1-1vi /etc/hosts192.168.136.150 master1-1192.168.136.151 slave1-1192.168.136.152 slave1-2</code></pre><h2 id="4-安装-rz，使用rz上传所需文件"><a href="#4-安装-rz，使用rz上传所需文件" class="headerlink" title="4.安装 rz，使用rz上传所需文件"></a>4.安装 rz，使用rz上传所需文件</h2><pre class=" language-shell"><code class="language-shell">yum -y install lrzsz</code></pre><h2 id="5-安装Hadoop和JDK，并配置好环境"><a href="#5-安装Hadoop和JDK，并配置好环境" class="headerlink" title="5.安装Hadoop和JDK，并配置好环境"></a>5.安装Hadoop和JDK，并配置好环境</h2><pre class=" language-shell"><code class="language-shell"># 使用 tar 命令解压tar -zxvf *.gz -C /usr/local/srcvi /etc/profileexport JAVA_HOME=/usr/local/src/jdk1.8export HADOOP_HOME=/usr/local/src/hadoop-2.7.2PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin# 刷新环境配置文件source /etc/profile# 查看Hadoop和JDK是否安装成功java -versionhadoop version# 可以先配置好主节点，然后使用 scp 命令分发给从节点，从而节约时间scp -r /etc/profile slave1-1:/etc/scp -r /etc/profile slave1-2:/etc/</code></pre><h2 id="6-在三台同时同步时间"><a href="#6-在三台同时同步时间" class="headerlink" title="6.在三台同时同步时间"></a>6.在三台同时同步时间</h2><pre class=" language-shell"><code class="language-shell"># 安装NTP服务yum install ntp# 手动同步时间ntpdate -u ntp1.aliyun.com# 查看时间date</code></pre><h2 id="7-在三个节点删除原有目录，重新生成密匙对"><a href="#7-在三个节点删除原有目录，重新生成密匙对" class="headerlink" title="7.在三个节点删除原有目录，重新生成密匙对"></a>7.在三个节点删除原有目录，重新生成密匙对</h2><pre class=" language-shell"><code class="language-shell"># 删除原有.ssh目录rm -rf /root/.ssh# 重新生成迷密匙对，然后回车三次ssh-keygen -t rsa# 在各节点的.ssh目录下将公钥复制到主节点cd /root/.sshssh-copy-id master1-1# 查看主节点的 authorized_keys 文件more authorized_keys# 将主节点上的 authorized_keys 文件远程拷贝到从节点。scp -r authorized_keys slave1-1:~/.ssh/authorized_keys</code></pre><h2 id="8-在主节点中配置Hadoop目录中的配置文件"><a href="#8-在主节点中配置Hadoop目录中的配置文件" class="headerlink" title="8.在主节点中配置Hadoop目录中的配置文件"></a>8.在主节点中配置Hadoop目录中的配置文件</h2><pre class=" language-xml"><code class="language-xml">cd /usr/local/src/hadoop-2.6.0/etc/hadoopvi hadoop-env.shexport JAVA_HOME=/usr/local/src/jdk1.8vi core-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://node:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>HDFS的URI，设定namenode的主机名及端口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/local/src/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>节点上本地的hadoop临时文件夹，之前一定要先建立好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>vi hdfs-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/export/server/hdfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>namenode上存储hdfs名字空间元数据 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/export/server/hdfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>datanode上数据块的物理存储位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>副本个数，默认是3,应小于datanode机器数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>vi mapred-env.shexport JAVA_HOME=/usr/local/src/jdk1.8vi mapred-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定mapreduce使用yarn框架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>vi yarn-env.shexport JAVA_HOME=/usr/local/src/jdk1.8vi yarn-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定resourcemanager所在的hostname，    即指定yarn的老大即ResourceManger的地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>NodeManager上运行的附属服务。    指定NodeManager获取数据的方式是shuffle    需配置成mapreduce_shuffle，才可运行MapReduce程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>vi slavesslave1-1slave1-2# 将主节点上的配置文件分发到两个从节点scp -r /usr/local/src/hadoop-2.7.2/etc/hadoop node1:/url/local/src/hadoop-2.7.2/etc/scrp -r /usr/local/src/hadoop-2.7.2/etc/hadoop node2:/url/local/src/hadoop-2.7.2/etc/</code></pre><h2 id="9-在主节点上格式化-HDFS"><a href="#9-在主节点上格式化-HDFS" class="headerlink" title="9.在主节点上格式化 HDFS"></a>9.在主节点上格式化 HDFS</h2><pre class=" language-shell"><code class="language-shell">hdfs namenode -format</code></pre><h2 id="10-启动节点"><a href="#10-启动节点" class="headerlink" title="10.启动节点"></a>10.启动节点</h2><pre class=" language-shel"><code class="language-shel">start-all.sh</code></pre><h1 id="zookeeper集群搭建"><a href="#zookeeper集群搭建" class="headerlink" title="zookeeper集群搭建"></a>zookeeper集群搭建</h1><h2 id="1-在完全分布式的基础上搭建"><a href="#1-在完全分布式的基础上搭建" class="headerlink" title="1.在完全分布式的基础上搭建"></a>1.在完全分布式的基础上搭建</h2><p>检查完全分布式集群，没有问题就可以直接搭建了</p><p>这里我们可以在主节点配置，然后分发给从节点，再修改从节点的myid</p><h2 id="2-解压到某个文件夹"><a href="#2-解压到某个文件夹" class="headerlink" title="2.解压到某个文件夹"></a>2.解压到某个文件夹</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf zookeeper* -C /usr/local/src/</code></pre><h2 id="3-进入到zookeeper文件夹"><a href="#3-进入到zookeeper文件夹" class="headerlink" title="3.进入到zookeeper文件夹"></a>3.进入到zookeeper文件夹</h2><pre class=" language-shell"><code class="language-shell">创建一个目录，这里叫 datamkdir datacd dataecho 1 > myidcd confmv zoo_sample.cfg zoo.cfg    # 修改名字vi zoo.cfgtickTime=2000  # tickTime：Client和Server通信心跳数。单位：毫秒# Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每隔tickTime的时间就会发送一个心跳。tickTime以毫秒为单位initLimit=10  # LF初始通信时限。# 集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量)。syncLimit=5  # LF同步通信时限。# 集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量)。dataDir=/tmp/zookeeper  # 数据文件目录。# Zookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。clientPort=2181  # 客户端连接端口。# 客户端连接Zookeeper服务器的端口，Zookeeper会监听这个端口，接受客户端的访问请求。maxClientCnxns=60  # 客服端最大连接数# 默认值是60，一个客户端能够连接到同一个服务器上的最大连接数，根据IP来区分。如果设置为0，表示没有任何限制。设置该值一方面是为了防止DoS攻击。# Be sure to read the maintenance section of the# administrator guide before turning on autopurge.## http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance## The number of snapshots to retain in dataDir#autopurge.snapRetainCount=3# Purge task interval in hours# Set to "0" to disable auto purge feature#autopurge.purgeInterval=1dataDir=/export/server/zookeeper-3.4.8/dataserver.1=node:2888:3888server.2=node1:2888:3888server.3=node2:2888:3888</code></pre><h2 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4.配置环境变量"></a>4.配置环境变量</h2><pre class=" language-shell"><code class="language-shell">vi /etc/profileexport ZOOKEEPER_HOME=/usr/local/src/zookeeper-3.4.5export PATH=$PATH:$ZOOKEEPER_HOME/binexport CLASSPATH=.:$ZOOKEEPER_HOME/lib/dt.jar:$ZOOKEEPER_HOME/lib/tools.jar</code></pre><h2 id="5-远程分发"><a href="#5-远程分发" class="headerlink" title="5.远程分发"></a>5.远程分发</h2><pre><code>scp -r /etc/profile node1:/etc/scp -r /etc/profile node2:/etc/scp -r /usr/local/src/zookeeper-3.4.5 node1:/usr/local/src/scp -r /usr/local/src/zookeeper-3.4.5 node2:/usr/local/src/</code></pre><h2 id="6-修改其他节点的myid"><a href="#6-修改其他节点的myid" class="headerlink" title="6.修改其他节点的myid"></a>6.修改其他节点的myid</h2><pre><code>cd /usr/local/src/zookeeper-3.4.5/datavi myid</code></pre><h1 id="高可用搭建"><a href="#高可用搭建" class="headerlink" title="高可用搭建"></a>高可用搭建</h1><h2 id="HDFS-HA-环境搭建"><a href="#HDFS-HA-环境搭建" class="headerlink" title="HDFS HA 环境搭建"></a>HDFS HA 环境搭建</h2><h3 id="1-在完成zookeeper的基础上搭建"><a href="#1-在完成zookeeper的基础上搭建" class="headerlink" title="1.在完成zookeeper的基础上搭建"></a>1.在完成zookeeper的基础上搭建</h3><h3 id="2-在完全分布式集群的主节点上修改配置文件"><a href="#2-在完全分布式集群的主节点上修改配置文件" class="headerlink" title="2.在完全分布式集群的主节点上修改配置文件"></a>2.在完全分布式集群的主节点上修改配置文件</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/src/hadoop-2.6.0/etc/hadoop核心配置文件core-site.xml -> 修改HDFS配置文件hadoop-env.sh -> 不变hdfs-site.xml -> 修改MapReduce配置文件mapred-env.sh -> 不变mapred-site.xml -> 不变slaves -> 修改</code></pre><pre class=" language-xml"><code class="language-xml">vi core-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>把两个NameNode的地址组装成一个集群mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span># 这里的路径默认是NameNode、DataNode、JournalNode等存放数据的公共目录。用户也可以自己单独指定这三类节点的目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/local/src/hadoop-2.6.0/data/ha/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定hadoop运行时产生文件的存储目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ha.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:2181,node1:2181,node2:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定ZKFC故障自动切换转移<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>vi hdfs-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>设置dsf副本数，默认3个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.nameservices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>完全分布式集群名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.namenodes.mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>nn1,nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>集群中NameNode节点都有哪些<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.mycluster.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>nn1的RPC通信地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.mycluster.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>nn2的RPC通信地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.mycluster.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>nn1的http通信地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.mycluster.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>nn2的http通信地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.shared.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>qjournal://node:8485;node1:8485;node2:8485/mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定NameNode元数据在JournalNode上的存放位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>    sshfence    shell(/bin/true)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>配置隔离机制，即同一时刻只能由一台服务器对外响应<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.ssh.private-key-files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/.ssh/id_rsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>使用隔离机制时需要ssh无密钥登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.journalnode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/local/src/hadoop-2.6.0/data/ha/jn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>声明journalnode服务器存储目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>关闭权限检查<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.client.failover.proxy.provider.mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定mycluster出现故障时，负责执行故障切换的类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>配置自动故障转移<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>　vi slavesnodenode1node2</code></pre><h3 id="3-将主节点的配置文件分发给从节点"><a href="#3-将主节点的配置文件分发给从节点" class="headerlink" title="3.将主节点的配置文件分发给从节点"></a>3.将主节点的配置文件分发给从节点</h3><pre class=" language-shell"><code class="language-shell"># 怎么分发要看所在文件夹位置和安装位置scp -r ../hadoop node1:/$HADOOP_HOME/etcscp -r hadoop node2:/usr/local/src/hadoop-2.6.0/etc</code></pre><h3 id="4-关闭集群，启动-zookeeper"><a href="#4-关闭集群，启动-zookeeper" class="headerlink" title="4.关闭集群，启动 zookeeper"></a>4.关闭集群，启动 zookeeper</h3><pre class=" language-shell"><code class="language-shell"># 在主节点输入，服务关闭的就不用管了stop-all.sh# 在所有节点输入zkServer.sh startzkServer.sh status  # 查看状态，正确的状态只有一台机器时leader，其余为follower# 用jpa查看的进程时QuorumPeerMain</code></pre><h3 id="5-在主节点上格式化-zookeeper"><a href="#5-在主节点上格式化-zookeeper" class="headerlink" title="5.在主节点上格式化 zookeeper"></a>5.在主节点上格式化 zookeeper</h3><pre class=" language-shell"><code class="language-shell">hdfs zkfc -formatZK  # 目的是在Zookeeper集群上建立HA响应节点</code></pre><h3 id="6-启动-JournalNode-集群"><a href="#6-启动-JournalNode-集群" class="headerlink" title="6.启动 JournalNode 集群"></a>6.启动 JournalNode 集群</h3><pre class=" language-shell"><code class="language-shell"># 在所有节点输入hadoop-daemon.sh start journalnode  # 启动JournalNode是为了创建/data/ha/jn,此时jn里面是空的</code></pre><h3 id="7-格式化NameNode"><a href="#7-格式化NameNode" class="headerlink" title="7.格式化NameNode"></a>7.格式化NameNode</h3><pre class=" language-shell"><code class="language-shell"># 格式化集群的一个NameNode节点，可以在nn1和nn2任选一个格式化。这里选nn1即主节点hdfs namenode -format# 格式化NameNode，此里面jn会产生集群等ID等信息，/data/ha/tmp也会产生相关信息。</code></pre><h3 id="8-启动-NameNode，并同步到备用-NameNode"><a href="#8-启动-NameNode，并同步到备用-NameNode" class="headerlink" title="8.启动 NameNode，并同步到备用 NameNode"></a>8.启动 NameNode，并同步到备用 NameNode</h3><pre class=" language-shell"><code class="language-shell"># 在nn1即node（主节点）节点单独启动namenode进程：hadoop-daemon.sh start namenode# 将格式化的namenode节点信息同步到备用的NameNode（nn2即node1节点），并启动namenode进程：# 在 node1 节点输入hdfs namenode -bootstrapStandbyhadoop-daemon.sh start namenode</code></pre><h3 id="9-启动所有的-DataNode"><a href="#9-启动所有的-DataNode" class="headerlink" title="9.启动所有的 DataNode"></a>9.启动所有的 DataNode</h3><pre class=" language-shell"><code class="language-shell"># DataNode 是在 slaves 文件中配置的，所以在 nn1 即 node 节点上启动所有的 datanode 进程。hadoop-daemons.sh start datanode</code></pre><h3 id="10-启动-ZKFailoverCotroller"><a href="#10-启动-ZKFailoverCotroller" class="headerlink" title="10.启动 ZKFailoverCotroller"></a>10.启动 ZKFailoverCotroller</h3><pre class=" language-shell"><code class="language-shell"># 在 node 和 node1 上分别启动 ZkFailoverCotroller（主备切换控制器），# 是 NameNode 机器 上一个独立的进程（进程名为 zkfc）。hadoop-daemon.sh start zkfc</code></pre><h3 id="11-到此就可以使用-jps-命令查看进程"><a href="#11-到此就可以使用-jps-命令查看进程" class="headerlink" title="11.到此就可以使用 jps 命令查看进程"></a>11.到此就可以使用 jps 命令查看进程</h3><pre class=" language-shell"><code class="language-shell">node  六个node1 六个node2 四个查看NameNode的节点状态hdfs haadmin -getServiceState nn1hdfs haadmin -getServiceState nn2关于故障转移机制无效，下载插件yum install psmisc</code></pre><h2 id="Yarn-HA-环境搭建"><a href="#Yarn-HA-环境搭建" class="headerlink" title="Yarn HA 环境搭建"></a>Yarn HA 环境搭建</h2><h3 id="1-在完成-HDFS-HA-的基础上安装"><a href="#1-在完成-HDFS-HA-的基础上安装" class="headerlink" title="1.在完成 HDFS HA 的基础上安装"></a>1.在完成 HDFS HA 的基础上安装</h3><pre class=" language-shell"><code class="language-shell">关闭所有进程。</code></pre><h3 id="2-同样在hadoop目录下修改配置文件"><a href="#2-同样在hadoop目录下修改配置文件" class="headerlink" title="2.同样在hadoop目录下修改配置文件"></a>2.同样在hadoop目录下修改配置文件</h3><pre class=" language-xml"><code class="language-xml">vi yarn-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>NodeManager上运行的附属服务。    指定NodeManager获取数据的方式是shuffle    需配置成mapreduce_shuffle，才可运行MapReduce程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>启用resourcemanager ha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.cluster-id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>rmCluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定resourcemanager的cluster-id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.rm-ids<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>rm1,rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>声明两台resourcemanager的名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定第一台resourcemanager的地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定第二台resourcemanager的地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.zk-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:2181,node1:2181,node2:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定zookeeper集群的地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.recovery.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>启用自动恢复<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.store.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定resourcemanager的状态信息存储在zookeeper集群地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h3 id="3-远程分发"><a href="#3-远程分发" class="headerlink" title="3.远程分发"></a>3.远程分发</h3><pre class=" language-shell"><code class="language-shell">scp -r yarn-site.xml node1:/usr/local/src/hadoop-2.6.0/etc/hadoop/scp -r yarn-site.xml node2:/usr/local/src/hadoop-2.6.0/etc/hadoop/# 查看两个ResourceManager的节点状态yarn rmadmin -getServiceState rm1yarn rmadmin -getServiceState rm2yarn rmadmin -transitionToStandby rm1port:8088</code></pre><h3 id="4-启动-Hadoop-HA-集群"><a href="#4-启动-Hadoop-HA-集群" class="headerlink" title="4.启动 Hadoop HA 集群"></a>4.启动 Hadoop HA 集群</h3><p>(1).在三个节点上启动 ZooKeeper。zkServer.sh start</p><p>(2).在 node 和 node1 上启动 zkfc。hadoop-daemon.sh start zkfc</p><p>(3).在 node 上启动 hadoop 集群。start-all.sh</p><p>(4).在 node1 上启动 resourcemanager。yarn-daemon.sh start resourcemanager</p><p><strong>注：全部启动后。节点数分别为</strong> <strong>8 8 5</strong></p><h1 id="MySQL的安装部署"><a href="#MySQL的安装部署" class="headerlink" title="MySQL的安装部署"></a>MySQL的安装部署</h1><h2 id="1-安装-wget"><a href="#1-安装-wget" class="headerlink" title="1.安装 wget"></a>1.安装 wget</h2><pre class=" language-shell"><code class="language-shell">yum -y install wget</code></pre><h2 id="2-下载-rpm-安装文件"><a href="#2-下载-rpm-安装文件" class="headerlink" title="2.下载 rpm 安装文件"></a>2.下载 rpm 安装文件</h2><pre class=" language-shell"><code class="language-shell">wget http://repo.mysql.com/mysql-community-release-el7-7.noarch.rpm</code></pre><h2 id="3-安装下载的-mysql-community-release-el7-7-noarch-rpm-文件"><a href="#3-安装下载的-mysql-community-release-el7-7-noarch-rpm-文件" class="headerlink" title="3.安装下载的 mysql-community-release-el7-7.noarch.rpm 文件"></a>3.安装下载的 mysql-community-release-el7-7.noarch.rpm 文件</h2><pre class=" language-shell"><code class="language-shell"># 安装下载的 mysql-community-release-el7-7.noarch.rpm 文件rpm -ivh mysql-community-release-el7-7.noarch.rpm</code></pre><h2 id="4-配置-MySQL-安装源信息"><a href="#4-配置-MySQL-安装源信息" class="headerlink" title="4.配置 MySQL 安装源信息"></a>4.配置 MySQL 安装源信息</h2><pre class=" language-shell"><code class="language-shell">vi /etc/yum.repos.d/mysql-community.repo启用5.7的版本# enabled 是否启用 1 启用，0 关闭# gpgchenk 是否检查</code></pre><h2 id="5-进行-MySQL-安装"><a href="#5-进行-MySQL-安装" class="headerlink" title="5.进行 MySQL 安装"></a>5.进行 MySQL 安装</h2><pre class=" language-shell"><code class="language-shell">yum install mysql-community-server</code></pre><h2 id="6-配置MySQL"><a href="#6-配置MySQL" class="headerlink" title="6.配置MySQL"></a>6.配置MySQL</h2><pre class=" language-shell"><code class="language-shell"># 启用mysqlsystemctl start mysqld# 设为开机自启systemctl enable mysqldsystemctl daemon-reload</code></pre><h2 id="7-查看-mysql-5-7-数据库初始化root密码"><a href="#7-查看-mysql-5-7-数据库初始化root密码" class="headerlink" title="7.查看 mysql 5.7 数据库初始化root密码"></a>7.查看 mysql 5.7 数据库初始化root密码</h2><pre class=" language-shell"><code class="language-shell">grep 'temporary password' /var/log/mysqld.logmysql -uroot -p# 回车，然后把复制的密码粘贴进去</code></pre><h2 id="8-登录后修改MySQL密码"><a href="#8-登录后修改MySQL密码" class="headerlink" title="8.登录后修改MySQL密码"></a>8.登录后修改MySQL密码</h2><pre class=" language-mysql"><code class="language-mysql">set global validate_password_policy=LOW;set global validate_password_length=6;alter user 'root'@'localhost' identified by '123456';</code></pre><h2 id="9-开放远程连接"><a href="#9-开放远程连接" class="headerlink" title="9.开放远程连接"></a>9.开放远程连接</h2><pre class=" language-mysql"><code class="language-mysql"># 进入 mysql 数据库use mysql;update user set host='%' where user='root' and host='localhost';</code></pre><h2 id="10-刷新设置"><a href="#10-刷新设置" class="headerlink" title="10.刷新设置"></a>10.刷新设置</h2><pre class=" language-mysql"><code class="language-mysql">flush privileges;</code></pre><h1 id="hive的安装部署"><a href="#hive的安装部署" class="headerlink" title="hive的安装部署"></a>hive的安装部署</h1><h2 id="1-解压"><a href="#1-解压" class="headerlink" title="1.解压"></a>1.解压</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf apache-hive* -C /usr/local/src/</code></pre><h2 id="2-进入hive目录并改名"><a href="#2-进入hive目录并改名" class="headerlink" title="2.进入hive目录并改名"></a>2.进入hive目录并改名</h2><h2 id="3-修改环境配置"><a href="#3-修改环境配置" class="headerlink" title="3.修改环境配置"></a>3.修改环境配置</h2><pre class=" language-shell"><code class="language-shell"># 使环境变量只对当前用户生效vi .bash_profileexport HIVE_HOME=/usr/local/src/hiveexport PATH=$PATH:$HIVE_HOME/binsource .bash_profile# 对所有用户有效vi /etc/profileexport HIVE_HOME=/usr/local/src/hiveexport PATH=$PATH:$HIVE_HOME/binsource /etc/profile</code></pre><h2 id="4-修改hive配置文件"><a href="#4-修改hive配置文件" class="headerlink" title="4.修改hive配置文件"></a>4.修改hive配置文件</h2><pre class=" language-xml"><code class="language-xml"># 进入到hive配置文件目录cd /usr/local/src/hive/confcp hive-env.sh.tamplate hive-env.shvi hive-env.shexport JAVA_HOME=/usr/local/src/jdk1.8export HADOOP_HOME=/usr/local/src/hadoop-2.6.0export HIVE_HOME=/usr/local/src/hivevi hive-site.xml    # 这个配置文件是我们自己创建的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://node:3306/hiveDB?createDatabaseIfNotExist=true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>数据库连接地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>数据库连接驱动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>数据库连接用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>数据库连接密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="5-将MySQL数据库JDBC驱动拷贝到Hive安装目录的lib下"><a href="#5-将MySQL数据库JDBC驱动拷贝到Hive安装目录的lib下" class="headerlink" title="5.将MySQL数据库JDBC驱动拷贝到Hive安装目录的lib下"></a>5.将MySQL数据库JDBC驱动拷贝到Hive安装目录的lib下</h2><p> <a href="..........%5C%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%84%E4%BB%B6%5Cmysql-connector-java-5.1.27.jar">mysql-connector-java-5.1.27.jar</a> </p><h2 id="6-jar包修改"><a href="#6-jar包修改" class="headerlink" title="6.jar包修改"></a>6.jar包修改</h2><pre class=" language-shell"><code class="language-shell"># 将 hive 的 bin 目录下的 jline-2.12.jar 文件发送到 hadoop 的 share/hadoop/yarn/lib/ 目录下cp jline-2.12.jar /usr/local/src/hadoop-2.6.0/share/hadoop/yarn/lib/# 删除 hadoop 中的 jline-0.9.94.jar 文件cd /usr/local/src/hadoop-2.6.0/share/hadoop/yarn/lib/rm -rf jline-0.9.94.jar</code></pre><h2 id="7-初始化"><a href="#7-初始化" class="headerlink" title="7.初始化"></a>7.初始化</h2><pre class=" language-shell"><code class="language-shell"># 在hive的bin目录下进行初始化schematool -dbType mysql -initSchema# 启动集群start-all.sh# 打开hivehive# 若是出现safemode的报错而导致进入不了hive，可以输入hdfs dfsadmin -safemode leave</code></pre><h1 id="sqoop的安装部署"><a href="#sqoop的安装部署" class="headerlink" title="sqoop的安装部署"></a>sqoop的安装部署</h1><p><a href="https://sqoop.apache.org/docs/1.4.7/SqoopUserGuide.html">官方文档</a></p><h2 id="一、sqoop的安装"><a href="#一、sqoop的安装" class="headerlink" title="一、sqoop的安装"></a>一、sqoop的安装</h2><p>==<strong>sqoop要配合MySQL或其他数据库使用</strong>==</p><p>==<strong>这里配合MySQL使用。要开放MySQL远程连接。</strong>==</p><h3 id="1-解压、改名"><a href="#1-解压、改名" class="headerlink" title="1.解压、改名"></a>1.解压、改名</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf sqoop* -C /usr/local/src/</code></pre><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><pre class=" language-shell"><code class="language-shell">vi /etc/profileexport SQOOP_HOME=/usr/local/src/sqoop-1.4export PATH=$PATH:$SQOOP_HOME/binsource /etc/profilevi .bash_profileexport SQOOP_HOME=/usr/local/src/sqoop-1.4export PATH=$PATH:$SQOOP_HOME/binsource .bash_profile</code></pre><h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3.验证"></a>3.验证</h3><pre><code>sqoop version</code></pre><h3 id="4-拷贝数据库驱动到-sqoop-的-lib-目录下"><a href="#4-拷贝数据库驱动到-sqoop-的-lib-目录下" class="headerlink" title="4.拷贝数据库驱动到 sqoop 的 lib 目录下"></a>4.拷贝数据库驱动到 sqoop 的 lib 目录下</h3><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201130201136679.png" alt="image-20201130201136679"></p><h3 id="5-配置-sqoop-env-sh"><a href="#5-配置-sqoop-env-sh" class="headerlink" title="5.配置 sqoop-env.sh"></a>5.配置 sqoop-env.sh</h3><ul><li>改名</li></ul><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201130201224530.png" alt="image-20201130201224530"></p><pre class=" language-shell"><code class="language-shell">vi sqoop-env.shexport HADOOP_COMMON_HOME=/usr/local/src/hadoop-2.6.0export HADOOP_MAPRED_HOME=/usr/local/src/hadoop-2.6.0export ZOOCFGDIR=/usr/local/src/zookeeper-3.4.5/confexport ZOOKEEPER_HOME=/usr/local/src/zookeeper-3.4.5export HIVE_HOME=/usr/local/src/hiveexport HIVE_CONF_DIR=/usr/local/src/hive/confexport HBASE_HOME=/usr/local/src/hbase</code></pre><ul><li>验证： sqoop help</li></ul><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201130201450868.png" alt="image-20201130201450868"></p><h2 id="二、sqoop的使用"><a href="#二、sqoop的使用" class="headerlink" title="二、sqoop的使用"></a>二、sqoop的使用</h2><p><a href="https://sqoop.apache.org/docs/1.4.7/SqoopUserGuide.html">官方文档</a></p><ul><li>公用参数：数据库连接</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-connect</td><td>连接关系型数据库的URL</td></tr><tr><td>-connection-manager</td><td>指定要使用的连接管道类</td></tr><tr><td>-driver</td><td>Hadoop的根目录</td></tr><tr><td>-help</td><td>打印帮助信息</td></tr><tr><td>-password</td><td>数据库连接密码</td></tr><tr><td>-username</td><td>数据库的连接用户名</td></tr><tr><td>-verbose</td><td>在控制台打印出详细信息</td></tr></tbody></table><ul><li>公用参数：import</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-enclosed-by <char></char></td><td>给字段值前加上指定的字符。</td></tr><tr><td>-escaped-by <char></char></td><td>对字段中的双引号加转义符。</td></tr><tr><td>-fields-terminated-by <char></char></td><td>设定每个字段是以什么符号为结束，默认为逗号。</td></tr><tr><td>-lines-terminated-by <char></char></td><td>设定每行记录之间的分隔符，默认是 \n。</td></tr><tr><td>-mysql-delimiters</td><td>MySQL默认的分隔符设置，字段之间以逗号分隔，行之间以 \n 分隔，默认转义符是 \ ，字段值以单引号包裹。</td></tr><tr><td>-optionally-enclosed-by <char></char></td><td>给带有双引号或单引号的字段值前后加上指定字符。</td></tr></tbody></table><ul><li>公用参数：export</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-input-enclosed-by <char></char></td><td>对字段值前后加上指定字符</td></tr><tr><td>–input-escaped-by <char></char></td><td>对含有转义字符的字段做转义处理</td></tr><tr><td>–input-fields-terminated-by <char></char></td><td>字段之间的分隔符</td></tr><tr><td>–input-lines-terminated-by <char></char></td><td>行之间的分隔符</td></tr><tr><td>–input-optionally-enclosed-by <char></char></td><td>给带有双引号或单引号的字段前后加上指定字符</td></tr></tbody></table><ul><li>公用参数：hive</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–hive-delims-replacement <arg></arg></td><td>用自定义的字符串替换掉数据中的\r\n和\013 \010等字符</td></tr><tr><td>-hive-drop-import-delims</td><td>在导入数据到hive时，去掉数据中的\r\n\013\010这样的字符</td></tr><tr><td>–map-column-hive <arg></arg></td><td>生成hive表时，可以更改生成字段的数据类型</td></tr><tr><td>–hive-partition-key</td><td>创建分区，后面直接跟分区名，分区字段的默认类型为string</td></tr><tr><td>–hive-partition-value <v></v></td><td>导入数据时，指定某个分区的值</td></tr><tr><td>–hive-home <dir></dir></td><td>hive的安装目录，可以通过该参数覆盖之前默认配置的目录</td></tr><tr><td>–hive-import</td><td>将数据从关系数据库中导入到hive表中</td></tr><tr><td>–hive-overwrite</td><td>覆盖掉在hive表中已经存在的数据</td></tr><tr><td>–create-hive-table</td><td>默认是false，即，如果目标表已经存在了，那么创建任务失败</td></tr><tr><td>–hive-table</td><td>后面接要创建的hive表,默认使用MySQL的表名</td></tr><tr><td>-table</td><td>指定关系数据库的表名</td></tr></tbody></table><h3 id="1-测试连接到MySQL数据库，列出MySQL中的所有数据库"><a href="#1-测试连接到MySQL数据库，列出MySQL中的所有数据库" class="headerlink" title="1.测试连接到MySQL数据库，列出MySQL中的所有数据库"></a>1.测试连接到MySQL数据库，列出MySQL中的所有数据库</h3><pre class=" language-shell"><code class="language-shell"># -sqoop list-databases --connect jdbc:mysql://node:3306/ --username root -password 123456# 查看dsj库下的所有表sqoop list-tables --connect jdbc:mysql://node:3306/dsj --username root -password 123456</code></pre><h3 id="2-在MySQL中建库、建表"><a href="#2-在MySQL中建库、建表" class="headerlink" title="2.在MySQL中建库、建表"></a>2.在MySQL中建库、建表</h3><pre class=" language-mysql"><code class="language-mysql">create database dsj;create table t_daochu(    id int not null primary key,    name varchar(8) not null,    sex varchar(8) not null,    age int    );create table uv_info(    id int not null primary key,    name varchar(8) not null,    sex varchar(8) not null,    age int    );insert into t values(1,'xiaohong','girl',11),(2,'xiaoli','girl',12),(3,'xiaoming','boy',12),(4,'xiaojun','boy',14);</code></pre><h3 id="3-mysql-数据-导入、导出-hdfs"><a href="#3-mysql-数据-导入、导出-hdfs" class="headerlink" title="3.mysql 数据 导入、导出 hdfs"></a>3.mysql 数据 导入、导出 hdfs</h3><pre class=" language-shell"><code class="language-shell">例题1：# 使用sqoop将表中数据导入到HDFS。sqoop import --connect jdbc:mysql://node:3306/dsj --username root --table t -password 123456 --target-dir /sqoop -m 1# jdbc:mysql 驱动# node:3306 主机名:端口# --target-dir /sqoop 目标文件# -m 1  map任务数# sqoop import 或 sqoop-import# sqoop-export 操作与 sqoop-import 的操作是相反的，即把 HDFS、hive、hbase 中的文件或数据导出到 RDBMS 数据库中，RDBMS 表必须存在，否则 sqoop-export 操作执行出错。例题2：将例题1中的文件  part-m-00000 导出到 MySQL 数据库 t_daochu 表。sqoop export --connect jdbc:mysql://node:3306/dsj --table t_daochu --columns "id,name,sex,age" --username root -password 123456 --export-dir /sqoop</code></pre><h3 id="4-查看"><a href="#4-查看" class="headerlink" title="4.查看"></a>4.查看</h3><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201130214119569.png" alt="image-20201130214119569"></p><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201130214210459.png" alt="image-20201130214210459"></p><ul><li>例题二，先删除我们不需要的文件</li></ul><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201130220116651.png" alt="image-20201130220116651"></p><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201130220621277.png" alt="image-20201130220621277"></p><h3 id="5-关系型数据的表结构复制到-hive-中"><a href="#5-关系型数据的表结构复制到-hive-中" class="headerlink" title="5.关系型数据的表结构复制到 hive 中"></a>5.关系型数据的表结构复制到 hive 中</h3><pre class=" language-shell"><code class="language-shell">sqoop create-hive-table --connect jdbc:mysql://node1:3306/company --table staff --username root --password 123456 --hive-table test</code></pre><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201201085506565.png" alt="image-20201201085506565"></p><ul><li>出现了报错，解决方法</li></ul><pre><code># 第一种方法。在 /etc/profile 中写入export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:$HIVE_HOME/lib/*# 第二种方法。将hive 里面的lib下的hive-exec-**.jar 放到sqoop 的lib 下</code></pre><h3 id="6-关系型数据库和hive的使用"><a href="#6-关系型数据库和hive的使用" class="headerlink" title="6.关系型数据库和hive的使用"></a>6.关系型数据库和hive的使用</h3><pre class=" language-shell"><code class="language-shell"># 将MySQL dsj库中 t表中的数据传入到hive中sqoop import --connect jdbc:mysql://node:3306/dsj --username root --password 123456 --table t --hive-import --fields-terminated-by '\t'# 将hive中的数据传入到MySQL中sqoop export --connect jdbc:mysql://node:3306/dsj --username root --password 123456 --table uv_info --export-dir /user/hive/warehouse/t --input-fields-terminated-by '\t'</code></pre><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ul><li>每个 RDBMS 表中只有一个单独列作为主键，即不能是多个列 R合键作为主键。</li><li>执行导入操作时，每个 RDBMS 表的所有列列都将被导入到 HDFS 上。</li><li>不能在 RDBMS 表上附加任何诸如 WHERE 条件的子句。</li></ul><h3 id="1-1-导入数据"><a href="#1-1-导入数据" class="headerlink" title="1.1 导入数据"></a>1.1 导入数据</h3><h4 id="1-1-1-RDBMS-到-HDFS"><a href="#1-1-1-RDBMS-到-HDFS" class="headerlink" title="1.1.1 RDBMS 到 HDFS"></a>1.1.1 RDBMS 到 HDFS</h4><pre class=" language-shell"><code class="language-shell">create database company;create table company.staff(id int(4) primary key not null auto_increment,  name varchar(255), sex varchar(255));insert into company.staff(name, sex) values('Thomas', 'Male');insert into company.staff(name, sex) values('Catalina', 'FeMale');# 全部导入sqoop import --connect jdbc:mysql://master:3306/company --username root --password 123456 --table staff --target-dir /usr/company --delete-target-dir -m 1 --fields-terminated-by '\t'# 查询导入sqoop import \--connect jdbc:mysql://node1:3306/company \--username root \--password 123456 \--target-dir /user/company \--delete-target-dir \--num-mappers 1 \--fields-terminated-by "\t" \--query 'select name,sex from staff where id <=1 and $CONDITIONS;'sqoop import \--connect jdbc:mysql://node1:3306/company \--username root \--password 123456 \--target-dir /user/company \--delete-target-dir \--num-mappers 1 \--fields-terminated-by "\t" \--query "select name,sex from staff where id <=2 and \$CONDITIONS;"# 导入指定列sqoop import \--connect jdbc:mysql://node1:3306/company \--username root \--password 123456 \--table staff \--columns id,sex \--target-dir /user/company \--delete-target-dir \--num-mappers 1 \--fields-terminated-by "\t"# 提示：columns 中如果涉及到多列，用逗号分隔，分隔时不要添加空格# 使用 sqoop 关键字筛选查询导入数据sqoop import \--connect jdbc:mysql://node1:3306/company \--username root \--password 123456 \--target-dir /user/company \--delete-target-dir \--m 1 \--fields-terminated-by '\t' \--table staff \--where id='1'sqoop import \--connect jdbc:mysql://node1:3306/company \--username root \--password 123456 \--target-dir /user/company \--delete-target-dir \--num-mappers 1 \--fields-terminated-by "\t" \--table staff \--columns id,sex \--where "id=1"</code></pre><h4 id="1-1-2-RDBMS-到-Hive"><a href="#1-1-2-RDBMS-到-Hive" class="headerlink" title="1.1.2 RDBMS 到 Hive"></a>1.1.2 RDBMS 到 Hive</h4><pre class=" language-shell"><code class="language-shell">sqoop import \--connect jdbc:mysql://node1:3306/company \--username root \--password 123456 \--table staff \--num-mappers 1 \--hive-import \--fields-terminated-by "\t" \--hive-overwrite \--hive-table staff_hivesqoop import --connect jdbc:mysql://node:3306/dsj--username root--password 123456--table t--hive-import--fields-terminated-by '\t'</code></pre><h4 id="1-1-3-RDBMS-到-Hbase"><a href="#1-1-3-RDBMS-到-Hbase" class="headerlink" title="1.1.3 RDBMS 到 Hbase"></a>1.1.3 RDBMS 到 Hbase</h4><pre class=" language-shell"><code class="language-shell">sqoop import \--connect jdbc:mysql://hadoop102:3306/company \--username root \--password 000000 \--table company \--columns "id,name,sex" \--column-family "info" \--hbase-create-table \--hbase-row-key "id" \--hbase-table "hbase_company" \--num-mappers 1 \--split-by id</code></pre><h3 id="1-2-导出数据"><a href="#1-2-导出数据" class="headerlink" title="1.2 导出数据"></a>1.2 导出数据</h3><h4 id="1-2-1-HDFS-到-RDBMS"><a href="#1-2-1-HDFS-到-RDBMS" class="headerlink" title="1.2.1 HDFS 到 RDBMS"></a>1.2.1 HDFS 到 RDBMS</h4><pre class=" language-SHELL"><code class="language-SHELL">sqoop export --connect jdbc:mysql://node:3306/dsj --table t_daochu --columns "id,name,sex,age" --username root -password 123456 --export-dir /sqoopsqoop export \--connect jdbc:mysql://node1:3306/company \--username root \--password 123456 \--table staff \--num-mappers 1 \--export-dir /user/hive/warehouse/staff_hive \--input-fields-terminated-by "\t"</code></pre><h4 id="1-2-2-Hive-到-RDBMS"><a href="#1-2-2-Hive-到-RDBMS" class="headerlink" title="1.2.2 Hive 到 RDBMS"></a>1.2.2 Hive 到 RDBMS</h4><pre class=" language-shell"><code class="language-shell">sqoop export --connect jdbc:mysql://node:3306/dsj --username root --password 123456 --table uv_info --export-dir /user/hive/warehouse/t --input-fields-terminated-by '\t'</code></pre><h3 id="1-3-脚本打包"><a href="#1-3-脚本打包" class="headerlink" title="1.3 脚本打包"></a>1.3 脚本打包</h3><pre class=" language-shell"><code class="language-shell"># 使用 opt 格式的文件打包# 1.创建一个 .opt 文件mkdir jobcd jobvi sqb.opt# 2.编写一个 sqoop 脚本export--connectjdbc:mysql://node1:3306/company--usernameroot--password123456--tablestaff--num-mappers1--export-dir/user/hive/warehouse/staff_hive--input-fields-terminated-by"\t"# 3.执行该脚本sqoop --options-file job/sqp.opt</code></pre><h1 id="spark的安装部署"><a href="#spark的安装部署" class="headerlink" title="spark的安装部署"></a>spark的安装部署</h1><p><a href="http://spark.apache.org/docs/latest/monitoring.html">官方文档</a></p><h2 id="spark的安装"><a href="#spark的安装" class="headerlink" title="spark的安装"></a>spark的安装</h2><h3 id="1-上传文件，解压"><a href="#1-上传文件，解压" class="headerlink" title="1.上传文件，解压"></a>1.上传文件，解压</h3><pre><code>tar -zxvf spark* /usr/local/src/</code></pre><h3 id="2-修改文件名"><a href="#2-修改文件名" class="headerlink" title="2.修改文件名"></a>2.修改文件名</h3><pre><code>mv spark-2.0.0-bin-hadoop2.6 spark-2.0</code></pre><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><pre class=" language-shell"><code class="language-shell"># 进入到spark的conf目录mv spark-env.sh.template spark-env.shvi spark-env.shexport JAVA_HOME=/usr/local/src/jdk1.8export SPARK_MASTER_HOST=nodeexport SPARK_MASTER_PORT=7077# spark高可用配置export JAVA_HOME=/usr/local/src/jdk1.8export HADOOP_CONF_DIR=/usr/local/src/hadoop-2.6.0/etc/hadoopexport SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node,node1,node2 -Dspark.deploy.zookeeper.dir=/spark"export SPARK_MASTER_PORT=7077export SPARK_WORKER_CORES=2export SPARK_WORKER_MEMORY=1gcp slaves.template slavesvi slavesnodenode1node2</code></pre><h3 id="4-配置-HistoryServer"><a href="#4-配置-HistoryServer" class="headerlink" title="4.配置 HistoryServer"></a>4.配置 HistoryServer</h3><pre class=" language-shell"><code class="language-shell"># 下面可不配置1.默认情况下,Spark程序运行完毕后,就无法再查看运行记录的Web UT了,通过HistoryServer可以提供一个服务,通过读取日志文件,使得我们可以在程序运行结束后，依然能够查看运行过程2.复制spark-defaults.conf,以供修改cd /export/servers/spark /confcp spark-defaults.conf.template spark-defaults.confvi spark-defaults.conf3.将以下内容复制到 "spark-defaults.conf" 末尾处,通过这段配置,可以指定Spark将日志输入到HDFS中cp spark-defaults.conf.template spark-defaults.confvi spark-defaults.confspark.eventLog.enabled    truespark.eventLog.dir        hdfs://node:8020/spark_logspark.eventLog.compress    true4.将以下内容复制到"spark-env.sh"的末尾,配置HistoryServer启动参数,使得HistoryServer在启动的时候读取 HDFS 中写入的 Spark 日志#指定Spark History运行参数export SPARK_HISTORY_OPTS="-Dspark.history.ui.port=18080 -Dspark.history.retainedApplications=3 -Dspark.history.fs.logDirectory=hdfs://node:8020/spark_log"5.为 Spark 创建HDFS中的日志目录hdfs dfs -mkdir -p /spark_log</code></pre><h3 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h3><pre class=" language-shell"><code class="language-shell">vi /etc/profileexport SPARK_HOME=/usr/local/src/spark-2.0export PATH=$PATH:$SPARK_HOME/bin</code></pre><h3 id="6-分发给从节点"><a href="#6-分发给从节点" class="headerlink" title="6.分发给从节点"></a>6.分发给从节点</h3><h3 id="7-查看webUI界面"><a href="#7-查看webUI界面" class="headerlink" title="7.查看webUI界面"></a>7.查看webUI界面</h3><pre class=" language-shell"><code class="language-shell"># 首先启动，在spark目录下输入# 在主节点输入sbin/start-all.sh# node1节点输入sbin/start-master.sh# 开启zookeeperzkServer.sh start# 在spark bin 目录下输入，进入shell./spark-shell# 在浏览器输入 主机名:端口号192.168.136.150:8080</code></pre><h1 id="scala的安装部署"><a href="#scala的安装部署" class="headerlink" title="scala的安装部署"></a>scala的安装部署</h1><h2 id="1-上传文件、解压、改名"><a href="#1-上传文件、解压、改名" class="headerlink" title="1.上传文件、解压、改名"></a>1.上传文件、解压、改名</h2><h2 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2.配置环境"></a>2.配置环境</h2><pre class=" language-shell"><code class="language-shell">export SCALA_HOME=/usr/local/src/scalaexport PATH=$PATH:$SCALA_HOME/bin</code></pre><h2 id="3-验证-1"><a href="#3-验证-1" class="headerlink" title="3.验证"></a>3.验证</h2><pre class=" language-shell"><code class="language-shell"># 直接在命令行输入scala即可</code></pre><h1 id="kafka的安装部署"><a href="#kafka的安装部署" class="headerlink" title="kafka的安装部署"></a>kafka的安装部署</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>kafka需要配置好zookeeper</strong></p><h3 id="1-上传-tar-包，解压，改名"><a href="#1-上传-tar-包，解压，改名" class="headerlink" title="1.上传 tar 包，解压，改名"></a>1.上传 tar 包，解压，改名</h3><h3 id="2-配置环境变量-1"><a href="#2-配置环境变量-1" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><pre class=" language-shell"><code class="language-shell">vi /etc/profileexport KAFKA_HOME=/usr/local/src/kafkaexport PATH=$PATH:$KAFKA_HOME/binsource /etc/profile</code></pre><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><pre class=" language-shell"><code class="language-shell"># 进入kafka的config目录vi server.propertieslog.dirs=/usr/local/src/kafka/datazookeeper.connect=node:2181,node1:2181,node2:2181</code></pre><h3 id="4-分发"><a href="#4-分发" class="headerlink" title="4.分发"></a>4.分发</h3><pre class=" language-shell"><code class="language-shell">scp -r kafka node1:/usr/local/src/scp -r /etc/profile node1:/etc/scp -r kafka node2:/usr/local/src/scp -r /etc/profile node2:/etc/</code></pre><h3 id="5-修改其余两个server-properties"><a href="#5-修改其余两个server-properties" class="headerlink" title="5.修改其余两个server.properties"></a>5.修改其余两个server.properties</h3><pre class=" language-shell"><code class="language-shell"># 把node1中的改为1、node2中的改为2broker.id=1broker.id=2</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-kafka简单使用"><a href="#1-kafka简单使用" class="headerlink" title="1.kafka简单使用"></a>1.kafka简单使用</h3><pre class=" language-shell"><code class="language-shell">/usr/local/src/kafka/bin/kafka-server-start.sh -daemon /usr/local/src/kafka/config/server.propertieskafka-server-stop.shbin/kafka-topics.sh --list --zookeeper node:2181# 三台输入# bin/kafka-server-start.sh config/server.propertiesbin/kafka-server-start.sh -daemon config/server.properties# 输入（若找不到命令：yum -y install net-tools）netstat -tunlp|egrep "(2181|9092)"# 创建一个生产者bin/kafka-topics.sh --create --zookeeper node:2181 --replication-factor 2 --partitions 2 --topic test2# 启动生产者bin/kafka-console-producer.sh --broker-list node:9092 --topic test# 启动消费者kafka-console-consumer.sh --bootstrap-server node1:9092 --topic test --kafka-console-consumer.sh --bootstrap-server node2:9092 --topic test --# 然后就可以在第二台输入信息，第三台会接收信息。</code></pre><h3 id="2-kafka启动脚本"><a href="#2-kafka启动脚本" class="headerlink" title="2.kafka启动脚本"></a>2.kafka启动脚本</h3><pre class=" language-shell"><code class="language-shell">#!/bin/bashcase $1 in"start"){    for i in node node1 node2    do        echo "************$i*************"        ssh $i "kafka-server-start.sh -daemon /usr/local/src/kafka/config/server.properties"    done};;"stop"){    for i in node node1 node2    do        echo "************$i*************"        ssh $i "/usr/local/src/kafka/bin/kafka-server-stop.sh"    done};;esac</code></pre><h3 id="3-kafka命令行操作"><a href="#3-kafka命令行操作" class="headerlink" title="3.kafka命令行操作"></a>3.kafka命令行操作</h3><pre class=" language-shell"><code class="language-shell">bin/kafka-server-start.sh -daemon config/server.properties1.查看当前服务器中的所有 topickafka-topics.sh --zookeeper node:2181 --list2.创建 topic kafka-topics.sh --zookeeper node:2181 --create --replication-factor 2 --partitions 3 --topic first2# replicat 的数量不能超过集群节点数量# partition 可以有多个，但同一个节点不能出现相同的分区3.查看某个 topic 的详情kafka-topics.sh --zookeeper node:2181 --describe --topic first4.修改分区数kafka-topics.sh --zookeeper node:2181 --alter --topic first --partitions 65.删除 topickafka-topics.sh --zookeeper node:2181 --delete --topic first6.发送消息kafka-console-producer.sh --broker-list node:9092 --topic first7.接收消息# 老版本kafka-console-consumer.sh --zookeeper node:2181 --topic firstkafka-console-consumer.sh --zookeeper node:2181 --topic first --from-beginning# 新版本kafka-console-consumer.sh --bootstrap-server node:9092 --topic firstkafka-console-consumer.sh --bootstrap-server node:9092 --topic first --from-beginning</code></pre><h1 id="flume的安装部署"><a href="#flume的安装部署" class="headerlink" title="flume的安装部署"></a>flume的安装部署</h1><p><a href="http://flume.apache.org/releases/content/1.6.0/FlumeUserGuide.html">官方文档</a></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h3 id="1-上传并解压，改名"><a href="#1-上传并解压，改名" class="headerlink" title="1.上传并解压，改名"></a>1.上传并解压，改名</h3><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><pre class=" language-shell"><code class="language-shell"># 进入到 flume 目录下的 confmv flume-env.sh.template flume-env.shvi flume-env.shexport JAVA_HOME=/usr/local/src/jdk1.8</code></pre><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h3><pre class=" language-shell"><code class="language-shell">vi /etc/profileexport FLUME_HOME=/usr/local/src/flumeexport PATH=$PATH:$FLUME_HOME/binsource /etc/profile# 验证flume-ng version</code></pre><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="1-监听端口号"><a href="#1-监听端口号" class="headerlink" title="1.监听端口号"></a>1.监听端口号</h3><pre class=" language-shell"><code class="language-shell">vi flume-netcat-logger.conf# Name the components on this agenta1.sources = r1a1.sinks = k1a1.channels = c1# Describe/configure the sourcea1.sources.r1.type = netcata1.sources.r1.bind = nodea1.sources.r1.port = 44444# Describe the sinka1.sinks.k1.type = logger# Use a channel which buffers events in memorya1.channels.c1.type = memorya1.channels.c1.capacity = 1000a1.channels.c1.transactionCapacity = 100# Bind the source and sink to the channela1.sources.r1.channels = c1a1.sinks.k1.channel = c1bin/flume-ng agent -c conf/ -n a1 -f job/flume-netcat-logger.conf -Dflume.root.logger=INFO,consolebin/flume-ng agent --conf conf/ --conf-file job/flume-netcat-logger.conf --name a1 -Dflume.root.logger=INFO,consoleyum -y install nc服务端 nc -lk 44444客户端 nc node 44444</code></pre><h3 id="2-实时监控本地文件（单个）"><a href="#2-实时监控本地文件（单个）" class="headerlink" title="2.实时监控本地文件（单个）"></a>2.实时监控本地文件（单个）</h3><pre class=" language-shell"><code class="language-shell">vi file-flume-logger.conf# Name the components on this agenta1.sources = r1a1.sinks = k1a1.channels = c1# Describe/configure the sourcea1.sources.r1.type = execa1.sources.r1.command = tail -f /tmp/root/hive.log# Describe the sinka1.sinks.k1.type = logger# Use a channel which buffers events in memorya1.channels.c1.type = memorya1.channels.c1.capacity = 1000a1.channels.c1.transactionCapacity = 100# Bind the source and sink to the channela1.sources.r1.channels = c1a1.sinks.k1.channel = c1bin/flume-ng agent -c conf/ -f job/file-flume-logger.conf -n a1 -Dflume.root.logger=INFO,console</code></pre><ul><li><strong>将数据输出到 HDFS，要有Hadoop相关 jar 包</strong></li></ul><p> <a href="..........%5Clearning%5C%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B5%84%E6%96%99%5C%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%5Cflume%5C%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%E8%B5%84%E6%96%99%5C2.%E8%B5%84%E6%96%99%5C01_jar%E5%8C%85%5Cflume-hadoop-jar%5Ccommons-configuration-1.6.jar">commons-configuration-1.6.jar</a> </p><p> <a href="..........%5Clearning%5C%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B5%84%E6%96%99%5C%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%5Cflume%5C%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%E8%B5%84%E6%96%99%5C2.%E8%B5%84%E6%96%99%5C01_jar%E5%8C%85%5Cflume-hadoop-jar%5Ccommons-io-2.4.jar">commons-io-2.4.jar</a> </p><p> <a href="..........%5Clearning%5C%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B5%84%E6%96%99%5C%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%5Cflume%5C%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%E8%B5%84%E6%96%99%5C2.%E8%B5%84%E6%96%99%5C01_jar%E5%8C%85%5Cflume-hadoop-jar%5Chadoop-auth-2.7.2.jar">hadoop-auth-2.7.2.jar</a> </p><p> <a href="..........%5Clearning%5C%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B5%84%E6%96%99%5C%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%5Cflume%5C%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%E8%B5%84%E6%96%99%5C2.%E8%B5%84%E6%96%99%5C01_jar%E5%8C%85%5Cflume-hadoop-jar%5Chadoop-common-2.7.2.jar">hadoop-common-2.7.2.jar</a> </p><p> <a href="..........%5Clearning%5C%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B5%84%E6%96%99%5C%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%5Cflume%5C%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%E8%B5%84%E6%96%99%5C2.%E8%B5%84%E6%96%99%5C01_jar%E5%8C%85%5Cflume-hadoop-jar%5Chadoop-hdfs-2.7.2.jar">hadoop-hdfs-2.7.2.jar</a> </p><p> <a href="..........%5Clearning%5C%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B5%84%E6%96%99%5C%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%5Cflume%5C%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%E8%B5%84%E6%96%99%5C2.%E8%B5%84%E6%96%99%5C01_jar%E5%8C%85%5Cflume-hadoop-jar%5Chtrace-core-3.1.0-incubating.jar">htrace-core-3.1.0-incubating.jar</a> </p><pre class=" language-shell"><code class="language-shell">vi file-flume-hdfs.conf# Name the components on this agent a2.sources = r2 a2.sinks = k2 a2.channels = c2 # Describe/configure the source a2.sources.r2.type = exec # 大写 F 但监控失败时会重试，f 不会# a2.sources.r2.command = tail -F /tmp/root/hive.log a2.sources.r2.command = tail -f /tmp/root/hive.log # a2.sources.r2.shell = /bin/bash -c # Describe the sink a2.sinks.k2.type = hdfs a2.sinks.k2.hdfs.path = hdfs://node:9000/flume/upload/%Y%m%d/%H #上传文件的前缀 a2.sinks.k2.hdfs.filePrefix = logs- #是否按照时间滚动文件夹 a2.sinks.k2.hdfs.round = true #重新定义时间单位 a2.sinks.k2.hdfs.roundUnit = hour /second/minute#多少时间单位创建一个新的文件夹 a2.sinks.k2.hdfs.roundValue = 1 #是否使用本地时间戳 a2.sinks.k2.hdfs.useLocalTimeStamp = true #积攒多少个 Event 才 flush 到 HDFS 一次 a2.sinks.k2.hdfs.batchSize = 1000 #设置文件类型，可支持压缩 a2.sinks.k2.hdfs.fileType = DataStream #多久生成一个新的文件 秒a2.sinks.k2.hdfs.rollInterval = 30 #设置每个文件的滚动大小 a2.sinks.k2.hdfs.rollSize = 134217700 #文件的滚动与 Event 数量无关 a2.sinks.k2.hdfs.rollCount = 0 # Use a channel which buffers events in memory a2.channels.c2.type = memorya2.channels.c2.capacity = 1000a2.channels.c2.transactionCapacity = 100# Bind the source and sink to the channela2.sources.r2.channels = c2a2.sinks.k2.channel = c2 bin/flume-ng agent -c conf/ -f job/file-flume-hdfs.conf -n a2</code></pre><h3 id="3-实时监控目录下多个新文件"><a href="#3-实时监控目录下多个新文件" class="headerlink" title="3.实时监控目录下多个新文件"></a>3.实时监控目录下多个新文件</h3><pre class=" language-shell"><code class="language-shell">vi dir-flume-hdfs.conf# Name the components on this agenta3.sources = r3 a3.sinks = k3 a3.channels = c3 # Describe/configure the source a3.sources.r3.type = spooldir a3.sources.r3.spoolDir = /usr/local/src/flume/uploada3.sources.r3.fileSuffix = .COMPLETED #忽略所有以.tmp 结尾的文件，不上传 a3.sources.r3.ignorePattern = ([^ ]*\.tmp) # Describe the sink a3.sinks.k3.type = hdfs a3.sinks.k3.hdfs.path = hdfs://node:9000/flume/uploads/%Y%m%d/%H #上传文件的前缀 a3.sinks.k3.hdfs.filePrefix = upload- #是否按照时间滚动文件夹 a3.sinks.k3.hdfs.round = true #多少时间单位创建一个新的文件夹 a3.sinks.k3.hdfs.roundValue = 1 #重新定义时间单位 a3.sinks.k3.hdfs.roundUnit = hour #是否使用本地时间戳 a3.sinks.k3.hdfs.useLocalTimeStamp = true #积攒多少个 Event 才 flush 到 HDFS 一次 a3.sinks.k3.hdfs.batchSize = 100#设置文件类型，可支持压缩 a3.sinks.k3.hdfs.fileType = DataStream #多久生成一个新的文件 a3.sinks.k3.hdfs.rollInterval = 60 #设置每个文件的滚动大小大概是 128M a3.sinks.k3.hdfs.rollSize = 134217700 #文件的滚动与 Event 数量无关 a3.sinks.k3.hdfs.rollCount = 0 #执行HDFS操作的超时时间（毫秒）a3.sinks.k3.hdfs.callTimeout = 40000# Use a channel which buffers events in memory a3.channels.c3.type = memory a3.channels.c3.capacity = 1000 a3.channels.c3.transactionCapacity = 100 # Bind the source and sink to the channel a3.sources.r3.channels = c3 a3.sinks.k3.channel = c3 bin/flume-ng agent -c conf/ -f job/dir-flume-hdfs.conf -n a3</code></pre><h1 id="hbase的安装部署"><a href="#hbase的安装部署" class="headerlink" title="hbase的安装部署"></a>hbase的安装部署</h1><h2 id="1-上传安装包，解压，改名"><a href="#1-上传安装包，解压，改名" class="headerlink" title="1.上传安装包，解压，改名"></a>1.上传安装包，解压，改名</h2><h2 id="2-配置环境变量-2"><a href="#2-配置环境变量-2" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><pre class=" language-shell"><code class="language-shell">vi /etc/profileexport HBASE_HOME=/usr/local/src/hbaseexport PATH=$PATH:$HBASE_HOME/bin</code></pre><h2 id="3-进入hbase目录下的conf目录"><a href="#3-进入hbase目录下的conf目录" class="headerlink" title="3.进入hbase目录下的conf目录"></a>3.进入hbase目录下的conf目录</h2><pre class=" language-xml"><code class="language-xml">vi hbase-env.shexport JAVA_HOME=/usr/local/src/jdk1.8export HBASE_MANAGES_ZK=falsevi hbase-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://node:9000/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node:60000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定hbase的master节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node,node1,node2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>指定zookeeper集群<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/export/server/zookeeper-3.4.5/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>这个路径要与zoo.cfg设置一致<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>vi regionserversnode1node2</code></pre><h2 id="hbase和-hadoop-的版本问题"><a href="#hbase和-hadoop-的版本问题" class="headerlink" title="hbase和 hadoop 的版本问题"></a>hbase和 hadoop 的版本问题</h2><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201202191842683.png" alt="image-20201202191842683"></p><p><img src="C:\Users\Aunean\AppData\Roaming\Typora\typora-user-images\image-20201202191851277.png" alt="image-20201202191851277"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hadoop配置文件讲解&quot;&gt;&lt;a href=&quot;#Hadoop配置文件讲解&quot; class=&quot;headerlink&quot; title=&quot;Hadoop配置文件讲解&quot;&gt;&lt;/a&gt;Hadoop配置文件讲解&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置文件&lt;/th</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.shiyiri.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Hadoop" scheme="https://www.shiyiri.top/tags/Hadoop/"/>
    
  </entry>
  
</feed>
